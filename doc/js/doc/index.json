[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "packages/francy/index.js",
    "content": "export { FrancyApp } from './src/francy';\nexport { MIME, Logger } from 'francy-core';\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "packages/francy/src/francy.js",
    "content": "// import css inline - couldn't make this work on the webpack conf :/\nimport '!style-loader!css-loader!./style/index.css';\nimport { \n  Components, \n  ConfigurationHandler, \n  Decorators, \n  DefaultConfiguration, \n  Logger, \n  Renderer, \n  RenderingManagerHandler, \n  Utilities } from 'francy-core';\nimport Frame from './render/frame';\n\n/* global VERSION */\n\n(() => Logger.info(`Francy JS v${VERSION}! Enjoy...`))();\n\n/**\n * Francy is the main entry point for the whole framework. By passing an input string/object to the {Francy.load} function,\n * Francy will handle the creation of that json as long it is a valid and understandable json object to Francy.\n *\n * @access public\n *\n * @example\n * let francy = new Francy({appendTo: '#div-id', callbackHandler: console.log, configuration: ConfigurationHandler({})});\n * francy.load(json).render();\n */\nexport class FrancyApp extends Renderer {\n\n  /**\n   * Creates an instance of Francy with the following options:\n   * @typedef {Object} Options\n   * @property {Boolean} appendTo where the generated html/svg components will be attached to, default body\n   * @property {Function} callbackHandler this handler will be used to invoke actions from the menu, default console.log\n   */\n  constructor({ appendTo, callbackHandler }) {\n    super({ \n      appendTo: appendTo, \n      callbackHandler: callbackHandler \n    }, {\n      renderingManager: new RenderingManagerHandler({ \n        configuration: new ConfigurationHandler({ \n          configuration: DefaultConfiguration \n        }), \n        instanceId: Utilities.generateId() \n      }),\n      get configuration() {\n        return this.renderingManager.context.configuration; \n      }, \n      get instanceId() {\n        return this.renderingManager.context.instanceId; \n      },\n    });\n    this.frame = undefined;\n    // all good!\n  }\n\n  /**\n   * Returns the {RenderingManager] instance to register and unregister new renderers\n   * \n   * @returns {RenderingManager} instance\n   * @public\n   */\n  get RenderingManager() {\n    return this.context.renderingManager;\n  }\n  \n\n  /**\n   * Returns the {Components] instance to to get external components\n   * \n   * @returns {Components} instance\n   * @public\n   */\n  get Components() {\n    return Components;\n  }\n\n  /**\n   * Main entry point. Calling render will trigger the drawing of a json object\n   * passed through the load method.\n   * @returns {object} the html element created\n   * @public\n   */\n  @Decorators.Data.requires('canvas')\n  async render() {\n    if (!this.frame) {\n      this.frame = new Frame(this.options, this.context);\n    }\n    let graph = await this.frame\n      .load(this.data).render()\n      .then(element => element)\n      .finally(() => this.load({}, true));\n    return graph.element.node();\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy/src/francy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "FrancyApp",
    "memberof": "packages/francy/src/francy.js",
    "static": true,
    "longname": "packages/francy/src/francy.js~FrancyApp",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy/src/francy.js",
    "importStyle": "{FrancyApp}",
    "description": "Francy is the main entry point for the whole framework. By passing an input string/object to the {Francy.load} function,\nFrancy will handle the creation of that json as long it is a valid and understandable json object to Francy.",
    "examples": [
      "let francy = new Francy({appendTo: '#div-id', callbackHandler: console.log, configuration: ConfigurationHandler({})});\nfrancy.load(json).render();"
    ],
    "lineNumber": 28,
    "interface": false,
    "extends": [
      "francy-core~Renderer"
    ]
  },
  {
    "__docId__": 51,
    "kind": "typedef",
    "name": "Options",
    "memberof": "packages/francy/src/francy.js~FrancyApp",
    "static": false,
    "longname": "packages/francy/src/francy.js~FrancyApp#Options",
    "access": "public",
    "description": "Creates an instance of Francy with the following options:",
    "lineNumber": 36,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Options"
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "frame",
    "memberof": "packages/francy/src/francy.js~FrancyApp",
    "static": false,
    "longname": "packages/francy/src/francy.js~FrancyApp#frame",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "get",
    "name": "RenderingManager",
    "memberof": "packages/francy/src/francy.js~FrancyApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy/src/francy.js~FrancyApp#RenderingManager",
    "access": "public",
    "description": "Returns the {RenderingManager] instance to register and unregister new renderers",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RenderingManager} instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RenderingManager"
      ],
      "spread": false,
      "description": "instance"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "get",
    "name": "Components",
    "memberof": "packages/francy/src/francy.js~FrancyApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy/src/francy.js~FrancyApp#Components",
    "access": "public",
    "description": "Returns the {Components] instance to to get external components",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Components} instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Components"
      ],
      "spread": false,
      "description": "instance"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy/src/francy.js~FrancyApp",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy/src/francy.js~FrancyApp#render",
    "access": "public",
    "description": "Main entry point. Calling render will trigger the drawing of a json object\npassed through the load method.",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} the html element created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the html element created"
    },
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('canvas')"
      }
    ],
    "params": []
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "packages/francy/src/render/frame.js",
    "content": "import { CompositeRenderer, Decorators, Logger } from 'francy-core';\nimport MainMenu from './menu-main';\nimport Message from './message';\n\n/* global d3 */\n\n/**\n * The {Frame} is the highest component containing the building block of {Francy} .\n * This renderers the {MainMenu}, {Messages} and the active {Renderer} {Canvas}\n *\n * @access private\n */\nexport default class Frame extends CompositeRenderer {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    let Renderer = this.context.renderingManager.activeRenderer();\n    this.mainMenu = new MainMenu(this.options, this.context);\n    this.messages = new Message(this.options, this.context);\n    this.canvas = new Renderer(this.options, this.context);\n  }\n\n  @Decorators.Data.requires('canvas')\n  async render() {\n    const frameId = `Frame-${this.data.canvas.id}`;\n    this.element = d3.select(`div#${frameId}`);\n    // check if the canvas is already present\n    if (!this.element.node()) {\n      // create a svg element detached from the DOM!\n      Logger.debug(`(${this.context.instanceId}) Creating Frame [${frameId}]...`);\n      this.element = this.parent.append('div').attr('class', 'francy').attr('id', frameId);\n    }\n\n    // cannot continue if canvas is not present\n    if (!this.element.node()) {\n      throw new Error(`Oops, could not create frame with id [${frameId}]... Cannot proceed.`);\n    }\n\n    this.element.style('height', +this.data.canvas.height + 37); // plus menu height\n\n    Logger.debug(`(${this.context.instanceId}) Frame updated [${frameId}]...`);\n    \n    this.removeChildren();\n    this.addChild(this.mainMenu).addChild(this.messages).addChild(this.canvas);\n    this.handlePromise(this.renderChildren());\n\n    return this;\n  }\n\n  get MainMenu() {\n    return this.mainMenu;\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy/src/render/frame.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "class",
    "name": "Frame",
    "memberof": "packages/francy/src/render/frame.js",
    "static": true,
    "longname": "packages/francy/src/render/frame.js~Frame",
    "access": "private",
    "export": true,
    "importPath": "francy-js/packages/francy/src/render/frame.js",
    "importStyle": "Frame",
    "description": "The {Frame} is the highest component containing the building block of {Francy} .\nThis renderers the {MainMenu}, {Messages} and the active {Renderer} {Canvas}",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "francy-core~CompositeRenderer"
    ]
  },
  {
    "__docId__": 59,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy/src/render/frame.js~Frame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy/src/render/frame.js~Frame#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "mainMenu",
    "memberof": "packages/francy/src/render/frame.js~Frame",
    "static": false,
    "longname": "packages/francy/src/render/frame.js~Frame#mainMenu",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "messages",
    "memberof": "packages/francy/src/render/frame.js~Frame",
    "static": false,
    "longname": "packages/francy/src/render/frame.js~Frame#messages",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "canvas",
    "memberof": "packages/francy/src/render/frame.js~Frame",
    "static": false,
    "longname": "packages/francy/src/render/frame.js~Frame#canvas",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy/src/render/frame.js~Frame",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy/src/render/frame.js~Frame#render",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('canvas')"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy/src/render/frame.js~Frame",
    "static": false,
    "longname": "packages/francy/src/render/frame.js~Frame#element",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "get",
    "name": "MainMenu",
    "memberof": "packages/francy/src/render/frame.js~Frame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy/src/render/frame.js~Frame#MainMenu",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "packages/francy/src/render/menu-main.js",
    "content": "import * as SvgToPng from 'save-svg-as-png';\nimport { AboutModal, Logger, Menu, RENDERING_EVENTS, Utilities } from 'francy-core';\n\n/* global d3 */\n\n/**\n * The {MainMenu} holds the default options for the current Graphics.\n *\n * @access private\n */\nexport default class MainMenu extends Menu {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    this.aboutModal = new AboutModal(this.options, this.context);\n  }\n\n  async render() {\n    // Otherwise clashes with the canvas itself!\n    const menuId = `MainMenu-${this.data.canvas.id}`;\n    this.element = d3.select(`#${menuId}`);\n\n    // Check if the menu is already present\n    if (!this.element.node()) {\n      // create a div element detached from the DOM!\n      Logger.debug(`(${this.context.instanceId}) Creating Main Menu [${menuId}]...`);\n      this.element = this.parent.append('div').attr('class', 'francy-main-menu-holder').attr('id', menuId);\n    }\n\n    // Force rebuild menu again\n    this.element.selectAll('*').remove();\n\n    this.element = this.element.append('ul').attr('class', 'francy-main-menu');\n\n    // Fixed loader\n    let loaderId = `Loader-${this.data.canvas.id}`;\n    this.element.append('li').attr('class', 'francy-loader').append('a').datum({}).attr('id', loaderId).classed('loader', true);\n\n    // Title\n    if (this.data.canvas.title) {\n      this.element.append('li').attr('class', 'francy-title').append('a').html(this.data.canvas.title);\n    }\n\n    // create default menu entry\n    let entry = this.element.append('li').attr('class', 'francy-entry');\n    entry.append('a').attr('title', 'Francy').html('Francy').append('div').classed('francy-menu-arrow-down', true).style('float', 'right');\n    entry.append('ul');\n\n    this._buildDefaultMenu();\n\n    entry = this.element.append('li').attr('class', 'settings-entry');\n    entry.append('a').attr('title', 'Settings').html('Settings').append('div').classed('francy-menu-arrow-down', true).style('float', 'right');\n    entry.append('ul');\n\n    this._buildSettingsMenu();\n\n    // Traverse all menus and flatten them!\n    let menusIterator = this.iterator(Object.values(this.data.canvas.menus));\n    this.traverse(this.element, menusIterator);\n\n    Logger.debug(`(${this.context.instanceId}) Main Menu updated [${menuId}]...`);\n\n    return this;\n  }\n\n  _buildDefaultMenu() {\n    let self = this;\n    this._addEntryOnFrancyMenu({\n      id: 'zoom-entry',\n      title: 'Zoom to Fit',\n      onClickCallback: function () {\n        self.options.appendTo.canvas.zoomToFit(true);\n      }\n    });\n    this._addEntryOnFrancyMenu({\n      id: 'save-entry',\n      title: 'Save to PNG',\n      onClickCallback: function () {\n        let name = self.data.canvas.title \n          ? Utilities.sanitize(self.data.canvas.title, '_') + '.png' \n          : 'diagram.png';\n        if (self.SVGParent.node()) {\n          SvgToPng.saveSvgAsPng(self.SVGParent.node(), name);\n        } else if (self.HTMLCanvasParent.node()) {\n          let link = document.createElement('a');\n          link.download = name;\n          link.href = self.HTMLCanvasParent.node().toDataURL();\n          if (document.createEvent) {\n            let e = document.createEvent('MouseEvents');\n            e.initMouseEvent('click', true, true, window,\n              0, 0, 0, 0, 0, false, false, false,\n              false, 0, null);\n      \n            link.dispatchEvent(e);\n          } else if (link.fireEvent) {\n            link.fireEvent('onclick');\n          }\n        }\n      }\n    });\n    this._addEntryOnFrancyMenu({\n      id: 'about-entry',\n      title: 'About',\n      onClickCallback: function () {\n        self.handlePromise(self.aboutModal.load(self.data).render());\n      }\n    });\n  }\n\n  _buildSettingsMenu() {\n    let self = this;\n\n    function insertEntry(o) {\n      self.addMultiMenuOnSettingsMenu({\n        menuId: 'renderers-entry',\n        menuTitle: 'Renderers',\n        entryId: o.id,\n        entryTitle: `${o.enable ? '&#9745' : '&#9744'} ${o.name}`,\n        entryOnClickCallback: function () {\n          self.context.renderingManager.enable(o.name);\n        },\n        entryOnEachCallback: function () {\n          let unregisterId = `renderer-${o.name}-unregister-${self.data.canvas.id}`;\n          self.context.renderingManager.subscribe(RENDERING_EVENTS.UNREGISTER, onUnregister, unregisterId);\n        }\n      });\n\n      function onUnregister() {\n        d3.select(d3.select(this).node().parentElement).remove();\n      }\n    }\n\n    let registerId = `renderers-register-${self.data.canvas.id}`;\n    self.context.renderingManager.subscribe(RENDERING_EVENTS.REGISTER, insertEntry, registerId);\n\n    let reRenderId = `renderer-rerender-${self.data.canvas.id}`;\n    self.context.renderingManager.subscribe(RENDERING_EVENTS.STATUS, reRender, reRenderId);\n\n    function reRender(o) {\n      var canvas = d3.select(`#Canvas-${self.data.canvas.id}`);\n      if (canvas.node()) {\n        self.element.select(`.${o.id}`).html(`${o.enable ? '&#9745' : '&#9744'} ${o.name}`);\n        if (o.enable) {\n          // remove previous rendered canvas\n          self.parent.select(`#Canvas-${self.data.canvas.id}`).remove();\n          // re-render\n          setTimeout(() => {\n            let Renderer = self.context.renderingManager.activeRenderer();\n            self.options.appendTo.data = self.options.appendTo.canvas.data;\n            self.options.appendTo.canvas = new Renderer(self.options, self.context);\n            self.handlePromise(self.options.appendTo.render());\n          }, 100);\n        }\n      } else {\n        Logger.debug(`(${this.context.instanceId}) The Canvas ${self.data.canvas.id} seems to have disapeared... removing events associated to it`);\n        self.context.renderingManager.unsubscribe(reRenderId);\n        self.context.renderingManager.unsubscribe(registerId);\n      }\n    }\n\n    Object.values(self.context.renderingManager.allRenderers()).forEach(insertEntry);\n  }\n\n  addEntryOnSettingsMenu({ id, title, onClickCallback, onEachCallback, withSeparator }) {\n    let entry = this.element.select('.settings-entry>ul').data([{ id: id, title: title }]);\n    entry = entry.append('li').attr('class', d => d.id);\n    onClickCallback = onClickCallback || function () {};\n    onEachCallback = onEachCallback || function () {};\n    entry.append('a').attr('title', d => d.title).html(d => d.title)\n      .on('click', onClickCallback)\n      .each(onEachCallback);\n    if (withSeparator) {\n      // add separator\n      entry.append('hr');\n    }\n    return entry;\n  }\n\n  addMultiMenuOnSettingsMenu({ menuId, menuTitle, entryId, entryTitle, entryOnClickCallback, entryOnEachCallback }) {\n    let entry = this.element.select(`.settings-entry>ul>li.${menuId}`);\n    if (!entry.node()) {\n      entry = this.element.select('.settings-entry>ul').append('li').attr('class', menuId);\n      entry.append('a').text(menuTitle).append('div').classed('francy-menu-arrow-right', true).style('float', 'right');\n    }\n\n    let content = entry.select('ul');\n    if (!content.node()) {\n      content = entry.append('ul');\n    }\n\n    entryOnClickCallback = entryOnClickCallback || function () {};\n    entryOnEachCallback = entryOnEachCallback || function () {};\n\n    function insertEntry({ entryId, entryTitle, entryOnClickCallback, entryOnEachCallback }) {\n      let entryMenu = content.select(`li>a.${entryId}`);\n      if (!entryMenu.node()) {\n        entryMenu = content.append('li').append('a').attr('class', entryId);\n      }\n      entryMenu.html(entryTitle)\n        .on('click', entryOnClickCallback)\n        .each(entryOnEachCallback);\n    }\n\n    insertEntry({ entryId, entryTitle, entryOnClickCallback, entryOnEachCallback });\n  }\n\n  _addEntryOnFrancyMenu({ id, title, onClickCallback, onEachCallback, withSeparator }) {\n    let entry = this.element.select('.francy-entry>ul').data([{ id: id, title: title }]);\n    entry = entry.append('li').attr('class', d => d.id);\n    onClickCallback = onClickCallback || function () {};\n    onEachCallback = onEachCallback || function () {};\n    entry.append('a').html(d => d.title)\n      .on('click', onClickCallback)\n      .each(onEachCallback);\n    if (withSeparator) {\n      // add separator\n      entry.append('hr');\n    }\n    return entry;\n  }\n\n  addEntryOnMenu({ id, title, onClickCallback, onEachCallback }) {\n    let entry = this.element.data([{ id: id, title: title }]);\n    entry = entry.append('li').attr('class', d => d.id);\n    onClickCallback = onClickCallback || function () {};\n    onEachCallback = onEachCallback || function () {};\n    entry.append('a').html(d => d.title)\n      .on('click', onClickCallback)\n      .each(onEachCallback);\n    return entry;\n  }\n\n  removeMenuEntry(id) {\n    this.element.select(`.${id}`).remove();\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy/src/render/menu-main.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "class",
    "name": "MainMenu",
    "memberof": "packages/francy/src/render/menu-main.js",
    "static": true,
    "longname": "packages/francy/src/render/menu-main.js~MainMenu",
    "access": "private",
    "export": true,
    "importPath": "francy-js/packages/francy/src/render/menu-main.js",
    "importStyle": "MainMenu",
    "description": "The {MainMenu} holds the default options for the current Graphics.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "francy-core~Menu"
    ]
  },
  {
    "__docId__": 69,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy/src/render/menu-main.js~MainMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy/src/render/menu-main.js~MainMenu#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "aboutModal",
    "memberof": "packages/francy/src/render/menu-main.js~MainMenu",
    "static": false,
    "longname": "packages/francy/src/render/menu-main.js~MainMenu#aboutModal",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy/src/render/menu-main.js~MainMenu",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy/src/render/menu-main.js~MainMenu#render",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy/src/render/menu-main.js~MainMenu",
    "static": false,
    "longname": "packages/francy/src/render/menu-main.js~MainMenu#element",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "_buildDefaultMenu",
    "memberof": "packages/francy/src/render/menu-main.js~MainMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy/src/render/menu-main.js~MainMenu#_buildDefaultMenu",
    "access": "private",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "_buildSettingsMenu",
    "memberof": "packages/francy/src/render/menu-main.js~MainMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy/src/render/menu-main.js~MainMenu#_buildSettingsMenu",
    "access": "private",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "addEntryOnSettingsMenu",
    "memberof": "packages/francy/src/render/menu-main.js~MainMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy/src/render/menu-main.js~MainMenu#addEntryOnSettingsMenu",
    "access": "public",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"id\": *, \"title\": *, \"onClickCallback\": *, \"onEachCallback\": *, \"withSeparator\": *}"
        ],
        "defaultRaw": {
          "id": null,
          "title": null,
          "onClickCallback": null,
          "onEachCallback": null,
          "withSeparator": null
        },
        "defaultValue": "{\"id\":null,\"title\":null,\"onClickCallback\":null,\"onEachCallback\":null,\"withSeparator\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "addMultiMenuOnSettingsMenu",
    "memberof": "packages/francy/src/render/menu-main.js~MainMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy/src/render/menu-main.js~MainMenu#addMultiMenuOnSettingsMenu",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"menuId\": *, \"menuTitle\": *, \"entryId\": *, \"entryTitle\": *, \"entryOnClickCallback\": *, \"entryOnEachCallback\": *}"
        ],
        "defaultRaw": {
          "menuId": null,
          "menuTitle": null,
          "entryId": null,
          "entryTitle": null,
          "entryOnClickCallback": null,
          "entryOnEachCallback": null
        },
        "defaultValue": "{\"menuId\":null,\"menuTitle\":null,\"entryId\":null,\"entryTitle\":null,\"entryOnClickCallback\":null,\"entryOnEachCallback\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "_addEntryOnFrancyMenu",
    "memberof": "packages/francy/src/render/menu-main.js~MainMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy/src/render/menu-main.js~MainMenu#_addEntryOnFrancyMenu",
    "access": "private",
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"id\": *, \"title\": *, \"onClickCallback\": *, \"onEachCallback\": *, \"withSeparator\": *}"
        ],
        "defaultRaw": {
          "id": null,
          "title": null,
          "onClickCallback": null,
          "onEachCallback": null,
          "withSeparator": null
        },
        "defaultValue": "{\"id\":null,\"title\":null,\"onClickCallback\":null,\"onEachCallback\":null,\"withSeparator\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "addEntryOnMenu",
    "memberof": "packages/francy/src/render/menu-main.js~MainMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy/src/render/menu-main.js~MainMenu#addEntryOnMenu",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"id\": *, \"title\": *, \"onClickCallback\": *, \"onEachCallback\": *}"
        ],
        "defaultRaw": {
          "id": null,
          "title": null,
          "onClickCallback": null,
          "onEachCallback": null
        },
        "defaultValue": "{\"id\":null,\"title\":null,\"onClickCallback\":null,\"onEachCallback\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "removeMenuEntry",
    "memberof": "packages/francy/src/render/menu-main.js~MainMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy/src/render/menu-main.js~MainMenu#removeMenuEntry",
    "access": "public",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "packages/francy/src/render/message.js",
    "content": "import { Decorators, Renderer } from 'francy-core';\n\n/* global d3 */\n\n/**\n * The {Message} holds the messages for the current Graphics.\n *\n * @access private\n */\nexport default class Message extends Renderer {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  @Decorators.Data.requires('canvas.messages')\n  async render() {\n\n    let messages = Object.keys(this.data.canvas.messages).map((key) => {\n      return {\n        id: key,\n        type: this.data.canvas.messages[key].type,\n        title: this.data.canvas.messages[key].title,\n        text: this.data.canvas.messages[key].text\n      };\n    });\n\n    let alertsId = `Messages-${this.data.canvas.id}`;\n    this.element = d3.select(`#${alertsId}`);\n    // check if the div is already present\n    if (!this.element.node()) {\n      this.element = this.parent.append('div').attr('class', 'francy-message-holder').attr('id', alertsId);\n    }\n\n    let message = this.element.selectAll('div.francy-alert').data(messages, d => d.id);\n    let messageEnter = message.enter().append('div').attr('id', d => d.id)\n      .attr('class', d => `francy-alert alert-${d.type}`).on('click', function() {\n        d3.select(this).style('display', 'none');\n      });\n    messageEnter.append('span').attr('class', 'strong').text(d => d.title);\n    messageEnter.append('span').text(d => d.text);\n    messageEnter.append('span').attr('class', 'strong closeme').style('display', 'none').text('x');\n\n    messageEnter.merge(message);\n\n    message.exit().remove();\n\n    this.element.style('display', 'block');\n    \n    // render mathjax\n    this.handlePromise(this.mathjax.settings({appendTo: this, renderType: 'HTML-CSS'}).render());\n\n    return this;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy/src/render/message.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "Message",
    "memberof": "packages/francy/src/render/message.js",
    "static": true,
    "longname": "packages/francy/src/render/message.js~Message",
    "access": "private",
    "export": true,
    "importPath": "francy-js/packages/francy/src/render/message.js",
    "importStyle": "Message",
    "description": "The {Message} holds the messages for the current Graphics.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "francy-core~Renderer"
    ]
  },
  {
    "__docId__": 84,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy/src/render/message.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy/src/render/message.js~Message#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy/src/render/message.js~Message",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy/src/render/message.js~Message#render",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('canvas.messages')"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy/src/render/message.js~Message",
    "static": false,
    "longname": "packages/francy/src/render/message.js~Message#element",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "packages/francy-core/index.js",
    "content": "export { Decorators } from './src/decorator/factory';\nexport { Components } from './src/component/factory';\nexport { Logger } from './src/util/logger';\nexport { Utilities } from './src/util/utilities';\nexport { MIME } from './src/util/json';\n\nexport { default as ConfigurationHandler, DefaultConfiguration, GlobalConfiguration, BACKEND } from './src/util/configuration';\nexport { default as RenderingManagerHandler, RENDERING_EVENTS } from './src/render/rendering-manager';\nexport { default as DataHandler } from './src/util/data-handler';\nexport { default as Observable } from './src/util/observable';\nexport { default as Callback } from './src/render/callback';\nexport { default as BaseRenderer } from './src/render/base';\nexport { default as CompositeRenderer } from './src/render/composite';\nexport { default as Renderer } from './src/render/renderer';\nexport { default as RenderingConfiguration } from './src/render/rendering-configuration';\nexport { default as Graph } from './src/render/graph/base';\nexport { default as GraphOperations } from './src/render/graph/operations';\nexport { default as Menu } from './src/render/menu/base';\nexport { default as Modal } from './src/render/modal/base';\nexport { default as AboutModal } from './src/render/modal/about';\nexport { default as RequiredArgsModal } from './src/render/modal/required';\nexport { default as ConfirmModal } from './src/render/modal/confirm';\nexport { default as Tooltip } from './src/render/tooltip';\nexport { default as ContextMenu } from './src/render/menu/context';\nexport { default as seedrandom } from 'seedrandom';\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "packages/francy-core/src/component/base.js",
    "content": "import { Decorators } from '../decorator/factory';\nimport { Logger} from '../util/logger';\n\n/**\n * Base is the base of renderers and contains multiple utility methods.\n * This is an abstract class, and all subclasses must implement a {Component.initialize} method.\n * {Component.initialize} is a simple method that must implement a check on whether the dependency is available or not. \n * Must throwan {Error} if dependency is not available.\n * \n * A {Component} is a dependency of {Francy} that can be optional or not.\n * Optional {Components} are dependencies that enhance the whole framework experience, \n * e.g. {MathJaxComponent} which provides rich tex.\n * Mandatory {Components} are components required by the framework and they have to be present, e.g. d3.\n * @abstract\n */\nexport default class BaseComponent {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} Options\n   * @property {Boolean} verbose prints extra log information to console.log, default false\n   * @property {Boolean} mandatory whether the component is mandatory or optional\n   */\n  constructor(mandatory = false, delay = false, retries = 1) {\n    if (this.initialize === undefined || typeof this.initialize !== 'function') {\n      throw new TypeError('Must override [initialize()] method!');\n    }\n    /**\n     * Stores whether this component is available or not\n     * @type {boolean]\n     */\n    this.available = false;\n    /**\n     * Stores whether this component initialization is delayed\n     * @type {boolean]\n     */\n    this.delay = delay;\n    /**\n     * Stores the options for this component\n     * @typedef {object} options\n     * @property {boolean} options.mandatory whether the component is mandatory or optional\n     */\n    this.options = {};\n    this.settings({ mandatory: mandatory });\n    this._safeInitializeDecorator = Decorators.Error.wrap(this._initialize).withRetries(retries)\n      .withLogRetries(true).withContext(this).withStackTrace(false)\n      .onErrorThrow(mandatory).onErrorExec(this._onError);\n    // run initialization\n    if (!this.delay) this._safeInitializeDecorator.handle();\n    //if (this.delay) {\n    //  setTimeout(() => {\n    //    this._safeInitializeDecorator.handle();\n    //    // give it another chance later...\n    //    if (!this.available) {\n    //      this.executed = false;\n    //    }\n    //  }, 0);\n    //} else { \n    //  this._safeInitializeDecorator.handle(); \n    //}\n  }\n\n  /**\n   * Saves the settings in an internal options object.\n   * \n   * @param {object} options\n   * @property {boolean} options.mandatory whether the component is mandatory or optional\n   * @returns {object} this instance\n   * @public\n   */\n  settings({ mandatory }) {\n    this.options.mandatory = mandatory || this.options.mandatory;\n    return this;\n  }\n  \n  /**\n   * Returns true if the component is available, otherwise false\n   * @type {boolean}\n   * @public\n   */\n  get isAvailable(){\n    return this.available;\n  }\n  \n  tryInitialize() {\n    if (!this.isAvailable) this._safeInitializeDecorator.handle();\n  }\n\n  /**\n   * This is a helper method to handle component initialization.\n   * @private\n   */\n  _initialize() {\n    this.initialize();\n    this.available = true;\n  }\n  \n  /**\n   * This is a helper method to handle error states\n   * @private\n   */\n  _onError() {\n    if (this.options.mandatory) {\n      Logger.error(`The component [${this.constructor.name}] is mandatory and could not be initialized... cannot proceed!`);\n    } else {\n      Logger.info(`The component [${this.constructor.name}] could not be initialized... continuing...`);\n    }\n    this.available = false;\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/component/base.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "class",
    "name": "BaseComponent",
    "memberof": "packages/francy-core/src/component/base.js",
    "static": true,
    "longname": "packages/francy-core/src/component/base.js~BaseComponent",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/component/base.js",
    "importStyle": "BaseComponent",
    "description": "Base is the base of renderers and contains multiple utility methods.\nThis is an abstract class, and all subclasses must implement a {Component.initialize} method.\n{Component.initialize} is a simple method that must implement a check on whether the dependency is available or not. \nMust throwan {Error} if dependency is not available.\n\nA {Component} is a dependency of {Francy} that can be optional or not.\nOptional {Components} are dependencies that enhance the whole framework experience, \ne.g. {MathJaxComponent} which provides rich tex.\nMandatory {Components} are components required by the framework and they have to be present, e.g. d3.",
    "lineNumber": 16,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 91,
    "kind": "typedef",
    "name": "Options",
    "memberof": "packages/francy-core/src/component/base.js~BaseComponent",
    "static": false,
    "longname": "packages/francy-core/src/component/base.js~BaseComponent#Options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 25,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "verbose",
        "description": "prints extra log information to console.log, default false"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "mandatory",
        "description": "whether the component is mandatory or optional"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Options"
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "available",
    "memberof": "packages/francy-core/src/component/base.js~BaseComponent",
    "static": false,
    "longname": "packages/francy-core/src/component/base.js~BaseComponent#available",
    "access": "public",
    "description": "Stores whether this component is available or not",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "delay",
    "memberof": "packages/francy-core/src/component/base.js~BaseComponent",
    "static": false,
    "longname": "packages/francy-core/src/component/base.js~BaseComponent#delay",
    "access": "public",
    "description": "Stores whether this component initialization is delayed",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/component/base.js~BaseComponent",
    "static": true,
    "longname": "packages/francy-core/src/component/base.js~BaseComponent.options",
    "access": "public",
    "description": "Stores the options for this component",
    "lineNumber": 44,
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.mandatory",
        "description": "whether the component is mandatory or optional"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "_safeInitializeDecorator",
    "memberof": "packages/francy-core/src/component/base.js~BaseComponent",
    "static": false,
    "longname": "packages/francy-core/src/component/base.js~BaseComponent#_safeInitializeDecorator",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "settings",
    "memberof": "packages/francy-core/src/component/base.js~BaseComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/component/base.js~BaseComponent#settings",
    "access": "public",
    "description": "Saves the settings in an internal options object.",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} this instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.mandatory",
        "description": "whether the component is mandatory or optional"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "this instance"
    }
  },
  {
    "__docId__": 97,
    "kind": "get",
    "name": "isAvailable",
    "memberof": "packages/francy-core/src/component/base.js~BaseComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/component/base.js~BaseComponent#isAvailable",
    "access": "public",
    "description": "Returns true if the component is available, otherwise false",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "tryInitialize",
    "memberof": "packages/francy-core/src/component/base.js~BaseComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/component/base.js~BaseComponent#tryInitialize",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "_initialize",
    "memberof": "packages/francy-core/src/component/base.js~BaseComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/component/base.js~BaseComponent#_initialize",
    "access": "private",
    "description": "This is a helper method to handle component initialization.",
    "lineNumber": 94,
    "params": [],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "_onError",
    "memberof": "packages/francy-core/src/component/base.js~BaseComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/component/base.js~BaseComponent#_onError",
    "access": "private",
    "description": "This is a helper method to handle error states",
    "lineNumber": 103,
    "params": [],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "packages/francy-core/src/component/d3.js",
    "content": "import BaseComponent from './base';\nimport { Logger} from '../util/logger';\n\n/**\n * This {Component} class is used to check whether d3 is available or not.\n * d3 is mandatory, as it used d3 to implement the basic graphics for {Francy}.\n * \n * @extends {BaseComponent}\n */\nexport default class D3Component extends BaseComponent {\n  \n  /**\n   * Base constructor\n   * \n   * @typedef {Object} Options\n   * @property {Boolean} verbose prints extra log information to console.log, default false\n   * @property {Boolean} mandatory whether the component is mandatory or optional\n   */\n  constructor(mandatory, delay, retries) {\n    super(mandatory, delay, retries);\n  }\n  \n  /**\n   * Handles d3 initialization and checks whether the dependency is available or not.\n   * @public\n   */\n  initialize() {\n    var global = (0, eval)('this');\n    if (!('d3' in global)) {\n      throw new Error('D3 is not imported and Francy won\\'t work without it... please import D3 v5+ library.');\n    }\n    Logger.debug('D3 is available...');\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/component/d3.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "class",
    "name": "D3Component",
    "memberof": "packages/francy-core/src/component/d3.js",
    "static": true,
    "longname": "packages/francy-core/src/component/d3.js~D3Component",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/component/d3.js",
    "importStyle": "D3Component",
    "description": "This {Component} class is used to check whether d3 is available or not.\nd3 is mandatory, as it used d3 to implement the basic graphics for {Francy}.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "BaseComponent"
    ]
  },
  {
    "__docId__": 105,
    "kind": "typedef",
    "name": "Options",
    "memberof": "packages/francy-core/src/component/d3.js~D3Component",
    "static": false,
    "longname": "packages/francy-core/src/component/d3.js~D3Component#Options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 19,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "verbose",
        "description": "prints extra log information to console.log, default false"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "mandatory",
        "description": "whether the component is mandatory or optional"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Options"
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "initialize",
    "memberof": "packages/francy-core/src/component/d3.js~D3Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/component/d3.js~D3Component#initialize",
    "access": "public",
    "description": "Handles d3 initialization and checks whether the dependency is available or not.",
    "lineNumber": 27,
    "params": [],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "packages/francy-core/src/component/factory.js",
    "content": "import D3Component from './d3';\nimport JupyterComponent from './jupyter';\nimport MathJaxComponent from './mathjax';\n\n/**\n * {Components} is a singleton and runs before everything else starting each component\n * \n * @example Components.D3.isAvailable\n * @example Components.Jupyter.isAvailable\n * @example Components.MathJax.isAvailable\n * @typedef {Object} Components\n * @property {D3Component} D3 {Component} instance\n * @property {JupyterComponent} Jupyter {Component} instance\n * @property {MathJaxComponent} MathJax {Component} instance\n * @public\n */\nexport const Components = {\n  D3: new D3Component(false, false, 3),\n  Jupyter: new JupyterComponent(false, false, 1),\n  MathJax: new MathJaxComponent(false, false, 5)\n};\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/component/factory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "typedef",
    "name": "Components",
    "memberof": "packages/francy-core/src/component/factory.js",
    "static": true,
    "longname": "packages/francy-core/src/component/factory.js~Components",
    "access": "public",
    "description": "{Components} is a singleton and runs before everything else starting each component",
    "examples": [
      "Components.D3.isAvailable",
      "Components.Jupyter.isAvailable",
      "Components.MathJax.isAvailable"
    ],
    "lineNumber": 17,
    "properties": [
      {
        "nullable": null,
        "types": [
          "D3Component"
        ],
        "spread": false,
        "optional": false,
        "name": "D3",
        "description": "{Component} instance"
      },
      {
        "nullable": null,
        "types": [
          "JupyterComponent"
        ],
        "spread": false,
        "optional": false,
        "name": "Jupyter",
        "description": "{Component} instance"
      },
      {
        "nullable": null,
        "types": [
          "MathJaxComponent"
        ],
        "spread": false,
        "optional": false,
        "name": "MathJax",
        "description": "{Component} instance"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Components"
    }
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "packages/francy-core/src/component/jupyter.js",
    "content": "import BaseComponent from './base';\nimport { Logger } from '../util/logger';\n\n/**\n * This {Component} class is used to check whether jupyter is available or not.\n * Jupyter is optional, as {Francy} can run without it.\n * \n * @extends {BaseComponent}\n */\nexport default class JupyterComponent extends BaseComponent {\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} Options\n   * @property {Boolean} verbose prints extra log information to console.log, default false\n   * @property {Boolean} mandatory whether the component is mandatory or optional\n   */\n  constructor(mandatory, delay, retries) {\n    super(mandatory, delay, retries);\n  }\n  \n  /**\n   * Handles Jupyter initialization and checks whether the dependency is available or not.\n   * @public\n   */\n  initialize() {\n    var global = (0, eval)('this');\n    if (!('Jupyter' in global)) {\n      throw new Error('We\\'re not running on Jupyter...');\n    }\n    Logger.debug('Jupyter is available...');\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/component/jupyter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "class",
    "name": "JupyterComponent",
    "memberof": "packages/francy-core/src/component/jupyter.js",
    "static": true,
    "longname": "packages/francy-core/src/component/jupyter.js~JupyterComponent",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/component/jupyter.js",
    "importStyle": "JupyterComponent",
    "description": "This {Component} class is used to check whether jupyter is available or not.\nJupyter is optional, as {Francy} can run without it.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "BaseComponent"
    ]
  },
  {
    "__docId__": 111,
    "kind": "typedef",
    "name": "Options",
    "memberof": "packages/francy-core/src/component/jupyter.js~JupyterComponent",
    "static": false,
    "longname": "packages/francy-core/src/component/jupyter.js~JupyterComponent#Options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 18,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "verbose",
        "description": "prints extra log information to console.log, default false"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "mandatory",
        "description": "whether the component is mandatory or optional"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Options"
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "initialize",
    "memberof": "packages/francy-core/src/component/jupyter.js~JupyterComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/component/jupyter.js~JupyterComponent#initialize",
    "access": "public",
    "description": "Handles Jupyter initialization and checks whether the dependency is available or not.",
    "lineNumber": 26,
    "params": [],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "packages/francy-core/src/component/mathjax.js",
    "content": "import BaseComponent from './base';\nimport { Decorators } from '../decorator/factory';\nimport { Logger} from '../util/logger';\n\n/* global MathJax d3 */\n\n/**\n * This {Component} class is used to check whether MathJax is available or not.\n * MathJax is optional, as {Francy} can run without it.\n * \n * @extends {BaseComponent}\n */\nexport default class MathJaxComponent extends BaseComponent {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} Options\n   * @property {Boolean} verbose prints extra log information to console.log, default false\n   * @property {Boolean} mandatory whether the component is mandatory or optional\n   */\n  constructor(mandatory, delay, retries) {\n    super(mandatory, delay, retries);\n  }\n\n  /**\n   * Handles MathJax initialization and checks whether the dependency is available or not.\n   * @public\n   */\n  initialize() {\n    var global = (0, eval)('this');\n    if (!('MathJax' in global)) {\n      throw new Error('MathJax is not available...');\n    }\n    \n    Logger.debug('MathJax is available...');\n    \n    MathJax.Hub.Config({\n      showMathMenu: false,\n      skipStartupTypeset: true,\n      tex2jax: {\n        inlineMath: [ ['$','$'], ['\\\\(','\\\\)'] ],\n        displayMath: [ ['$$','$$'], ['\\\\[','\\\\]'] ],\n        processEscapes: true,\n        processEnvironments: true\n      },\n      MathML: {\n        extensions: ['content-mathml.js']\n      },\n      displayAlign: 'center',\n      'HTML-CSS': {\n        availableFonts: [],\n        imageFont: null,\n        preferredFont: null,\n        font: 'STIX-Web', \n        webFont: 'STIX-Web',\n        styles: {'.MathJax_Display': {'margin': 0}},\n        linebreaks: { \n          automatic: true \n        }\n      },\n      'SVG': {\n        availableFonts: [],\n        imageFont: null,\n        preferredFont: null,\n        font: 'STIX-Web', \n        webFont: 'STIX-Web',\n        styles: {'.MathJax_Display': {'margin': 0}},\n        linebreaks: { \n          automatic: true \n        }\n      }\n    });\n\n    let safeOnNewMathElement = Decorators.Error.wrap(onNewMathElement).withStackTrace(false).withContext(this).onErrorThrow(false);\n    MathJax.Hub.Register.MessageHook('New Math', id => safeOnNewMathElement.handle(id));\n\n    function onNewMathElement(id) {\n      if (id && id.length > 1) {\n        let mathJaxElement = d3.select(`#${id[1]}-Frame`);\n        if (!mathJaxElement.node()) return; // the element might have disapeared\n        let svgMathJaxElement = mathJaxElement.select('svg');\n        if (svgMathJaxElement.node()) {\n          if (!mathJaxElement.node().parentNode) return; // the element might have disapeared\n          let g = d3.select(mathJaxElement.node().parentNode.parentNode);\n          // set same font-size\n          svgMathJaxElement.style('font-size', g.select('text.francy-label').style('font-size'));\n          // re-center component\n          let width = svgMathJaxElement.node().width.baseVal.value;\n          let height = svgMathJaxElement.node().height.baseVal.value;\n          svgMathJaxElement.attr('x', -width / 2);\n          svgMathJaxElement.attr('y', -height / 2);\n          g.select('text.francy-label').remove();\n          g.append(() => svgMathJaxElement.node());\n        }\n      }\n    }\n\n    MathJax.Hub.Configured();\n  }\n}",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/component/mathjax.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "class",
    "name": "MathJaxComponent",
    "memberof": "packages/francy-core/src/component/mathjax.js",
    "static": true,
    "longname": "packages/francy-core/src/component/mathjax.js~MathJaxComponent",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/component/mathjax.js",
    "importStyle": "MathJaxComponent",
    "description": "This {Component} class is used to check whether MathJax is available or not.\nMathJax is optional, as {Francy} can run without it.",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "BaseComponent"
    ]
  },
  {
    "__docId__": 115,
    "kind": "typedef",
    "name": "Options",
    "memberof": "packages/francy-core/src/component/mathjax.js~MathJaxComponent",
    "static": false,
    "longname": "packages/francy-core/src/component/mathjax.js~MathJaxComponent#Options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 22,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "verbose",
        "description": "prints extra log information to console.log, default false"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "mandatory",
        "description": "whether the component is mandatory or optional"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Options"
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "initialize",
    "memberof": "packages/francy-core/src/component/mathjax.js~MathJaxComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/component/mathjax.js~MathJaxComponent#initialize",
    "access": "public",
    "description": "Handles MathJax initialization and checks whether the dependency is available or not.",
    "lineNumber": 30,
    "params": [],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "packages/francy-core/src/decorator/data.js",
    "content": "import {Exception} from '../util/exception';\n\n/**\n * This {Decorator} class is used to check whether a property is present in the data before executing a method.\n */\nexport default class DataDecorator {\n\n  /**\n   * This function can be used as a decorator to intercept a method and, based on {this.data},\n   * whether to execute it or not.\n   * \n   * @example @Decorators.Data.requires('canvas.graph')\n   * @param {string} properties - the properties separateed by a dot, e.g. 'data.property'\n   * @public\n   */\n  static requires(properties) {\n    return function decorator(target, name, descriptor) {\n      var oldValue = descriptor.value;\n\n      descriptor.value = function () {\n        if (!DataDecorator._hasData(DataDecorator._getProperty(this.data, properties))) {\n          return Promise.reject(new Exception(`No data here [${properties}], nothing to render... continuing...`));\n        }\n        return oldValue.apply(this, arguments);\n      };\n\n      return descriptor;\n    };\n  }\n\n  /**\n   * This function can be used as a decorator to intercept a method and, based on {this.data},\n   * execute it if the property is set to true otherwise rejects the promise.\n   * \n   * @example @Decorators.Data.enabled('canvas.texTypesetting')\n   * @param {string} properties - the properties separateed by a dot, e.g. 'data.property'\n   * @public\n   */\n  static enabled(properties) {\n    return function decorator(target, name, descriptor) {\n      var oldValue = descriptor.value;\n\n      descriptor.value = function () {\n        if (!DataDecorator._getProperty(this.data, properties)) {\n          return Promise.reject(new Exception(`Property disabled [${properties}], skip execution... continuing...`));\n        }\n        return oldValue.apply(this, arguments);\n      };\n\n      return descriptor;\n    };\n  }\n\n  /**\n   * Helper method to iterate over an object\n   * @param {Object} obj - the object to search the property for\n   * @param {string} propertyPath - property separated by dot\n   * @private\n   */\n  static _getProperty(obj, propertyPath) {\n\n    var tmp = obj;\n\n    if (tmp && propertyPath) {\n      var properties = propertyPath.split('.');\n\n      for (var property of properties) {\n        if (!tmp.hasOwnProperty(property)) {\n          tmp = undefined;\n          break;\n        } else {\n          tmp = tmp[property];\n        }\n      }\n    }\n\n    return tmp;\n  }\n\n  /**\n   * Helper method to check whether a property has data\n   * @param {Object} obj - the object to check\n   * @private\n   */\n  static _hasData(obj) {\n    return obj && ((obj instanceof Array && obj.length) || (obj instanceof Object && Object.values(obj).length));\n  }\n}",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/decorator/data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "class",
    "name": "DataDecorator",
    "memberof": "packages/francy-core/src/decorator/data.js",
    "static": true,
    "longname": "packages/francy-core/src/decorator/data.js~DataDecorator",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/decorator/data.js",
    "importStyle": "DataDecorator",
    "description": "This {Decorator} class is used to check whether a property is present in the data before executing a method.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "requires",
    "memberof": "packages/francy-core/src/decorator/data.js~DataDecorator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/decorator/data.js~DataDecorator.requires",
    "access": "public",
    "description": "This function can be used as a decorator to intercept a method and, based on {this.data},\nwhether to execute it or not.",
    "examples": [
      ""
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@Decorators.Data.requires('canvas.graph')\n",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "the properties separateed by a dot, e.g. 'data.property'"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "enabled",
    "memberof": "packages/francy-core/src/decorator/data.js~DataDecorator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/decorator/data.js~DataDecorator.enabled",
    "access": "public",
    "description": "This function can be used as a decorator to intercept a method and, based on {this.data},\nexecute it if the property is set to true otherwise rejects the promise.",
    "examples": [
      ""
    ],
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@Decorators.Data.enabled('canvas.texTypesetting')\n",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "the properties separateed by a dot, e.g. 'data.property'"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "_getProperty",
    "memberof": "packages/francy-core/src/decorator/data.js~DataDecorator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/decorator/data.js~DataDecorator._getProperty",
    "access": "private",
    "description": "Helper method to iterate over an object",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "the object to search the property for"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "propertyPath",
        "description": "property separated by dot"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "_hasData",
    "memberof": "packages/francy-core/src/decorator/data.js~DataDecorator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/decorator/data.js~DataDecorator._hasData",
    "access": "private",
    "description": "Helper method to check whether a property has data",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "the object to check"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "packages/francy-core/src/decorator/error.js",
    "content": "import { Logger } from '../util/logger';\nimport { Utilities } from '../util/utilities';\n\n/**\n * This {Decorator} class is used to safelly execute methods within a specified context.\n */\nexport default class ErrorDecorator {\n  \n  /**\n   * Default constructor\n   * @example Decorators.Error.wrap(function(){}).withContext(this).onErrorThrow(false).onErrorExec(function(){}).handle()\n   */\n  constructor() {\n    /**\n     * Stores the on error callbacks\n     * @type {function[]}\n     */\n    this.onErrorFns = [];\n    /**\n     * Stores the context of execution\n     * @type {Object}\n     */\n    this.context = undefined;\n    /**\n     * Stores the function to execute\n     * @type {function}\n     */\n    this.function = undefined;\n    /**\n     * Stores the flag for re-throw or not\n     * @type {boolean}\n     */\n    this.throw = false;\n    /**\n     * Stores the flag for print stack trace to logs or not\n     * @type {boolean}\n     */\n    this.printStackTrace = true;\n    /**\n     * Stores the flag for print stack trace to logs or not\n     * @type {boolean}\n     */\n    this.logRetries = false;\n    /**\n     * Stores the number of retries for successful execution\n     * @type {number}\n     */\n    this.retries = 1;\n    /**\n     * Stores the flag that shows if this decorator has beens executed before\n     * @type {boolean}\n     */\n    this.executed = false;\n  }\n  \n  /**\n   * This method stores the function to be executed safelly.\n   * \n   * @public\n   * @param {function} fn - a function to wrap\n   * @return {this} instance\n   */\n  wrap(fn) {\n    if (!Utilities.isFunction(fn)) throw Error(`[${fn}] is not a function!`);\n    this.function = fn;\n    return this;\n  }\n\n  /**\n   * This method stores the context where the wrapped function will run.\n   * \n   * @public\n   * @param {Object} ctx - the context where this function will run\n   * @return {this} instance\n   */\n  withContext(ctx) {\n    this.context = ctx;\n    return this;\n  }\n  \n  /**\n   * This method stores a flag to indicate whether the error should be printed to log.\n   * \n   * @public\n   * @param {boolean} bool - true if the error must be logged, otherwise false. \n   * Defaults to true.\n   * @return {this} instance\n   */\n  withStackTrace(bool) {\n    if(Utilities.isBoolean(bool)){\n      this.printStackTrace = bool;\n    }\n    return this;\n  }\n  \n  /**\n   * This method stores a flag to indicate whether the error should be printed to log.\n   * \n   * @public\n   * @param {boolean} bool - true if the error must be logged, otherwise false. \n   * Defaults to true.\n   * @return {this} instance\n   */\n  withLogRetries(bool) {\n    if(Utilities.isBoolean(bool)){\n      this.logRetries = bool;\n    }\n    return this;\n  }\n  \n  /**\n   * This method stores the number of retries to execute the function.\n   * \n   * @public\n   * @param {integer} bool - true if the error must be logged, otherwise false. \n   * Defaults to true.\n   * @return {this} instance\n   */\n  withRetries(n) {\n    if(!isNaN(n)){\n      this.retries = Math.floor(n);\n    }\n    return this;\n  }\n\n  /**\n   * This method stores the function to execute in case an error occurs running \n   * the wrapped function.\n   * \n   * @public\n   * @param {function} fn - a function to execute if an error occurs\n   * @return {this} instance\n   */\n  onErrorExec(fn) {\n    if (Utilities.isFunction(fn)) {\n      this.onErrorFns.push(fn);\n    }\n    return this;\n  }\n\n  /**\n   * This method stores whether we should propagte the error if the function \n   * fails to execute, or if the error must be handled safelly.\n   * \n   * @public\n   * @param {boolean} bool - true if the error must be propagated, otherwise false. \n   * Defaults to false.\n   * @return {this} instance\n   */\n  onErrorThrow(bool) {\n    if(Utilities.isBoolean(bool)){\n      this.throw = bool;\n    }\n    return this;\n  }\n\n  /**\n   * This method will execute the wrapped function.\n   * \n   * @public\n   */\n  handle() {\n    this.executed = true;\n\n    const pause = (duration) => new Promise(r => setTimeout(r, duration));\n\n    const backoff = (retries, fn, delay = 500) => {\n      if (this.logRetries) {\n        Logger.debug(`Call [${(this.retries - retries + 1) + '/' + this.retries}] to function [${this.context.constructor.name + '.' + this.function.name}]`);\n      }\n      return fn.apply(this, arguments).catch(err => {\n        return retries > 1\n          ? pause(delay).then(() => backoff(retries - 1, fn, delay * 2)) \n          : Promise.reject(err);\n      });\n    };\n\n    return backoff(this.retries, this._handle).catch(e => {\n      this._logEntry(e);\n      this._runOnError();\n      if (this.throw) throw e;\n    }).then(result => result);\n  }\n\n  /**\n   * This method will execute the wrapped function.\n   * \n   * @private\n   */\n  _handle() {\n    try {\n      let result = this.function.apply(this.context, arguments);\n      return Utilities.isaPromise(result) ? result : Promise.resolve(result);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Helper method to handle error conditions\n   * @private\n   */\n  _runOnError() {\n    this.onErrorFns.forEach(fn => {\n      try {\n        fn.call(this.context);\n      } catch(error) {\n        this._logEntry(error);\n        if (this.throw) {\n          throw error;\n        }\n      }\n    });\n  }\n\n  /**\n   * Helper method to log\n   * @private\n   */\n  _logEntry(e) {\n    if (this.printStackTrace) {\n      Logger.info('Oops, we can\\'t do anything about this...', e);\n    } else {\n      Logger.info(`Oops, we can't do anything about this... [${e}]`);\n    }\n  }\n\n}",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/decorator/error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "class",
    "name": "ErrorDecorator",
    "memberof": "packages/francy-core/src/decorator/error.js",
    "static": true,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/decorator/error.js",
    "importStyle": "ErrorDecorator",
    "description": "This {Decorator} class is used to safelly execute methods within a specified context.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 125,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#constructor",
    "access": "public",
    "description": "Default constructor",
    "examples": [
      "Decorators.Error.wrap(function(){}).withContext(this).onErrorThrow(false).onErrorExec(function(){}).handle()"
    ],
    "lineNumber": 13
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "onErrorFns",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#onErrorFns",
    "access": "public",
    "description": "Stores the on error callbacks",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "function[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "context",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#context",
    "access": "public",
    "description": "Stores the context of execution",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "function",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#function",
    "access": "public",
    "description": "Stores the function to execute",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "throw",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#throw",
    "access": "public",
    "description": "Stores the flag for re-throw or not",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "printStackTrace",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#printStackTrace",
    "access": "public",
    "description": "Stores the flag for print stack trace to logs or not",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "logRetries",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#logRetries",
    "access": "public",
    "description": "Stores the flag for print stack trace to logs or not",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "retries",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#retries",
    "access": "public",
    "description": "Stores the number of retries for successful execution",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "executed",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#executed",
    "access": "public",
    "description": "Stores the flag that shows if this decorator has beens executed before",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "wrap",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#wrap",
    "access": "public",
    "description": "This method stores the function to be executed safelly.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "a function to wrap"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "instance"
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "withContext",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#withContext",
    "access": "public",
    "description": "This method stores the context where the wrapped function will run.",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "the context where this function will run"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "instance"
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "withStackTrace",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#withStackTrace",
    "access": "public",
    "description": "This method stores a flag to indicate whether the error should be printed to log.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bool",
        "description": "true if the error must be logged, otherwise false. \nDefaults to true."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "instance"
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "withLogRetries",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#withLogRetries",
    "access": "public",
    "description": "This method stores a flag to indicate whether the error should be printed to log.",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bool",
        "description": "true if the error must be logged, otherwise false. \nDefaults to true."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "instance"
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "withRetries",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#withRetries",
    "access": "public",
    "description": "This method stores the number of retries to execute the function.",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "bool",
        "description": "true if the error must be logged, otherwise false. \nDefaults to true."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "instance"
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "onErrorExec",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#onErrorExec",
    "access": "public",
    "description": "This method stores the function to execute in case an error occurs running \nthe wrapped function.",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "a function to execute if an error occurs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "instance"
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "onErrorThrow",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#onErrorThrow",
    "access": "public",
    "description": "This method stores whether we should propagte the error if the function \nfails to execute, or if the error must be handled safelly.",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bool",
        "description": "true if the error must be propagated, otherwise false. \nDefaults to false."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "instance"
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "handle",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#handle",
    "access": "public",
    "description": "This method will execute the wrapped function.",
    "lineNumber": 162,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "_handle",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#_handle",
    "access": "private",
    "description": "This method will execute the wrapped function.",
    "lineNumber": 190,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "_runOnError",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#_runOnError",
    "access": "private",
    "description": "Helper method to handle error conditions",
    "lineNumber": 203,
    "params": [],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "_logEntry",
    "memberof": "packages/francy-core/src/decorator/error.js~ErrorDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/error.js~ErrorDecorator#_logEntry",
    "access": "private",
    "description": "Helper method to log",
    "lineNumber": 220,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "packages/francy-core/src/decorator/factory.js",
    "content": "import DataDecorator from './data';\nimport ErrorDecorator from './error';\nimport HighlightDecorator from './highlight';\nimport InitializerDecorator from './initialize';\nimport JupyterDecorator from './jupyter';\nimport LoaderDecorator from './loader';\n\n/**\n * {Decorators} is a singleton and runs before everything else\n * \n * @example \\@Decorators.Data.requires('canvas.graph')\n * @example Decorators.Loader.withContext(this).show(); Decorators.Loader.withContext(this).hide();\n * @example Decorators.Jupyter.registerKeyboardEvents(['.francy', '.francy-arg', '.francy-overlay', '.francy-modal']);\n * @example Decorators.Highlight.syntax(JSON.stringify(this.data.canvas, null, 2));\n * @example \\@Decorators.Initializer.initialize();\n * @example Decorators.Error.wrap(function(){}).withContext(this).onErrorThrow(false).onErrorExec(function(){}).handle()\n * \n * @typedef {Object} Decorators\n * @property {DataDecorator} Data {Decorator} instance\n * @property {LoaderDecorator} Loader {Decorator} instance\n * @property {InitializerDecorator} Initializer {Decorator} instance\n * @property {ErrorDecorator} Error {Decorator} instance\n * @property {HighlightDecorator} Highlight {Decorator} instance\n * @property {JupyterDecorator} Jupyter {Decorator} instance\n * @public\n */\nexport const Decorators = {\n\n  get Loader() {\n    return new LoaderDecorator();\n  },\n  \n  get Error() {\n    return new ErrorDecorator();\n  },\n  \n  Data: DataDecorator,\n  \n  Initializer: InitializerDecorator,\n  \n  Highlight: HighlightDecorator,\n  \n  Jupyter: JupyterDecorator\n  \n};\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/decorator/factory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "typedef",
    "name": "Decorators",
    "memberof": "packages/francy-core/src/decorator/factory.js",
    "static": true,
    "longname": "packages/francy-core/src/decorator/factory.js~Decorators",
    "access": "public",
    "description": "{Decorators} is a singleton and runs before everything else",
    "examples": [
      "\\@Decorators.Data.requires('canvas.graph')",
      "Decorators.Loader.withContext(this).show(); Decorators.Loader.withContext(this).hide();",
      "Decorators.Jupyter.registerKeyboardEvents(['.francy', '.francy-arg', '.francy-overlay', '.francy-modal']);",
      "Decorators.Highlight.syntax(JSON.stringify(this.data.canvas, null, 2));",
      "\\@Decorators.Initializer.initialize();",
      "Decorators.Error.wrap(function(){}).withContext(this).onErrorThrow(false).onErrorExec(function(){}).handle()"
    ],
    "lineNumber": 27,
    "properties": [
      {
        "nullable": null,
        "types": [
          "DataDecorator"
        ],
        "spread": false,
        "optional": false,
        "name": "Data",
        "description": "{Decorator} instance"
      },
      {
        "nullable": null,
        "types": [
          "LoaderDecorator"
        ],
        "spread": false,
        "optional": false,
        "name": "Loader",
        "description": "{Decorator} instance"
      },
      {
        "nullable": null,
        "types": [
          "InitializerDecorator"
        ],
        "spread": false,
        "optional": false,
        "name": "Initializer",
        "description": "{Decorator} instance"
      },
      {
        "nullable": null,
        "types": [
          "ErrorDecorator"
        ],
        "spread": false,
        "optional": false,
        "name": "Error",
        "description": "{Decorator} instance"
      },
      {
        "nullable": null,
        "types": [
          "HighlightDecorator"
        ],
        "spread": false,
        "optional": false,
        "name": "Highlight",
        "description": "{Decorator} instance"
      },
      {
        "nullable": null,
        "types": [
          "JupyterDecorator"
        ],
        "spread": false,
        "optional": false,
        "name": "Jupyter",
        "description": "{Decorator} instance"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Decorators"
    }
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "packages/francy-core/src/decorator/highlight.js",
    "content": "/**\n * This {Decorator} class is used to highlight some json and js syntax.\n */\nexport default class HighlightDecorator {\n  \n  /**\n   * This method handles a string and returns an html formated string with colors\n   * \n   * credits here: https://stackoverflow.com/questions/4810841/how-can-i-pretty-print-json-using-javascript#answer-7220510\n   * \n   * @example Decorators.Highlight.syntax(JSON.stringify(this.data.canvas, null, 2))\n   * \n   * @param {string} json - the json string\n   * @public\n   */\n  static syntax(json) {\n    if (!json) return '';\n    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/g, (match) => {\n      let cls = 'number';\n      if (/^\"/.test(match)) {\n        if (/:$/.test(match)) {\n          cls = 'key';\n        } else {\n          cls = 'string';\n        }\n      } else if (/true|false/.test(match)) {\n        cls = 'boolean';\n      } else if (/null/.test(match)) {\n        cls = 'null';\n      }\n      return `<span class=\"${cls}\">${match}</span>`;\n    });\n  }\n\n}",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/decorator/highlight.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "class",
    "name": "HighlightDecorator",
    "memberof": "packages/francy-core/src/decorator/highlight.js",
    "static": true,
    "longname": "packages/francy-core/src/decorator/highlight.js~HighlightDecorator",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/decorator/highlight.js",
    "importStyle": "HighlightDecorator",
    "description": "This {Decorator} class is used to highlight some json and js syntax.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "syntax",
    "memberof": "packages/francy-core/src/decorator/highlight.js~HighlightDecorator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/decorator/highlight.js~HighlightDecorator.syntax",
    "access": "public",
    "description": "This method handles a string and returns an html formated string with colors\n\ncredits here: https://stackoverflow.com/questions/4810841/how-can-i-pretty-print-json-using-javascript#answer-7220510",
    "examples": [
      "Decorators.Highlight.syntax(JSON.stringify(this.data.canvas, null, 2))"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "the json string"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "packages/francy-core/src/decorator/initialize.js",
    "content": "/**\n * This {Decorator} class is used to handle initialization methods before the execution of another method.\n */\nexport default class InitializerDecorator {\n\n  /**\n   * This function can be used as a decorator to intercept a method and execute the initialize method before.\n   * \n   * @example \\@Decorators.Initializer.initialize()\n   * \n   * @public\n   */\n  static initialize() {\n    return function (target, key, descriptor) {\n      let oldValue = descriptor.value;\n  \n      descriptor.value = function() {\n        this.initialize();\n        return oldValue.apply(this, arguments);\n      };\n      return descriptor;\n    };\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/decorator/initialize.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "class",
    "name": "InitializerDecorator",
    "memberof": "packages/francy-core/src/decorator/initialize.js",
    "static": true,
    "longname": "packages/francy-core/src/decorator/initialize.js~InitializerDecorator",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/decorator/initialize.js",
    "importStyle": "InitializerDecorator",
    "description": "This {Decorator} class is used to handle initialization methods before the execution of another method.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "initialize",
    "memberof": "packages/francy-core/src/decorator/initialize.js~InitializerDecorator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/decorator/initialize.js~InitializerDecorator.initialize",
    "access": "public",
    "description": "This function can be used as a decorator to intercept a method and execute the initialize method before.",
    "examples": [
      "\\@Decorators.Initializer.initialize()"
    ],
    "lineNumber": 13,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "packages/francy-core/src/decorator/jupyter.js",
    "content": "import {Logger} from '../util/logger';\n\n/* global Jupyter */\n\n/**\n * This {Decorator} class is used to handle Jupyter functions.\n */\nexport default class JupyterDecorator {\n  \n  /**\n   * This method register a class or classes on Jupyter keyboard_manager events\n   * \n   * @example Decorators.Jupyter.registerKeyboardEvents(['.francy', '.francy-arg', '.francy-overlay', '.francy-modal']);\n   * \n   * @param {string[]} classes - an Array of css classes to add on Jupyter keyboard_manager events\n   * @public\n   */\n  static registerKeyboardEvents(classes) {\n    // disable keyboard shortcuts in Jupyter for specific css classed elements\n    if (!classes) return;\n    try {\n      classes.map((c) => {\n        Jupyter.keyboard_manager.register_events(c);\n      });\n    } catch (e) {\n      if (e.name === 'ReferenceError') {\n        Logger.info('It seems we\\'re not running on Jupyter, cannot register events... continuing...');\n      } else {\n        Logger.warn(`We can't do anything about this! An error occurred [${e}]`);\n      }\n    }\n  }\n\n}",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/decorator/jupyter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "class",
    "name": "JupyterDecorator",
    "memberof": "packages/francy-core/src/decorator/jupyter.js",
    "static": true,
    "longname": "packages/francy-core/src/decorator/jupyter.js~JupyterDecorator",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/decorator/jupyter.js",
    "importStyle": "JupyterDecorator",
    "description": "This {Decorator} class is used to handle Jupyter functions.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "registerKeyboardEvents",
    "memberof": "packages/francy-core/src/decorator/jupyter.js~JupyterDecorator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/decorator/jupyter.js~JupyterDecorator.registerKeyboardEvents",
    "access": "public",
    "description": "This method register a class or classes on Jupyter keyboard_manager events",
    "examples": [
      "Decorators.Jupyter.registerKeyboardEvents(['.francy', '.francy-arg', '.francy-overlay', '.francy-modal']);"
    ],
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "classes",
        "description": "an Array of css classes to add on Jupyter keyboard_manager events"
      }
    ],
    "return": null
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "packages/francy-core/src/decorator/loader.js",
    "content": "import { Utilities } from '../util/utilities';\n\n/* global d3 */\n\n/**\n * This {Decorator} class is used to show / hide a loader on {Francy}.\n */\nexport default class LoaderDecorator {\n\n  /**\n   * Default Constructor\n   * Decorators.Loader.withContext(this).show(); Decorators.Loader.withContext(this).hide();\n   */\n  constructor() {\n    /**\n     * Stores the loader ID\n     * @type {string}\n     */\n    this.id = Utilities.generateId();\n    /**\n     * Stores the loader context\n     * @type {Object}\n     */\n    this.context = undefined;\n    /**\n     * Stores the loader element\n     * @type {Object}\n     */\n    this.element = undefined;\n  }\n\n  /**\n   * This method stores the context where the loader will run.\n   * \n   * @public\n   * @param {Object} ctx - the context where this function will run\n   * @return {this} instance\n   */\n  withContext(ctx) {\n    this.context = ctx;\n    var loader = d3.select(`a.loader#Loader-${ctx.data ? ctx.data.canvas ? ctx.data.canvas.id : ctx.options.appendTo.data.canvas.id : ''}`);\n    if (loader.node()) {\n      this.element = loader;\n    }\n    return this;\n  }\n\n  /**\n  * This method shows the loader on the screen.\n  * \n  * @public\n  */\n  show() {\n    if (this.element && this.element.data()[0]) {\n      this.element.data()[0][this.id] = true;\n      this.element.style('visibility', 'visible');\n    }\n    return this;\n  }\n\n  /**\n  * This method hides the loader on the screen.\n  * \n  * @public\n  */\n  hide() {\n    if (this.element && this.element.data()[0]) {\n      delete this.element.data()[0][this.id];\n      // hide only if no more loaders present\n      if (Object.values(this.element.data()[0]).length === 0) {\n        this.element.style('visibility', 'hidden');\n      }\n    }\n    return this;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/decorator/loader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "class",
    "name": "LoaderDecorator",
    "memberof": "packages/francy-core/src/decorator/loader.js",
    "static": true,
    "longname": "packages/francy-core/src/decorator/loader.js~LoaderDecorator",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/decorator/loader.js",
    "importStyle": "LoaderDecorator",
    "description": "This {Decorator} class is used to show / hide a loader on {Francy}.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 165,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-core/src/decorator/loader.js~LoaderDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/loader.js~LoaderDecorator#constructor",
    "access": "public",
    "description": "Default Constructor\nDecorators.Loader.withContext(this).show(); Decorators.Loader.withContext(this).hide();",
    "lineNumber": 14
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "id",
    "memberof": "packages/francy-core/src/decorator/loader.js~LoaderDecorator",
    "static": false,
    "longname": "packages/francy-core/src/decorator/loader.js~LoaderDecorator#id",
    "access": "public",
    "description": "Stores the loader ID",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "context",
    "memberof": "packages/francy-core/src/decorator/loader.js~LoaderDecorator",
    "static": false,
    "longname": "packages/francy-core/src/decorator/loader.js~LoaderDecorator#context",
    "access": "public",
    "description": "Stores the loader context",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-core/src/decorator/loader.js~LoaderDecorator",
    "static": false,
    "longname": "packages/francy-core/src/decorator/loader.js~LoaderDecorator#element",
    "access": "public",
    "description": "Stores the loader element",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "withContext",
    "memberof": "packages/francy-core/src/decorator/loader.js~LoaderDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/loader.js~LoaderDecorator#withContext",
    "access": "public",
    "description": "This method stores the context where the loader will run.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "the context where this function will run"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "instance"
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "show",
    "memberof": "packages/francy-core/src/decorator/loader.js~LoaderDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/loader.js~LoaderDecorator#show",
    "access": "public",
    "description": "This method shows the loader on the screen.",
    "lineNumber": 53,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "hide",
    "memberof": "packages/francy-core/src/decorator/loader.js~LoaderDecorator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/decorator/loader.js~LoaderDecorator#hide",
    "access": "public",
    "description": "This method hides the loader on the screen.",
    "lineNumber": 66,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "packages/francy-core/src/render/base.js",
    "content": "import DataHandler from '../util/data-handler';\nimport { Decorators } from '../decorator/factory';\nimport { Exception } from '../util/exception';\nimport { Logger } from '../util/logger';\n\n/* global d3 */\n\n/**\n * Base is the base of renderers and contains multiple utility methods.\n * \n * @extends {DataHandler}\n */\nexport default class BaseRenderer extends DataHandler {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @param {Object} context - the context of the application, usually a configuration and a rendering manager instance\n   */\n  constructor({ appendTo = 'body', callbackHandler }, context = { }) {\n    super();\n    /**\n     * @typedef {Object} Options\n     * @property {Boolean} appendTo where the generated html/svg components will be attached to, default body\n     * @property {Function} callbackHandler this handler will be used to invoke actions from the menu, default console.log\n     */\n    this.options = undefined;\n    this.settings({ appendTo: appendTo, callbackHandler: callbackHandler });\n    this.context = context;\n  }\n\n  /**\n   * Saves the settings in an internal options object.\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @returns {object} this instance\n   * @public\n   */\n  settings({ appendTo, callbackHandler }) {\n    this.options = this.options || {};\n    if (!this.options.callbackHandler && !callbackHandler) {\n      throw new Error('A Callback Handler must be provided! This will be used to trigger events from the graphics produced...');\n    }\n    if (!this.options.appendTo && !appendTo) {\n      throw new Error('Missing an element or id to append the graphics to!');\n    }\n    if (typeof appendTo === 'string') {\n      appendTo = {element: d3.select(appendTo)};\n    }\n    this.options.appendTo = appendTo || this.options.appendTo;\n    this.options.callbackHandler = callbackHandler || this.options.callbackHandler;\n    return this;\n  }\n\n  /**\n   * Returns the parent element of this class\n   * \n   * @return {object} a d3 object\n   * @public\n   */\n  get parent() {\n    return this.options.appendTo.element;\n  }\n\n  /**\n   * Returns the parent class of this class\n   * \n   * @return {Renderer} the {Renderer} or {Composite} parent of this class\n   * @public\n   */\n  get parentClass() {\n    return this.options.appendTo;\n  }\n  \n  /**\n   * Generic error handler.\n   * Will log the error and rethrow if error is unknown.\n   * \n   * @param {Error} error - an error instance\n   * @public\n   */\n  static handleErrors(error) {\n    if (error instanceof Exception) {\n      // well, most of these are just informative\n      Logger.debug(error.message);\n      return;\n    }\n    Logger.error(error.message);\n    throw error;\n  }\n  \n  /**\n   * Returns the current mouse position.\n   * \n   * @private\n   */\n  _mousePosition() {\n    var x = ((event.screenX + event.clientX) / 2) - event.pageX + event.offsetX;\n    var y = ((event.screenY + event.clientY) / 2) - event.pageY + event.offsetY;\n    return [x, y];\n  }\n\n  /**\n   * Generic Promise handler.\n   * This will show the Loader/Spinner on the application while processing.\n   * \n   * @param {Promise} promise - a promise to execute\n   * @return {Object} the result of the promise\n   * @public\n   */\n  handlePromise(promise) {\n    let loader = Decorators.Loader.withContext(this).show();\n    return promise\n      .then(data => data)\n      .catch(error => BaseRenderer.handleErrors(error))\n      .finally(() => loader.hide());\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/base.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "class",
    "name": "BaseRenderer",
    "memberof": "packages/francy-core/src/render/base.js",
    "static": true,
    "longname": "packages/francy-core/src/render/base.js~BaseRenderer",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/base.js",
    "importStyle": "BaseRenderer",
    "description": "Base is the base of renderers and contains multiple utility methods.",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "DataHandler"
    ]
  },
  {
    "__docId__": 176,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/base.js~BaseRenderer",
    "static": false,
    "longname": "packages/francy-core/src/render/base.js~BaseRenderer#options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context of the application, usually a configuration and a rendering manager instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 177,
    "kind": "typedef",
    "name": "Options",
    "memberof": "packages/francy-core/src/render/base.js~BaseRenderer",
    "static": true,
    "longname": "packages/francy-core/src/render/base.js~BaseRenderer.Options",
    "access": "public",
    "description": "",
    "lineNumber": 30,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Options"
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "context",
    "memberof": "packages/francy-core/src/render/base.js~BaseRenderer",
    "static": false,
    "longname": "packages/francy-core/src/render/base.js~BaseRenderer#context",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/base.js~BaseRenderer",
    "static": false,
    "longname": "packages/francy-core/src/render/base.js~BaseRenderer#options",
    "access": "public",
    "description": "Saves the settings in an internal options object.",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} this instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "this instance"
    },
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 181,
    "kind": "get",
    "name": "parent",
    "memberof": "packages/francy-core/src/render/base.js~BaseRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/base.js~BaseRenderer#parent",
    "access": "public",
    "description": "Returns the parent element of this class",
    "lineNumber": 66,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "a d3 object"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "get",
    "name": "parentClass",
    "memberof": "packages/francy-core/src/render/base.js~BaseRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/base.js~BaseRenderer#parentClass",
    "access": "public",
    "description": "Returns the parent class of this class",
    "lineNumber": 76,
    "return": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": "the {Renderer} or {Composite} parent of this class"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "handleErrors",
    "memberof": "packages/francy-core/src/render/base.js~BaseRenderer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/render/base.js~BaseRenderer.handleErrors",
    "access": "public",
    "description": "Generic error handler.\nWill log the error and rethrow if error is unknown.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "an error instance"
      }
    ],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "_mousePosition",
    "memberof": "packages/francy-core/src/render/base.js~BaseRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/base.js~BaseRenderer#_mousePosition",
    "access": "private",
    "description": "Returns the current mouse position.",
    "lineNumber": 102,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "handlePromise",
    "memberof": "packages/francy-core/src/render/base.js~BaseRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/base.js~BaseRenderer#handlePromise",
    "access": "public",
    "description": "Generic Promise handler.\nThis will show the Loader/Spinner on the application while processing.",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "Promise"
        ],
        "spread": false,
        "optional": false,
        "name": "promise",
        "description": "a promise to execute"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the result of the promise"
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "packages/francy-core/src/render/callback.js",
    "content": "import BaseRenderer from './base';\nimport ConfirmModal from './modal/confirm';\nimport { Decorators } from '../decorator/factory';\nimport RequiredArgsModal from './modal/required';\n\n/**\n * CallbackHandler is responsible for handling Callbacks and display Modal windows accodingly.\n * Callbacks can have arguments, for which a Modal window will appear to request such input.\n * Callbacks can also show a confirmation message before arguments input / execution.\n * If a Callback does not require an argument and no confirmation message, \n * then the Callback is executed immediately.\n */\nexport default class CallbackHandler extends BaseRenderer {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @param {Object} context - the context of the application, usually a configuration and a rendering manager instance\n   */\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    /**\n     * Stores the callback to execute\n     * @type {function}\n     */\n    this.callback = callbackHandler;\n  }\n\n  /**\n   * Runs callback function. If this callback is configured to get input from the user,\n   * this will be prompt before execution.\n   * \n   * @returns {object} the output from the callback function\n   * @public \n   */\n  @Decorators.Data.requires('callback')\n  async execute() {\n    let options = this.options;\n    if (this.data.callback.confirm) {\n      if (Object.keys(this.data.callback.requiredArgs).length) {\n        options.callbackHandler = () => this._showRequiredModal.call(this);\n      }\n      return await this.handlePromise(this._showConfirmModal());\n    } else if (Object.keys(this.data.callback.requiredArgs).length) {\n      return await this.handlePromise(this._showRequiredModal.call(this));\n    }\n    // Trigger is the expected command on GAP for this event!\n    return await this._execute(this.data.callback);\n  }\n\n  /**\n   * Builds and shows a {ConfirmModal}\n   * \n   * @private\n   */\n  async _showConfirmModal() {\n    let options = this.options;\n    if (Object.keys(this.data.callback.requiredArgs).length) {\n      options.callbackHandler = () => this._showRequiredModal.call(this);\n    }\n    let modal = new ConfirmModal(options, this.context);\n    return await this.handlePromise(modal.load(this.data, true).render());\n  }\n\n  /**\n   * Builds and shows a {RequiredArgsModal}\n   * \n   * @private\n   */\n  async _showRequiredModal() {\n    let options = this.options;\n    options.callbackHandler = o => this._execute.call(this, o);\n    let modal = new RequiredArgsModal(options, this.context);\n    return await this.handlePromise(modal.load(this.data, true).render());\n  }\n\n  /**\n   * This method executes the callback with the result from the {RequiredArgsModal} \n   * modal windows if required\n   * \n   * @param {object} object - the object to stringify and pass to the callback\n   * @private\n   */\n  _execute(object) {\n    // oh well, Trigger(<json>); is the entrypoint back to GAP \n    // while we don't support comms on the kernel:\n    return this.callback(`Trigger(${JSON.stringify(JSON.stringify(object))});`);\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/callback.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "class",
    "name": "CallbackHandler",
    "memberof": "packages/francy-core/src/render/callback.js",
    "static": true,
    "longname": "packages/francy-core/src/render/callback.js~CallbackHandler",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/callback.js",
    "importStyle": "CallbackHandler",
    "description": "CallbackHandler is responsible for handling Callbacks and display Modal windows accodingly.\nCallbacks can have arguments, for which a Modal window will appear to request such input.\nCallbacks can also show a confirmation message before arguments input / execution.\nIf a Callback does not require an argument and no confirmation message, \nthen the Callback is executed immediately.",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "packages/francy-core/src/render/base.js~BaseRenderer"
    ]
  },
  {
    "__docId__": 188,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/callback.js~CallbackHandler",
    "static": false,
    "longname": "packages/francy-core/src/render/callback.js~CallbackHandler#options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context of the application, usually a configuration and a rendering manager instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "callback",
    "memberof": "packages/francy-core/src/render/callback.js~CallbackHandler",
    "static": false,
    "longname": "packages/francy-core/src/render/callback.js~CallbackHandler#callback",
    "access": "public",
    "description": "Stores the callback to execute",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "execute",
    "memberof": "packages/francy-core/src/render/callback.js~CallbackHandler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-core/src/render/callback.js~CallbackHandler#execute",
    "access": "public",
    "description": "Runs callback function. If this callback is configured to get input from the user,\nthis will be prompt before execution.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} the output from the callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the output from the callback function"
    },
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('callback')"
      }
    ],
    "params": []
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "_showConfirmModal",
    "memberof": "packages/francy-core/src/render/callback.js~CallbackHandler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-core/src/render/callback.js~CallbackHandler#_showConfirmModal",
    "access": "private",
    "description": "Builds and shows a {ConfirmModal}",
    "lineNumber": 59,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "_showRequiredModal",
    "memberof": "packages/francy-core/src/render/callback.js~CallbackHandler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-core/src/render/callback.js~CallbackHandler#_showRequiredModal",
    "access": "private",
    "description": "Builds and shows a {RequiredArgsModal}",
    "lineNumber": 73,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "_execute",
    "memberof": "packages/francy-core/src/render/callback.js~CallbackHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/callback.js~CallbackHandler#_execute",
    "access": "private",
    "description": "This method executes the callback with the result from the {RequiredArgsModal} \nmodal windows if required",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "the object to stringify and pass to the callback"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "packages/francy-core/src/render/composite.js",
    "content": "import Renderer from './renderer';\n\n/**\n * This class is a composite of multiple renderers.\n * Being a {Renderer} class it provides a {Composite#add} method\n * that allows the adition of child {Renderer}s that will be rendered within this renderer, being this their parent.\n * \n * @extends {Renderer]\n */\nexport default class Composite extends Renderer {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @param {Object} context - the context of the application, usually a configuration and a rendering manager instance\n   */\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    if (new.target === Composite) {\n      throw new TypeError('Cannot instantiate [Composite] classes directly!');\n    }\n    /**\n     * Stores renderers into this array\n     * @type {Renderer[]}\n     */\n    this.renderers = [];\n  }\n\n  /**\n   * This method adds a {Renderer} instance for rendering all children\n   * \n   * @paran {Renderer} renderer - a child renderer\n   * @returns {object} this instance\n   * @public\n   */\n  addChild(renderer) {\n    if (renderer) {\n      this.renderers.push(renderer);\n    }\n    return this;\n  }\n  \n  /**\n   * This method removes all {Renderer} instances to be rendered.\n   * \n   * @returns {object} this instance\n   * @public\n   */\n  removeChildren() {\n    this.renderers = [];\n    return this;\n  }\n\n  /**\n   * This method must be called manually at some point on the {Renderer.render} method.\n   */\n  async renderChildren() {\n    // render other components\n    for (let renderer of this.renderers) {\n      await this.handlePromise(renderer.settings({appendTo: this}).load(this.data).render());\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/composite.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "class",
    "name": "Composite",
    "memberof": "packages/francy-core/src/render/composite.js",
    "static": true,
    "longname": "packages/francy-core/src/render/composite.js~Composite",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/composite.js",
    "importStyle": "Composite",
    "description": "This class is a composite of multiple renderers.\nBeing a {Renderer} class it provides a {Composite#add} method\nthat allows the adition of child {Renderer}s that will be rendered within this renderer, being this their parent.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 196,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/composite.js~Composite",
    "static": false,
    "longname": "packages/francy-core/src/render/composite.js~Composite#options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context of the application, usually a configuration and a rendering manager instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "renderers",
    "memberof": "packages/francy-core/src/render/composite.js~Composite",
    "static": false,
    "longname": "packages/francy-core/src/render/composite.js~Composite#renderers",
    "access": "public",
    "description": "Stores renderers into this array",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Renderer[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "addChild",
    "memberof": "packages/francy-core/src/render/composite.js~Composite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/composite.js~Composite#addChild",
    "access": "public",
    "description": "This method adds a {Renderer} instance for rendering all children",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@paran",
        "tagValue": "{Renderer} renderer - a child renderer"
      },
      {
        "tagName": "@returns",
        "tagValue": "{object} this instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "this instance"
    },
    "params": [
      {
        "name": "renderer",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "removeChildren",
    "memberof": "packages/francy-core/src/render/composite.js~Composite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/composite.js~Composite#removeChildren",
    "access": "public",
    "description": "This method removes all {Renderer} instances to be rendered.",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} this instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "this instance"
    },
    "params": []
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "renderChildren",
    "memberof": "packages/francy-core/src/render/composite.js~Composite",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-core/src/render/composite.js~Composite#renderChildren",
    "access": "public",
    "description": "This method must be called manually at some point on the {Renderer.render} method.",
    "lineNumber": 60,
    "params": [],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "packages/francy-core/src/render/graph/base.js",
    "content": "import Callback from '../callback';\nimport ContextMenu from '../menu/context';\nimport GraphOperations from './operations';\nimport Renderer from '../renderer';\nimport Tooltip from '../tooltip';\n\n/* global d3 */\n\n/**\n * Implements a Generic Graph.\n * \n * This component holds utility methods for handling Graph structures.\n * \n * @extends {Renderer}\n */\nexport default class Graph extends Renderer {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @param {Object} context - the context of the application, usually a configuration and a rendering manager instance\n   */\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  initialize() {\n    this.element = this.parent.select('g.francy-content');\n    this.tooltip = new Tooltip(this.options, this.context);\n    this.contextMenu = new ContextMenu(this.options, this.context);\n    this.callback = new Callback(this.options, this.context);\n    this.graphOperations = new GraphOperations(this.options, this.context);\n    this.OnEvent = {\n      mouseOut: () => this.tooltip.unrender(),\n      mouseIn: (data) => {\n        if (data && data.messages) {\n          // default, show tooltip\n          this.handlePromise(this.tooltip.load({ messages: data.messages }, true).render());\n          // ok, this is almost an hack, because this should be rendered on\n          // the tooltip itself.. but because a tooltip gets only the messages \n          // object to render and not the whole `this.data` object, \n          // we can't check for the property canvas.texTypesetting, \n          // hence this:\n          this.handlePromise(this.mathjax.settings({ appendTo: this.tooltip, renderType: 'HTML-CSS' }).render());\n        }\n      },\n      doubleClick: (data) => this._executeCallback.call(this, this, data, 'dblclick'),\n      click: (data) => this._executeCallback.call(this, this, data, 'click'),\n      contextMenu: (data) => {\n      // default, build context menu\n        this.handlePromise(this.contextMenu.load(data, true).render());\n        // any callbacks will be handled here\n        this._executeCallback.call(this, this, data, 'contextmenu');\n      }\n    };\n  }\n\n  _applyEvents(element) {\n    if (!element) return;\n\n    let self = this;\n    element\n      .on('contextmenu', function (d) {\n        let data = d.data || d;\n        self._selectNode.call(this, self, data);\n        self.OnEvent.contextMenu(data);\n      })\n      .on('click', function (d) {\n        let data = d.data || d;\n        self._selectNode.call(this, self, data);\n        self.OnEvent.click(data);\n      })\n      .on('dblclick', function (d) {\n        let data = d.data || d;\n        self.OnEvent.doubleClick(data);\n      })\n      .on('mouseover', function (d) {\n        let data = d.data || d;\n        self.OnEvent.mouseIn(data);\n      })\n      .on('mouseout', function () {\n        self.OnEvent.mouseOut();\n      });\n  }\n\n  _selectNode(self, data) {\n    if (!d3.event.ctrlKey) {\n      self.graphOperations.nodeSelection.clear();\n    }\n    data.selected = !data.selected;\n    d3.select(this).classed('francy-selected', d => d.selected);\n  }\n\n  _executeCallback(self, data, event) {\n    if (data && data.callbacks) {\n      Object.values(data.callbacks).forEach(cb => {\n        // execute only the ones that match the event!\n        cb.trigger === event && self.handlePromise(self.callback.load({ callback: cb }, true).execute());\n      });\n    }\n  }\n\n  static linkXPos(s, t) {\n    return Math.cos(Graph.angle(s, t)) + (s.x + t.x) / 2;\n  }\n\n  static linkYPos(s, t) {\n    return Math.sin(Graph.angle(s, t)) + (s.y + t.y) / 2;\n  }\n\n  static angle(s, t) {\n    return Math.atan2(t.y - s.y, t.x - s.x);\n  }\n\n  static get colors() {\n    return d3.scaleSequential().domain([0, 100]).interpolator(d3.interpolateRainbow);\n  }\n\n  static getSymbol(type) {\n\n    let element = undefined;\n    switch (type) {\n    case 'cross':\n      element = d3.symbolCross;\n      break;\n    case 'diamond':\n      element = d3.symbolDiamond;\n      break;\n    case 'square':\n      element = d3.symbolSquare;\n      break;\n    case 'triangle':\n      element = d3.symbolTriangle;\n      break;\n    case 'star':\n      element = d3.symbolStar;\n      break;\n    case 'wye':\n      element = d3.symbolWye;\n      break;\n    case 'circle':\n    default:\n      element = d3.symbolCircle;\n    }\n\n    return element;\n  }\n\n  _getXPosition(element) {\n    let bound = element.getBBox();\n    return -Math.ceil(bound.width / 2);\n  }\n\n  setLabelXPosition(element) {\n    try {\n      d3.select(element).attr('x', this._getXPosition(element));\n    } catch (Error) {\n      // don't care, this might fail for multiple reasons\n      // the use rmight have switch renderer for instance\n      // no worries if something is not properly aligned :P\n    } \n  }\n  \n  _getYPosition(element) {\n    let bound = element.getBBox();\n    return Math.floor(bound.height / 2);\n  }\n\n  setLabelYPosition(element) {\n    try {\n      d3.select(element).attr('y', this._getYPosition(element));\n    } catch (Error) {\n      // don't care, this might fail for multiple reasons\n      // the use rmight have switch renderer for instance\n      // no worries if something is not properly aligned :P\n    } \n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/graph/base.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "class",
    "name": "Graph",
    "memberof": "packages/francy-core/src/render/graph/base.js",
    "static": true,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/graph/base.js",
    "importStyle": "Graph",
    "description": "Implements a Generic Graph.\n\nThis component holds utility methods for handling Graph structures.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "Renderer"
    ]
  },
  {
    "__docId__": 204,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context of the application, usually a configuration and a rendering manager instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "initialize",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#element",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "tooltip",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#tooltip",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "contextMenu",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#contextMenu",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "callback",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#callback",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "graphOperations",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#graphOperations",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "OnEvent",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#OnEvent",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "{\"mouseOut\": *, \"mouseIn\": *, \"doubleClick\": *, \"click\": *, \"contextMenu\": *}"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "_applyEvents",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#_applyEvents",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "_selectNode",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#_selectNode",
    "access": "private",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "self",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "_executeCallback",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#_executeCallback",
    "access": "private",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "self",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "linkXPos",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph.linkXPos",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "linkYPos",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph.linkYPos",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "angle",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph.angle",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "get",
    "name": "colors",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph.colors",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "getSymbol",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph.getSymbol",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "_getXPosition",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#_getXPosition",
    "access": "private",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "setLabelXPosition",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#setLabelXPosition",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "_getYPosition",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#_getYPosition",
    "access": "private",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "setLabelYPosition",
    "memberof": "packages/francy-core/src/render/graph/base.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/graph/base.js~Graph#setLabelYPosition",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "file",
    "name": "packages/francy-core/src/render/graph/operations.js",
    "content": "import BaseRenderer from '../base';\n\n/* global d3 */\n\n/**\n * Implements a Utility Graph operations.\n  * \n * @extends {BaseRenderer}\n */\nexport default class GraphOperations extends BaseRenderer {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @param {Object} context - the context of the application, usually a configuration and a rendering manager instance\n   */\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    this.load(this.options.appendTo.data); // this will be most likely the Frame!\n    var self = this;\n    this.nodeOperations = {\n      clear: function () {\n        this._getAll().each(function () {\n          let node = d3.select(this);\n          delete node.data()[0].selected;\n          node.classed('francy-selected', d => d.selected);\n        }).classed('francy-selected', d => d.selected);\n      },\n      getAll: function () {\n        var selected = [];\n        this._getAll().each(function () {\n          selected.push(d3.select(this).data()[0].id);\n        });\n        return selected;\n      },\n      _getAll: () => d3.select(`svg#Canvas-${self.data.canvas.id}`).selectAll('.francy-node.francy-selected').filter(d => d.selected),\n      select: (data) => {\n        if (!d3.event.ctrlKey) {\n          this.clear();\n        }\n        data.selected = !data.selected;\n        d3.select(this).classed('francy-selected', d => d.selected);\n      }\n    };\n  }\n\n  get nodeSelection() {\n    return this.nodeOperations;\n  }\n\n  dragBehavior(node, simulation, active) {\n    let self = this;\n\n    function enableDrag(enable) {\n      node.call(d3.drag()\n        .on('start', enable ? dragstarted : undefined)\n        .on('drag', enable ? dragged : undefined)\n        .on('end', enable ? dragended : undefined));\n    }\n\n    function dragstarted(d) {\n      if (!d3.event.active && active) {\n        simulation.on('end', undefined);\n        simulation.alphaTarget(0.01).restart();\n      }\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n\n    function dragged(d) {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    }\n\n    function dragended(d) {\n      if (!d3.event.active && active) {\n        simulation.alphaTarget(0);\n      }\n      d.fx = null;\n      d.fy = null;\n    }\n\n    // subscribe to update drag behavior on configuration change\n    let enableDragId = `enable-drag-${self.data.canvas.id}`;\n    self.context.configuration.subscribe('dragNodes', (value) => enableDrag.call(this, value), enableDragId);\n\n    // enable drag behavior\n    return enableDrag;\n  }\n\n  connectedNodes(node, canvasNodes, link, canvasLinks) {\n    let self = this;\n    //Toggle stores whether the highlighting is on\n    let toggle = 0;\n\n    //Create an array logging what is connected to what\n    let linkedByIndex = {};\n    \n    canvasNodes.forEach(function (d, i) {\n      linkedByIndex[`${i},${i}`] = 1;\n    });\n\n    canvasLinks.forEach(function (d) {\n      linkedByIndex[`${d.source.index},${d.target.index}`] = 1;\n    });\n\n    function connected() {\n      if (!self.context.configuration.object.showNeighbours) return;\n      if (toggle === 0) {\n        //Reduce the opacity of all but the neighbouring nodes\n        let el = d3.select(this);\n        let d = el.node().__data__;\n        if (el.attr('class').includes('francy-node')) {\n          node.style('opacity', o => linkedByIndex[`${d.index},${o.index}`] || linkedByIndex[`${o.index},${d.index}`] ? 1 : 0.1);\n          link.style('opacity', function (o) {\n            let opacity = d.index === o.source.index || d.index === o.target.index ? 1 : 0.1;\n            d3.select(this).on('mouseleave', undefined).select('text').style('opacity', opacity);\n            return opacity;\n          });\n        } else if (el.attr('class').includes('francy-link')) {\n          node.style('opacity', o => d.source.id === o.id || d.target.id === o.id ? 1 : 0.1);\n          link.style('opacity', function (o) {\n            let opacity = d.index === o.index ? 1 : 0.1;\n            d3.select(this).on('mouseleave', undefined).select('text').style('opacity', opacity);\n            return opacity;\n          });\n        }\n        setTimeout(() => {\n          d3.select('body').on('click', () => toggle === 1 ? connected.call(this) : undefined);\n        }, 0);\n        //Reduce the op\n        toggle = 1;\n      } else {\n        //Put them back to opacity 1\n        node.style('opacity', 1);\n        link.style('opacity', function () {\n          d3.select(this).select('text').style('opacity', 0.1);\n          return 1;\n        });\n        self.labelsOpacityBehavior(link);\n        d3.select('body').on('click', undefined);\n        toggle = 0;\n      }\n      d3.event.preventDefault();\n    }\n\n    return connected;\n  }\n\n  labelsOpacityBehavior(link) {\n    link.on('mouseover', function () {\n      d3.select(this).selectAll('text')\n        .style('opacity', 1)\n        .style('opacity', 1);\n    }).on('mouseleave', function () {\n      d3.select(this).selectAll('text')\n        .style('opacity', 0.1)\n        .style('opacity', 0.1);\n    });\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/graph/operations.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 225,
    "kind": "class",
    "name": "GraphOperations",
    "memberof": "packages/francy-core/src/render/graph/operations.js",
    "static": true,
    "longname": "packages/francy-core/src/render/graph/operations.js~GraphOperations",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/graph/operations.js",
    "importStyle": "GraphOperations",
    "description": "Implements a Utility Graph operations.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "BaseRenderer"
    ]
  },
  {
    "__docId__": 226,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/graph/operations.js~GraphOperations",
    "static": false,
    "longname": "packages/francy-core/src/render/graph/operations.js~GraphOperations#options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context of the application, usually a configuration and a rendering manager instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "nodeOperations",
    "memberof": "packages/francy-core/src/render/graph/operations.js~GraphOperations",
    "static": false,
    "longname": "packages/francy-core/src/render/graph/operations.js~GraphOperations#nodeOperations",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "{\"clear\": *, \"getAll\": *, \"_getAll\": *, \"select\": *}"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "get",
    "name": "nodeSelection",
    "memberof": "packages/francy-core/src/render/graph/operations.js~GraphOperations",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/graph/operations.js~GraphOperations#nodeSelection",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "dragBehavior",
    "memberof": "packages/francy-core/src/render/graph/operations.js~GraphOperations",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/graph/operations.js~GraphOperations#dragBehavior",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "simulation",
        "types": [
          "*"
        ]
      },
      {
        "name": "active",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "connectedNodes",
    "memberof": "packages/francy-core/src/render/graph/operations.js~GraphOperations",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/graph/operations.js~GraphOperations#connectedNodes",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "canvasNodes",
        "types": [
          "*"
        ]
      },
      {
        "name": "link",
        "types": [
          "*"
        ]
      },
      {
        "name": "canvasLinks",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "labelsOpacityBehavior",
    "memberof": "packages/francy-core/src/render/graph/operations.js~GraphOperations",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/graph/operations.js~GraphOperations#labelsOpacityBehavior",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "link",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "packages/francy-core/src/render/mathjax-wrapper.js",
    "content": "import BaseRenderer from './base';\nimport { Components } from '../component/factory';\nimport { Decorators } from '../decorator/factory';\n\n/* global MathJax */\n\n/**\n * This class wraps the MathJax component and renders MathJax components \n * by replacing HTML or SVG components with the MathJax representation.\n * \n * @example mathjax.settings({appendTo: {element: text}, renderType: 'SVG', postFunction: () => {}}).render()\n * \n * @extends {BaseRenderer}\n */\nexport default class MathJaxWrapper extends BaseRenderer {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @param {Object} context - the context of the application, usually a configuration and a rendering manager instance\n   */\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  /**\n   * This method is used to render this component\n   * \n   * @public\n   */\n  @Decorators.Data.enabled('canvas.texTypesetting')\n  async render() {\n    // if no element here just return...\n    if (!Components.MathJax.isAvailable ||\n      !this.parent || !this.parent.node()) return;\n    // check for a post exec function\n    this.options.postFunction = this.options.postFunction || function () {};\n    MathJax.Hub.Queue(\n      ['setRenderer', MathJax.Hub, this.options.renderType], ['Typeset', MathJax.Hub, this.parent.node()], [this.options.postFunction]\n    );\n  }\n\n  /**\n   * Saves the settings in an internal options object.\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @property {string} options.renderType - one of 'SVG' or 'HTML'\n   * @property {Function} options.postFunction - a function to run after the conversion of mathjax\n   * @returns {object} this instance\n   * @public\n   */\n  settings({ appendTo, callbackHandler, renderType, postFunction }) {\n    super.settings({ appendTo, callbackHandler });\n    this.options.renderType = renderType;\n    this.options.postFunction = postFunction;\n    return this;\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/mathjax-wrapper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "class",
    "name": "MathJaxWrapper",
    "memberof": "packages/francy-core/src/render/mathjax-wrapper.js",
    "static": true,
    "longname": "packages/francy-core/src/render/mathjax-wrapper.js~MathJaxWrapper",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/mathjax-wrapper.js",
    "importStyle": "MathJaxWrapper",
    "description": "This class wraps the MathJax component and renders MathJax components \nby replacing HTML or SVG components with the MathJax representation.",
    "examples": [
      "mathjax.settings({appendTo: {element: text}, renderType: 'SVG', postFunction: () => {}}).render()"
    ],
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "BaseRenderer"
    ]
  },
  {
    "__docId__": 234,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/mathjax-wrapper.js~MathJaxWrapper",
    "static": false,
    "longname": "packages/francy-core/src/render/mathjax-wrapper.js~MathJaxWrapper#options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context of the application, usually a configuration and a rendering manager instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-core/src/render/mathjax-wrapper.js~MathJaxWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-core/src/render/mathjax-wrapper.js~MathJaxWrapper#render",
    "access": "public",
    "description": "This method is used to render this component",
    "lineNumber": 35,
    "decorators": [
      {
        "name": "Decorators.Data.enabled",
        "arguments": "('canvas.texTypesetting')"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/mathjax-wrapper.js~MathJaxWrapper",
    "static": false,
    "longname": "packages/francy-core/src/render/mathjax-wrapper.js~MathJaxWrapper#options",
    "access": "public",
    "description": "Saves the settings in an internal options object.",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} this instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.renderType",
        "description": "one of 'SVG' or 'HTML'"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.postFunction",
        "description": "a function to run after the conversion of mathjax"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "this instance"
    },
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 237,
    "kind": "file",
    "name": "packages/francy-core/src/render/menu/base.js",
    "content": "import CallbackHandler from '../callback';\nimport Renderer from '../renderer';\n\n/**\n * This class contains helper functions to handle the creation of menus\n */\nexport default class Menu extends Renderer {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   */\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  /**\n   * This method traverses an iterator and creates the menu entries.\n   * \n   * @param {object} appendTo - the object to append the menu to\n   * @param {object} menusIterator - the iterator from {Menu#iterator}\n   * @public\n   */\n  traverse(appendTo, menusIterator) {\n    while (menusIterator.hasNext()) {\n      let menuItem = menusIterator.next();\n      let entry = appendTo.append('li');\n      let action = entry.selectAll('a').data([menuItem]).enter().append('a').attr('title', menuItem.title).html(menuItem.title);\n      if (menuItem.callback && Object.values(menuItem.callback).length) {\n        action.on('click', d => new CallbackHandler(this.options, this.context).load(d, true).execute());\n      }\n      if (menuItem.menus && Object.values(menuItem.menus).length > 0) {\n        action.append('div').classed('francy-menu-arrow-down', true).style('float', 'right');\n        let content = entry.append('ul');\n        let subMenusIterator = this.iterator(Object.values(menuItem.menus));\n        this.traverse(content, subMenusIterator);\n      }\n    }\n  }\n\n  /**\n   * Creates an iterator from an array\n   * \n   * @returns {object} the iterator\n   * @public\n   */\n  iterator(array) {\n    let nextIndex = 0;\n    return {\n      next: function () {\n        return this.hasNext() ? array[nextIndex++] : undefined;\n      },\n      hasNext: function () {\n        return nextIndex < array.length;\n      }\n    };\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/menu/base.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "class",
    "name": "Menu",
    "memberof": "packages/francy-core/src/render/menu/base.js",
    "static": true,
    "longname": "packages/francy-core/src/render/menu/base.js~Menu",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/menu/base.js",
    "importStyle": "Menu",
    "description": "This class contains helper functions to handle the creation of menus",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "packages/francy-core/src/render/renderer.js~Renderer"
    ]
  },
  {
    "__docId__": 239,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/menu/base.js~Menu",
    "static": false,
    "longname": "packages/francy-core/src/render/menu/base.js~Menu#options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 16,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "traverse",
    "memberof": "packages/francy-core/src/render/menu/base.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/menu/base.js~Menu#traverse",
    "access": "public",
    "description": "This method traverses an iterator and creates the menu entries.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "appendTo",
        "description": "the object to append the menu to"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "menusIterator",
        "description": "the iterator from {Menu#iterator}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "iterator",
    "memberof": "packages/francy-core/src/render/menu/base.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/menu/base.js~Menu#iterator",
    "access": "public",
    "description": "Creates an iterator from an array",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} the iterator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the iterator"
    },
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 242,
    "kind": "file",
    "name": "packages/francy-core/src/render/menu/context.js",
    "content": "import { Decorators } from '../../decorator/factory';\nimport Menu from './base';\n\n/* global d3 */\n\n/**\n * Implements a Context Menu.\n * \n * This component shows a Context Menu on right click.\n * \n * @extends {Menu}\n */\nexport default class ContextMenu extends Menu {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @param {Object} context - the context of the application, usually a configuration and a rendering manager instance\n   */\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  @Decorators.Data.requires('menus')\n  async render() {\n\n    if (d3.event) {\n      d3.event.preventDefault();\n    }\n\n    this.element = this.HTMLParent.select('div.francy-context-menu-holder');\n    // check if the menu holder is already present\n    if (!this.element.node()) {\n      this.element = this.HTMLParent.append('div')\n        .attr('class', 'francy-context-menu-holder');\n    }\n\n    let position = this._mousePosition();\n\n    this.element.style('left', position[0] + 5 + 'px').style('top', position[1] + 5 + 'px');\n\n    // show the context menu\n    this.element.style('display', 'block');\n\n    // check if it exists already\n    if (this.element.selectAll('*').node()) return;\n\n    // destroy menu\n    d3.select('body').on('click.francy-context-menu', () => this.unrender());\n\n    // this gets executed when a contextmenu event occurs\n    let menu = this.element.append('div').attr('class', 'francy-context-menu').append('ul');\n    let menusIterator = this.iterator(Object.values(this.data.menus));\n    this.traverse(menu, menusIterator);\n\n    return this;\n  }\n\n  unrender() {\n    if (this.element) {\n      this.element.selectAll('*').remove();\n      this.element.style('display', null);\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/menu/context.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 243,
    "kind": "class",
    "name": "ContextMenu",
    "memberof": "packages/francy-core/src/render/menu/context.js",
    "static": true,
    "longname": "packages/francy-core/src/render/menu/context.js~ContextMenu",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/menu/context.js",
    "importStyle": "ContextMenu",
    "description": "Implements a Context Menu.\n\nThis component shows a Context Menu on right click.",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "Menu"
    ]
  },
  {
    "__docId__": 244,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/menu/context.js~ContextMenu",
    "static": false,
    "longname": "packages/francy-core/src/render/menu/context.js~ContextMenu#options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context of the application, usually a configuration and a rendering manager instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-core/src/render/menu/context.js~ContextMenu",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-core/src/render/menu/context.js~ContextMenu#render",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('menus')"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-core/src/render/menu/context.js~ContextMenu",
    "static": false,
    "longname": "packages/francy-core/src/render/menu/context.js~ContextMenu#element",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "unrender",
    "memberof": "packages/francy-core/src/render/menu/context.js~ContextMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/menu/context.js~ContextMenu#unrender",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "packages/francy-core/src/render/modal/about.js",
    "content": "import { Components } from '../../component/factory';\nimport { Decorators } from '../../decorator/factory';\nimport { GlobalConfiguration } from '../../util/configuration';\nimport { Logger } from '../../util/logger';\nimport Modal from './base';\n\n/* global d3 VERSION FRANCY_DESC */\n\n/**\n * Implements The About Modal Window.\n * \n * This component shows information about this app.\n * \n * @extends {Modal}\n */\nexport default class AboutModal extends Modal {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @param {Object} context - the context of the application, usually a configuration and a rendering manager instance\n   */\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  @Decorators.Initializer.initialize()\n  @Decorators.Data.requires('canvas')\n  async render() {\n    let modalId = 'AboutModalWindow';\n\n    Logger.debug(`(${this.context.instanceId}) Creating About Modal [${modalId}]...`);\n\n    this.element = this.holder.append('div')\n      .attr('id', modalId)\n      .attr('class', 'francy-modal');\n\n    let form = this.element.append('form');\n\n    this._buildHeader(form, `About Francy v${VERSION}`);\n\n    let content = form.append('div').attr('class', 'francy-modal-content')\n      .append('div').attr('class', 'francy-table')\n      .append('div').attr('class', 'francy-table-body').style('text-align', 'center');\n\n    content.append('span').text(FRANCY_DESC);\n    content.append('br');\n    content.append('br');\n    content.append('span').append('a').attr('href', 'https://github.com/gap-packages/francy').attr('target', '_blank').text('Francy on Github');\n    content.append('br');\n    content.append('br');\n    \n    if (GlobalConfiguration.object.verbose) {\n      content.append('span').text('Loaded Data:');\n      content.append('pre').attr('class', 'francy').style('text-align', 'left').html(Decorators.Highlight.syntax(JSON.stringify(this.data.canvas, null, 2)));\n    }\n\n    content.append('div').text('Verbose').append('div').append('input')\n      .attr('type', 'checkbox')\n      .attr('required', null)\n      .attr('value', GlobalConfiguration.object.verbose)\n      .attr('name', 'Verbose')\n      .property('checked', GlobalConfiguration.object.verbose)\n      .on('change', function () {\n        GlobalConfiguration.object.verbose = this.value = this.checked = !GlobalConfiguration.object.verbose; \n      })\n      .on('input', this.onchange)\n      .on('keyup', this.onchange)\n      .on('paste', this.onchange);\n\n    let footer = form.append('div').attr('class', 'francy-modal-footer');\n\n    footer.append('button').text('Ok').on('click', () => {\n      d3.event.preventDefault();\n      this.unrender.call(this);\n    });\n\n    // disable keyboard shortcuts when using this modal in Jupyter\n    if (Components.Jupyter.isAvailable) {\n      Decorators.Jupyter.registerKeyboardEvents(['.francy', '.francy-arg', '.francy-overlay', '.francy-modal']);\n    }\n\n    Logger.debug(`(${this.context.instanceId}) Modal About updated [${modalId}]...`);\n\n    return this;\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/modal/about.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "class",
    "name": "AboutModal",
    "memberof": "packages/francy-core/src/render/modal/about.js",
    "static": true,
    "longname": "packages/francy-core/src/render/modal/about.js~AboutModal",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/modal/about.js",
    "importStyle": "AboutModal",
    "description": "Implements The About Modal Window.\n\nThis component shows information about this app.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "Modal"
    ]
  },
  {
    "__docId__": 251,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/modal/about.js~AboutModal",
    "static": false,
    "longname": "packages/francy-core/src/render/modal/about.js~AboutModal#options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context of the application, usually a configuration and a rendering manager instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-core/src/render/modal/about.js~AboutModal",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-core/src/render/modal/about.js~AboutModal#render",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Initializer.initialize",
        "arguments": "()"
      },
      {
        "name": "Decorators.Data.requires",
        "arguments": "('canvas')"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-core/src/render/modal/about.js~AboutModal",
    "static": false,
    "longname": "packages/francy-core/src/render/modal/about.js~AboutModal#element",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "packages/francy-core/src/render/modal/base.js",
    "content": "import Renderer from '../renderer';\n\n/* global d3 */\n\n/**\n * Implements basic methods for handling Modal windows.\n * \n * @extends {Renderer}\n */\nexport default class Modal extends Renderer {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @param {Object} context - the context of the application, usually a configuration and a rendering manager instance\n   */\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    /**\n     * Stores the element\n     * @type {object}\n     */\n    this.element = undefined;\n    /**\n     * Stores the overlay div\n     * @type {object}\n     */\n    this.overlay = undefined;\n    /**\n     * Stores the parent div\n     * @type {object}\n     */\n    this.holder = undefined;\n  }\n\n  /**\n   * @override\n   */\n  initialize() {\n    // we want to overlay everything, hence 'body' must be used\n    this.overlay = d3.select('body').append('div').attr('class', 'francy-overlay');\n    this.holder = d3.select('body').append('div').attr('class', 'francy');\n  }\n  \n  /**\n   * Handles component unrender\n   * \n   * @public\n   */\n  unrender() {\n    this.overlay.remove();\n    this.element.remove();\n    this.holder.remove();\n  }\n  \n  /**\n   * Utility method to create an header\n   * \n   * @private\n   */\n  _buildHeader(form, title) {\n    let header = form.append('div').attr('class', 'francy-modal-header');\n\n    let headerTitle = header.append('span').html(title);\n    if (this.data.title) {\n      headerTitle.append('span').text(`${this.data.title}`);\n    }\n  }\n  \n  /**\n   * Utility method to create an header\n   * \n   * @private\n   */\n  _buildFooter(form) {\n    let footer = form.append('div').attr('class', 'francy-modal-footer');\n\n    footer.append('button').text('Ok').on('click', () => {\n      if (form.node().checkValidity()) {\n        d3.event.preventDefault();\n        this.options.callbackHandler(this.data.callback);\n        this.unrender.call(this);\n      }\n      return false;\n    });\n\n    footer.append('button').text('Cancel').on('click', () => { \n      d3.event.preventDefault(); \n      this.unrender.call(this); \n    });\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/modal/base.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "class",
    "name": "Modal",
    "memberof": "packages/francy-core/src/render/modal/base.js",
    "static": true,
    "longname": "packages/francy-core/src/render/modal/base.js~Modal",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/modal/base.js",
    "importStyle": "Modal",
    "description": "Implements basic methods for handling Modal windows.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "Renderer"
    ]
  },
  {
    "__docId__": 256,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/modal/base.js~Modal",
    "static": false,
    "longname": "packages/francy-core/src/render/modal/base.js~Modal#options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context of the application, usually a configuration and a rendering manager instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-core/src/render/modal/base.js~Modal",
    "static": false,
    "longname": "packages/francy-core/src/render/modal/base.js~Modal#element",
    "access": "public",
    "description": "Stores the element",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "overlay",
    "memberof": "packages/francy-core/src/render/modal/base.js~Modal",
    "static": false,
    "longname": "packages/francy-core/src/render/modal/base.js~Modal#overlay",
    "access": "public",
    "description": "Stores the overlay div",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "holder",
    "memberof": "packages/francy-core/src/render/modal/base.js~Modal",
    "static": false,
    "longname": "packages/francy-core/src/render/modal/base.js~Modal#holder",
    "access": "public",
    "description": "Stores the parent div",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "initialize",
    "memberof": "packages/francy-core/src/render/modal/base.js~Modal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/modal/base.js~Modal#initialize",
    "access": "public",
    "description": "",
    "lineNumber": 42,
    "override": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "unrender",
    "memberof": "packages/francy-core/src/render/modal/base.js~Modal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/modal/base.js~Modal#unrender",
    "access": "public",
    "description": "Handles component unrender",
    "lineNumber": 53,
    "params": [],
    "return": null
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "_buildHeader",
    "memberof": "packages/francy-core/src/render/modal/base.js~Modal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/modal/base.js~Modal#_buildHeader",
    "access": "private",
    "description": "Utility method to create an header",
    "lineNumber": 64,
    "params": [
      {
        "name": "form",
        "types": [
          "*"
        ]
      },
      {
        "name": "title",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "_buildFooter",
    "memberof": "packages/francy-core/src/render/modal/base.js~Modal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/modal/base.js~Modal#_buildFooter",
    "access": "private",
    "description": "Utility method to create an header",
    "lineNumber": 78,
    "params": [
      {
        "name": "form",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 266,
    "kind": "file",
    "name": "packages/francy-core/src/render/modal/confirm.js",
    "content": "import { Components } from '../../component/factory';\nimport { Decorators } from '../../decorator/factory';\nimport { Logger } from '../../util/logger';\nimport Modal from './base';\n\n/**\n * Implements a Confirmation Modal window.\n * \n * The modal window takes a callback and based on the callback configuration will\n * display a message to the user prior to the execution of the callback.\n * \n * @extends {Modal}\n */\nexport default class ConfirmModal extends Modal {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @param {Object} context - the context of the application, usually a configuration and a rendering manager instance\n   */\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    /**\n     * Stores the element\n     * @type {object}\n     */\n    this.element = undefined;\n  }\n\n  /**\n   * This method is used to render this component\n   * \n   * @public\n   */\n  @Decorators.Initializer.initialize()\n  async render() {\n    let modalId = this.data.callback.id;\n\n    Logger.debug(`(${this.context.instanceId}) Creating Confirm Modal [${modalId}]...`);\n\n    this.element = this.holder.append('div')\n      .attr('id', modalId)\n      .attr('class', 'francy-modal');\n\n    let form = this.element.append('form');\n\n    this._buildHeader(form);\n\n    let content = form.append('div').attr('class', 'francy-modal-content')\n      .append('div').attr('class', 'francy-table')\n      .append('div').attr('class', 'francy-table-body');\n\n    let row = content.append('div').attr('class', 'francy-table-row');\n    row.append('div').attr('class', 'francy-table-cell').append('label');\n    row.append('div').attr('class', 'francy-table-cell').append('span').attr('id', `Confirm-${this.data.callback.id}`).text(this.data.callback.confirm);\n\n    this._buildFooter(form);\n\n    // disable keyboard shortcuts when using this modal in Jupyter\n    if (Components.Jupyter.isAvailable) {\n      Decorators.Jupyter.registerKeyboardEvents(['.francy', '.francy-overlay', '.francy-modal']);\n    }\n\n    Logger.debug(`(${this.context.instanceId}) Confirm Modal updated [${modalId}]...`);\n\n    return this;\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/modal/confirm.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 267,
    "kind": "class",
    "name": "ConfirmModal",
    "memberof": "packages/francy-core/src/render/modal/confirm.js",
    "static": true,
    "longname": "packages/francy-core/src/render/modal/confirm.js~ConfirmModal",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/modal/confirm.js",
    "importStyle": "ConfirmModal",
    "description": "Implements a Confirmation Modal window.\n\nThe modal window takes a callback and based on the callback configuration will\ndisplay a message to the user prior to the execution of the callback.",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "Modal"
    ]
  },
  {
    "__docId__": 268,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/modal/confirm.js~ConfirmModal",
    "static": false,
    "longname": "packages/francy-core/src/render/modal/confirm.js~ConfirmModal#options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context of the application, usually a configuration and a rendering manager instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-core/src/render/modal/confirm.js~ConfirmModal",
    "static": false,
    "longname": "packages/francy-core/src/render/modal/confirm.js~ConfirmModal#element",
    "access": "public",
    "description": "Stores the element",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-core/src/render/modal/confirm.js~ConfirmModal",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-core/src/render/modal/confirm.js~ConfirmModal#render",
    "access": "public",
    "description": "This method is used to render this component",
    "lineNumber": 39,
    "decorators": [
      {
        "name": "Decorators.Initializer.initialize",
        "arguments": "()"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "file",
    "name": "packages/francy-core/src/render/modal/required.js",
    "content": "import { Components } from '../../component/factory';\nimport { Decorators } from '../../decorator/factory';\nimport GraphOperations from '../graph/operations';\nimport { Logger } from '../../util/logger';\nimport Modal from './base';\n\n/**\n * Implements a Required Arguments Modal window.\n * \n * The modal window takes a callback and based on the callback configuration will\n * create the input fields required and display them to the user.\n * \n * @extends {Modal}\n */\nexport default class RequiredArgsModal extends Modal {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @param {Object} context - the context of the application, usually a configuration and a rendering manager instance\n   */\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    /**\n     * Stores the element\n     * @type {object}\n     */\n    this.element = undefined;\n  }\n\n  /**\n   * This method is used to render this component\n   * \n   * @public\n   */\n  @Decorators.Initializer.initialize()\n  async render() {\n    let modalId = this.data.callback.id;\n\n    Logger.debug(`(${this.context.instanceId}) Creating Callback Modal [${modalId}]...`);\n\n    this.element = this.holder.append('div')\n      .attr('id', modalId)\n      .attr('class', 'francy-modal');\n\n    let form = this.element.append('form');\n\n    this._buildHeader(form);\n\n    this._buildContent(form);\n\n    this._buildFooter(form);\n\n    // disable keyboard shortcuts when using this modal in Jupyter\n    if (Components.Jupyter.isAvailable) {\n      Decorators.Jupyter.registerKeyboardEvents(['.francy', '.francy-arg', '.francy-overlay', '.francy-modal']);\n    }\n\n    let inputElement = form.selectAll('.francy-arg').node();\n    if (inputElement) {\n      inputElement.focus();\n    }\n\n    Logger.debug(`(${this.context.instanceId}) Callback Modal updated [${modalId}]...`);\n\n    return this;\n  }\n\n  /**\n   * Utility method to handle content build\n   * \n   * @private\n   */\n  _buildContent(form) {\n    let self = this;\n\n    let content = form.append('div').attr('class', 'francy-modal-content')\n      .append('div').attr('class', 'francy-table')\n      .append('div').attr('class', 'francy-table-body');\n\n    for (let arg of Object.values(this.data.callback.requiredArgs)) {\n      let row = content.append('div').attr('class', 'francy-table-row');\n      row.append('div').attr('class', 'francy-table-cell').append('label')\n        .attr('for', arg.id).text(arg.title);\n      if (arg.type === 'select') {\n        let operations = new GraphOperations(this.options);\n        let selectedNodes = Object.values(operations.nodeSelection.getAll());\n        row.append('div').attr('class', 'francy-table-cell').append('select')\n          .attr('class', 'francy-arg')\n          .attr('id', arg.id)\n          .attr('required', '')\n          .attr('name', arg.id)\n          .attr('disabled', '')\n          .attr('multiple', '')\n          .data(selectedNodes).append('option')\n          .attr('value', d => d)\n          .html(d => d);\n        self.data.callback.requiredArgs[arg.id].value = selectedNodes;\n      } else {\n        let input = row.append('div').attr('class', 'francy-table-cell').append('input')\n          .attr('class', 'francy-arg')\n          .attr('id', arg.id)\n          .attr('required', '')\n          .attr('name', arg.id)\n          .attr('type', arg.type)\n          .attr('value', arg.value)\n          .on('change', function () {\n            self.data.callback.requiredArgs[this.id].value = this.value;\n          })\n          .on('input', this.onchange)\n          .on('keyup', this.onchange)\n          .on('paste', this.onchange);\n        // wait, if it is boolean we create a checkbox\n        if (arg.type === 'boolean') {\n          // well, a checkbox works this way so we need to initialize \n          // the value to false and update the value based on the checked \n          // property that triggers the onchange event\n          arg.value = arg.value || false;\n          input.attr('type', 'checkbox')\n            .attr('required', null)\n            .attr('value', arg.value)\n            .on('change', function () {\n              self.data.callback.requiredArgs[this.id].value = this.value = this.checked;\n            });\n        }\n      }\n      row.append('span').attr('class', 'validity');\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/modal/required.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 273,
    "kind": "class",
    "name": "RequiredArgsModal",
    "memberof": "packages/francy-core/src/render/modal/required.js",
    "static": true,
    "longname": "packages/francy-core/src/render/modal/required.js~RequiredArgsModal",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/modal/required.js",
    "importStyle": "RequiredArgsModal",
    "description": "Implements a Required Arguments Modal window.\n\nThe modal window takes a callback and based on the callback configuration will\ncreate the input fields required and display them to the user.",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "Modal"
    ]
  },
  {
    "__docId__": 274,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/modal/required.js~RequiredArgsModal",
    "static": false,
    "longname": "packages/francy-core/src/render/modal/required.js~RequiredArgsModal#options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context of the application, usually a configuration and a rendering manager instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-core/src/render/modal/required.js~RequiredArgsModal",
    "static": false,
    "longname": "packages/francy-core/src/render/modal/required.js~RequiredArgsModal#element",
    "access": "public",
    "description": "Stores the element",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-core/src/render/modal/required.js~RequiredArgsModal",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-core/src/render/modal/required.js~RequiredArgsModal#render",
    "access": "public",
    "description": "This method is used to render this component",
    "lineNumber": 40,
    "decorators": [
      {
        "name": "Decorators.Initializer.initialize",
        "arguments": "()"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "_buildContent",
    "memberof": "packages/francy-core/src/render/modal/required.js~RequiredArgsModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/modal/required.js~RequiredArgsModal#_buildContent",
    "access": "private",
    "description": "Utility method to handle content build",
    "lineNumber": 77,
    "params": [
      {
        "name": "form",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "file",
    "name": "packages/francy-core/src/render/renderer.js",
    "content": "import BaseRenderer from './base';\nimport { GlobalConfiguration } from '../util/configuration';\nimport { Logger } from '../util/logger';\nimport MathJaxWrapper from './mathjax-wrapper';\n\n/* global d3 */\n\n/**\n * This class represents a rendable component.\n * Instances of this class must implement a {Renderer#render} method\n * and optionaly an {Renderer#unrender} method.\n * \n * @extends {BaseRenderer}\n */\nexport default class Renderer extends BaseRenderer {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @param {Object} context - the context of the application, usually a configuration and a rendering manager instance\n   */\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    if (new.target === Renderer) {\n      throw new TypeError('Cannot instantiate [Renderer] classes directly!');\n    }\n    if (this.render === undefined || typeof this.render !== 'function') {\n      throw new TypeError('Must override [render()] method!');\n    }\n    if (this.unrender === undefined) {\n      Logger.debug(`(${this.context.instanceId}) No [unrender()] method specified...`);\n    }\n    /**\n     * Stores the element renderer\n     * @type {object}\n     */\n    this.element = undefined;\n    /**\n     * Stores the default animation duration\n     * @type {number}\n     */\n    this.transitionDuration = GlobalConfiguration.object.transitionDuration;\n  }\n\n  /**\n   * This method is used by the decorator {Decorators.Initializer.initialize()} \n   * to initialize this renderer.\n   * \n   * @override\n   * @public\n   */\n  initialize() {}\n  \n  /**\n   * Handles component unrender\n   * \n   * @public\n   */\n  unrender() {}\n\n  /**\n   * Return the HTML component holding this element\n   * \n   * @returns {object} the first HTML element holding this component, otherwise the parent element whatever it is (most likely an HTML)\n   * @public\n   */\n  get HTMLParent() {\n    return this.parent.node().tagName.toLowerCase() === 'svg' ? d3.select(this.parent.node().parentNode) : this.parent;\n  }\n\n  /**\n   * Returns the SVG element if available, otherwise the parent element whatever it is (most likely an HTML)\n   * \n   * @returns {object} the SVG element\n   * @public\n   */\n  get SVGParent() {\n    return this.parent.node().tagName.toLowerCase() === 'div' ? this.parent.select('svg') : this.parent;\n  }\n  \n  /**\n   * Returns the Canvas element if available, otherwise the parent element whatever it is (most likely an HTML)\n   * \n   * @returns {object} the SVG element\n   * @public\n   */\n  get HTMLCanvasParent() {\n    return this.parent.node().tagName.toLowerCase() === 'div' ? this.parent.select('canvas') : this.parent;\n  }\n\n  /**\n   * Returns a static object containing margins\n   * \n   * @returns {object} and object containing default margins: { top: 50, right: 50, bottom: 50, left: 50 }\n   * @public\n   */\n  get margin() {\n    return { top: 50, right: 50, bottom: 50, left: 50 };\n  }\n  \n  /**\n   * Returns the width of the parent\n   * \n   * @returns {number} the width of the html parent\n   * @public\n   */\n  get width() {\n    let width = +this.parent.attr('width') || d3.select('body').node().getBoundingClientRect().width;\n    return width - this.margin.left - this.margin.right;\n  }\n  \n  /**\n   * Returns the height of the parent\n   * \n   * @returns {number} the height of the html parent\n   * @public\n   */\n  get height() {\n    let height = +this.parent.attr('height') || d3.select('body').node().getBoundingClientRect().height;\n    return height - this.margin.top - this.margin.bottom;\n  }\n  \n  /**\n   * Returns the MathJax component\n   * \n   * @returns {MathJaxWrapper} the MathJax component\n   * @public\n   */\n  get mathjax() {\n    return new MathJaxWrapper(this.options, this.context).load(this.data);\n  }\n  \n  /**\n   * Sets an execution of 'unrender()' with the certain delay.\n   * \n   * @param {integer} delay - the delay in ms to call 'unrender()' function, defaults to 10000 ms\n   * @public\n   */\n  autoUnrender(delay = 10000) {\n    // destroy me after some time\n    setTimeout(() => this.unrender && this.unrender(), delay);\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/renderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 280,
    "kind": "class",
    "name": "Renderer",
    "memberof": "packages/francy-core/src/render/renderer.js",
    "static": true,
    "longname": "packages/francy-core/src/render/renderer.js~Renderer",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/renderer.js",
    "importStyle": "Renderer",
    "description": "This class represents a rendable component.\nInstances of this class must implement a {Renderer#render} method\nand optionaly an {Renderer#unrender} method.",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "BaseRenderer"
    ]
  },
  {
    "__docId__": 281,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/renderer.js~Renderer",
    "static": false,
    "longname": "packages/francy-core/src/render/renderer.js~Renderer#options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context of the application, usually a configuration and a rendering manager instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-core/src/render/renderer.js~Renderer",
    "static": false,
    "longname": "packages/francy-core/src/render/renderer.js~Renderer#element",
    "access": "public",
    "description": "Stores the element renderer",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "transitionDuration",
    "memberof": "packages/francy-core/src/render/renderer.js~Renderer",
    "static": false,
    "longname": "packages/francy-core/src/render/renderer.js~Renderer#transitionDuration",
    "access": "public",
    "description": "Stores the default animation duration",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "initialize",
    "memberof": "packages/francy-core/src/render/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/renderer.js~Renderer#initialize",
    "access": "public",
    "description": "This method is used by the decorator {Decorators.Initializer.initialize()} \nto initialize this renderer.",
    "lineNumber": 55,
    "override": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "unrender",
    "memberof": "packages/francy-core/src/render/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/renderer.js~Renderer#unrender",
    "access": "public",
    "description": "Handles component unrender",
    "lineNumber": 62,
    "params": [],
    "return": null
  },
  {
    "__docId__": 286,
    "kind": "get",
    "name": "HTMLParent",
    "memberof": "packages/francy-core/src/render/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/renderer.js~Renderer#HTMLParent",
    "access": "public",
    "description": "Return the HTML component holding this element",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} the first HTML element holding this component, otherwise the parent element whatever it is (most likely an HTML)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the first HTML element holding this component, otherwise the parent element whatever it is (most likely an HTML)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "get",
    "name": "SVGParent",
    "memberof": "packages/francy-core/src/render/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/renderer.js~Renderer#SVGParent",
    "access": "public",
    "description": "Returns the SVG element if available, otherwise the parent element whatever it is (most likely an HTML)",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} the SVG element"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the SVG element"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "get",
    "name": "HTMLCanvasParent",
    "memberof": "packages/francy-core/src/render/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/renderer.js~Renderer#HTMLCanvasParent",
    "access": "public",
    "description": "Returns the Canvas element if available, otherwise the parent element whatever it is (most likely an HTML)",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} the SVG element"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the SVG element"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "get",
    "name": "margin",
    "memberof": "packages/francy-core/src/render/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/renderer.js~Renderer#margin",
    "access": "public",
    "description": "Returns a static object containing margins",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} and object containing default margins: { top: 50, right: 50, bottom: 50, left: 50 }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "and object containing default margins: { top: 50, right: 50, bottom: 50, left: 50 }"
    },
    "type": {
      "types": [
        "{\"top\": number, \"right\": number, \"bottom\": number, \"left\": number}"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "get",
    "name": "width",
    "memberof": "packages/francy-core/src/render/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/renderer.js~Renderer#width",
    "access": "public",
    "description": "Returns the width of the parent",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} the width of the html parent"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the width of the html parent"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "get",
    "name": "height",
    "memberof": "packages/francy-core/src/render/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/renderer.js~Renderer#height",
    "access": "public",
    "description": "Returns the height of the parent",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} the height of the html parent"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the height of the html parent"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "get",
    "name": "mathjax",
    "memberof": "packages/francy-core/src/render/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/renderer.js~Renderer#mathjax",
    "access": "public",
    "description": "Returns the MathJax component",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathJaxWrapper} the MathJax component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathJaxWrapper"
      ],
      "spread": false,
      "description": "the MathJax component"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "autoUnrender",
    "memberof": "packages/francy-core/src/render/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/renderer.js~Renderer#autoUnrender",
    "access": "public",
    "description": "Sets an execution of 'unrender()' with the certain delay.",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "delay",
        "description": "the delay in ms to call 'unrender()' function, defaults to 10000 ms"
      }
    ],
    "return": null
  },
  {
    "__docId__": 294,
    "kind": "file",
    "name": "packages/francy-core/src/render/rendering-configuration.js",
    "content": "/**\n * This class shall be extended by every {Renderer} entrypoint.\n * It provides a configuration to be registered withi {RenderingManager}.\n * \n * @public\n */\nexport default class RenderingConfiguration {\n  /**\n   * Creates the configuration for this renderer\n   * \n   * @param {class} renderer.renderer - this is renderer class.\n   * @param {string} renderer.name - this is renderer name.\n   * @param {boolean} renderer.enable - this is property to specify whether the renderer is active or not.\n   * @public\n   */\n  constructor(renderer, name, enable = false) {\n    /** \n    * The renderer configuration object\n    * \n    * @typedef {Object} configuration\n    * @property {Renderer} renderer a {Renderer} instance\n    * @property {string} name a name for the renderer\n    * @property {boolean} enable if this renderer is enabled by default\n    */\n    this.configuration = {\n      renderer: renderer,\n      name: name,\n      enable: enable\n    };\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/rendering-configuration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 295,
    "kind": "class",
    "name": "RenderingConfiguration",
    "memberof": "packages/francy-core/src/render/rendering-configuration.js",
    "static": true,
    "longname": "packages/francy-core/src/render/rendering-configuration.js~RenderingConfiguration",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/rendering-configuration.js",
    "importStyle": "RenderingConfiguration",
    "description": "This class shall be extended by every {Renderer} entrypoint.\nIt provides a configuration to be registered withi {RenderingManager}.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 296,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-core/src/render/rendering-configuration.js~RenderingConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/rendering-configuration.js~RenderingConfiguration#constructor",
    "access": "public",
    "description": "Creates the configuration for this renderer",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "class"
        ],
        "spread": false,
        "optional": false,
        "name": "renderer.renderer",
        "description": "this is renderer class."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "renderer.name",
        "description": "this is renderer name."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "renderer.enable",
        "description": "this is property to specify whether the renderer is active or not."
      }
    ]
  },
  {
    "__docId__": 297,
    "kind": "typedef",
    "name": "configuration",
    "memberof": "packages/francy-core/src/render/rendering-configuration.js~RenderingConfiguration",
    "static": true,
    "longname": "packages/francy-core/src/render/rendering-configuration.js~RenderingConfiguration.configuration",
    "access": "public",
    "description": "The renderer configuration object",
    "lineNumber": 25,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Renderer"
        ],
        "spread": false,
        "optional": false,
        "name": "renderer",
        "description": "a {Renderer} instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "a name for the renderer"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enable",
        "description": "if this renderer is enabled by default"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "configuration"
    }
  },
  {
    "__docId__": 298,
    "kind": "file",
    "name": "packages/francy-core/src/render/rendering-manager.js",
    "content": "import { Logger } from '../util/logger';\nimport Observable from '../util/observable';\nimport { RuntimeException } from '../util/exception';\nimport { Utilities } from '../util/utilities';\n\n/**\n * This class implements all the methods to handle multiple renderers on {Francy}.\n * \n * {RenderingManager} is a singleton that can be accessed to register and unregister a {Renderer}.\n * Only onde renderer is active at a time.\n * \n * {RenderingManager} will notify any subscribed methods when a supported events {RENDERING_EVENTS} occur.\n * \n * @example RenderingManager.subscribe(RENDERING_EVENTS.REGISTER, objectChanged => {}); \n * @example Francy.RenderingManager.register(new D3Renderer());\n * @example Francy.RenderingManager.unregister('D3Renderer');\n * @example Francy.RenderingManager.enable('D3Renderer');\n * @example Francy.RenderingManager.allRenderers();\n * @example Francy.RenderingManager.activeRenderer();\n * \n * @extends {Observable}\n */\nexport default class RenderingManagerHandler extends Observable {\n\n  /**\n   * Default Constructor\n   */\n  constructor(context) {\n    super();\n    this.context = context;\n    // this only adds if does not exist\n    this.context.configuration.addProperty('renderers', {});\n  }\n\n  /**\n   * This method is used to register a renderer within {Francy}.\n   * \n   * @returns {object} this instance\n   * @public\n   */\n  register(clazz) {\n    if (!clazz || !clazz.configuration || !clazz.configuration.name || !clazz.configuration.renderer) {\n      throw new RuntimeException('Not a valid renderer!');\n    } else if (clazz.configuration.name && !(clazz.configuration.name in this.context.configuration.object.renderers)) {\n      clazz.configuration.enable = clazz.configuration.enable || false;\n      Logger.debug(`(${this.context.instanceId}) Registering Renderer: ${clazz.configuration.name}`);\n      this.context.configuration.object.renderers[clazz.configuration.name] = { \n        enable: false, \n        renderer: clazz.configuration.renderer, \n        name: clazz.configuration.name, \n        id: Utilities.generateId()\n      };\n      this.notify(RENDERING_EVENTS.REGISTER, this.context.configuration.object.renderers[clazz.configuration.name]);\n      if (clazz.configuration.enable) {\n        this.enable(clazz.configuration.name);\n      }\n    } else {\n      // update the renderer has this does not get serialized\n      this.context.configuration.object.renderers[clazz.configuration.name].renderer = clazz.configuration.renderer;\n    }\n    return this;\n  }\n\n  /**\n   * This method is used to unregister a renderer.\n   * \n   * @param {string} name - the name of the renderer\n   * @returns {object} this instance\n   * @public\n   */\n  unregister(name) {\n    if (name) {\n      Logger.debug(`(${this.context.instanceId}) Unregistering Renderer: ${name}`);\n      this.notify(RENDERING_EVENTS.UNREGISTER, this.context.configuration.object.renderers[name]);\n      delete this.context.configuration.object.renderers[name];\n    }\n    return this;\n  }\n\n  /**\n   * This method is used to enable a renderer. Only one renderer is enabled \n   * at a time, so the previous enabled renderer will be set to disabled.\n   * \n   * @param {string} name - the name of the renderer\n   * @returns {object} this instance\n   * @public\n   */\n  enable(name) {\n    if (name) {\n      Logger.info(`(${this.context.instanceId}) Enabling Renderer: ${name}`);\n      for (let prop in this.context.configuration.object.renderers) {\n        let previous = this.context.configuration.object.renderers[prop].enable;\n        let current = name === prop;\n        if (previous !== current) {\n          this.context.configuration.object.renderers[prop].enable = current;\n          this.notify(RENDERING_EVENTS.STATUS, this.context.configuration.object.renderers[prop]);\n        }\n      }\n    }\n    return this;\n  }\n\n  /**\n   * This method returns all the renderers registered\n   * \n   * @return {object} the renderers dictionary\n   * @public\n   */\n  allRenderers() {\n    return this.context.configuration.object.renderers;\n  }\n\n  /**\n   * This method returns the current active renderer.\n   * \n   * @return {string} the renderer name\n   * @public\n   */\n  activeRenderer() {\n    let r = this.context.configuration.object.renderers[Object.keys(this.context.configuration.object.renderers[0])];\n    for (let prop in this.context.configuration.object.renderers) {\n      if (this.context.configuration.object.renderers[prop].enable) {\n        r = this.context.configuration.object.renderers[prop];\n        break;\n      }\n    }\n    if (!r.renderer) {\n      throw new RuntimeException('No renderers registered!');\n    }\n    Logger.debug(`(${this.context.instanceId}) Active Renderer: ${r.name}`);\n    return r.renderer;\n  }\n}\n/**\n * The events supported by {RenderingManager}.\n * @public\n */\nexport const RENDERING_EVENTS = { REGISTER: 'REGISTER', UNREGISTER: 'UNREGISTER', STATUS: 'STATUS' };\n/**\n * The {RenderingManager} singleton\n * @public\n */\n//export const RenderingManager = new RenderingManagerHandler();\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/rendering-manager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 299,
    "kind": "class",
    "name": "RenderingManagerHandler",
    "memberof": "packages/francy-core/src/render/rendering-manager.js",
    "static": true,
    "longname": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/rendering-manager.js",
    "importStyle": "RenderingManagerHandler",
    "description": "This class implements all the methods to handle multiple renderers on {Francy}.\n\n{RenderingManager} is a singleton that can be accessed to register and unregister a {Renderer}.\nOnly onde renderer is active at a time.\n\n{RenderingManager} will notify any subscribed methods when a supported events {RENDERING_EVENTS} occur.",
    "examples": [
      "RenderingManager.subscribe(RENDERING_EVENTS.REGISTER, objectChanged => {}); ",
      "Francy.RenderingManager.register(new D3Renderer());",
      "Francy.RenderingManager.unregister('D3Renderer');",
      "Francy.RenderingManager.enable('D3Renderer');",
      "Francy.RenderingManager.allRenderers();",
      "Francy.RenderingManager.activeRenderer();"
    ],
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "Observable"
    ]
  },
  {
    "__docId__": 300,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler#constructor",
    "access": "public",
    "description": "Default Constructor",
    "lineNumber": 28
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "context",
    "memberof": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler",
    "static": false,
    "longname": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler#context",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "register",
    "memberof": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler#register",
    "access": "public",
    "description": "This method is used to register a renderer within {Francy}.",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} this instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "this instance"
    },
    "params": [
      {
        "name": "clazz",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "unregister",
    "memberof": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler#unregister",
    "access": "public",
    "description": "This method is used to unregister a renderer.",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} this instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name of the renderer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "this instance"
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "enable",
    "memberof": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler#enable",
    "access": "public",
    "description": "This method is used to enable a renderer. Only one renderer is enabled \nat a time, so the previous enabled renderer will be set to disabled.",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} this instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name of the renderer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "this instance"
    }
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "allRenderers",
    "memberof": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler#allRenderers",
    "access": "public",
    "description": "This method returns all the renderers registered",
    "lineNumber": 109,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the renderers dictionary"
    },
    "params": []
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "activeRenderer",
    "memberof": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/rendering-manager.js~RenderingManagerHandler#activeRenderer",
    "access": "public",
    "description": "This method returns the current active renderer.",
    "lineNumber": 119,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the renderer name"
    },
    "params": []
  },
  {
    "__docId__": 307,
    "kind": "variable",
    "name": "RENDERING_EVENTS",
    "memberof": "packages/francy-core/src/render/rendering-manager.js",
    "static": true,
    "longname": "packages/francy-core/src/render/rendering-manager.js~RENDERING_EVENTS",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/rendering-manager.js",
    "importStyle": "{RENDERING_EVENTS}",
    "description": "The events supported by {RenderingManager}.",
    "lineNumber": 138,
    "type": {
      "types": [
        "{\"REGISTER\": string, \"UNREGISTER\": string, \"STATUS\": string}"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "file",
    "name": "packages/francy-core/src/render/tooltip.js",
    "content": "import { Decorators } from '../decorator/factory';\nimport Renderer from './renderer';\n\n/**\n * Implements a Tooltip.\n * \n * This component shows a tooltip containing a set of messages.\n * \n * @extends {Renderer}\n */\nexport default class Tooltip extends Renderer {\n\n  /**\n   * Base constructor\n   * \n   * @typedef {Object} options\n   * @property {Boolean} options.appendTo - where the generated html/svg components will be attached to, default body\n   * @property {Function} options.callbackHandler - this handler will be used to invoke actions from the menu, default console.log\n   * @param {Object} context - the context of the application, usually a configuration and a rendering manager instance\n   */\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  /**\n   * This method is used to render this component\n   * \n   * @public\n   */\n  @Decorators.Data.requires('messages')\n  async render() {\n\n    this.element = this.HTMLParent.select('div.francy-tooltip-holder');\n    // check if the window is already present\n    if (!this.element.node()) {\n      this.element = this.HTMLParent.append('div')\n        .attr('class', 'francy-tooltip-holder');\n    }\n\n    // check if it exists already\n    if (this.element.selectAll('*').node()) return;\n\n    let position = this._mousePosition();\n\n    // TODO this won't be visible all the times, fine until someone complains about :P\n    this.element.style('left', (position[0] + 15) + 'px').style('top', (position[1] - 15) + 'px');\n\n    let table = this.element.append('div').attr('class', 'francy-tooltip')\n      .append('div').attr('class', 'francy-table')\n      .append('div').attr('class', 'francy-table-body');\n\n    Object.keys(this.data.messages).map((key) => {\n      let row = table.append('div').attr('class', 'francy-table-row');\n      row.append('div').attr('class', 'francy-table-cell').text(this.data.messages[key].title);\n      row.append('div').attr('class', 'francy-table-cell').text(this.data.messages[key].text);\n    });\n\n    // show tooltip\n    this.element.style('display', 'block');\n    \n    // destroy me after default delay\n    this.autoUnrender();\n\n    return this;\n  }\n\n  /**\n   * This method is used to destroy this component\n   * \n   * @public\n   */\n  unrender() {  \n    if (this.element) {\n      this.element.selectAll('*').remove();\n      this.element.style('display', null);\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/render/tooltip.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "class",
    "name": "Tooltip",
    "memberof": "packages/francy-core/src/render/tooltip.js",
    "static": true,
    "longname": "packages/francy-core/src/render/tooltip.js~Tooltip",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/render/tooltip.js",
    "importStyle": "Tooltip",
    "description": "Implements a Tooltip.\n\nThis component shows a tooltip containing a set of messages.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "Renderer"
    ]
  },
  {
    "__docId__": 310,
    "kind": "typedef",
    "name": "options",
    "memberof": "packages/francy-core/src/render/tooltip.js~Tooltip",
    "static": false,
    "longname": "packages/francy-core/src/render/tooltip.js~Tooltip#options",
    "access": "public",
    "description": "Base constructor",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context of the application, usually a configuration and a rendering manager instance"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.appendTo",
        "description": "where the generated html/svg components will be attached to, default body"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callbackHandler",
        "description": "this handler will be used to invoke actions from the menu, default console.log"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "options"
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-core/src/render/tooltip.js~Tooltip",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-core/src/render/tooltip.js~Tooltip#render",
    "access": "public",
    "description": "This method is used to render this component",
    "lineNumber": 31,
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('messages')"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-core/src/render/tooltip.js~Tooltip",
    "static": false,
    "longname": "packages/francy-core/src/render/tooltip.js~Tooltip#element",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "unrender",
    "memberof": "packages/francy-core/src/render/tooltip.js~Tooltip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/render/tooltip.js~Tooltip#unrender",
    "access": "public",
    "description": "This method is used to destroy this component",
    "lineNumber": 72,
    "params": [],
    "return": null
  },
  {
    "__docId__": 315,
    "kind": "file",
    "name": "packages/francy-core/src/util/configuration.js",
    "content": "import Observable from './observable';\nimport { Utilities } from './utilities';\n\n/**\n * This class provides the application configuration.\n * It extends the {Observable} class providing methods to subscribe on changes.\n * \n * @extends {Observable}\n */\nexport default class ConfigurationHandler extends Observable {\n  /**\n   * Creates a instance of ModelTracker.\n   * \n   * @param {object} object - the object object to keep track of changes.\n   * @param {object} config\n   * @param {number} config.throttle - the interval for storing dirty data\n   */\n  constructor(object, { throttle = 5000, backend = BACKEND.NONE } = {}) {\n    super();\n    /**\n     * This is property is used to flag when the object changes.\n     * @type {boolean}\n     * @private\n     */\n    this._localDirty = false;\n    /**\n     * This is property is used to flag when the object changes in the store.\n     * @type {boolean}\n     * @private\n     */\n    this._storageDirty = false;\n    /**\n     * The interval time to check and store changes\n     * @private\n     */\n    this._throttle = throttle;\n    /**\n     * The backend to be used\n     * @private\n     */\n    this._backend = backend;\n    // load configuration object\n    this._load(object);\n  }\n  \n  /**\n   * This loads the configuration object\n   * @type function\n   * @private\n   */\n  _load(object) {\n    if (this._backend) {\n      let objectStored = this._backend.getItem(SETTINGS_KEY);\n      if (!objectStored) {\n        this._localDirty = true;\n      } else {\n        object = Object.assign(object, JSON.parse(objectStored));\n      }\n      /**\n       * Sync listeners every second, if data is dirty\n       * @type {setInterval}\n       * @private\n       */\n      setInterval(() => {\n        this._syncPull();\n        this._syncPush();\n        return;\n      }, this._throttle);\n    }\n    /**\n     * This is property holds a proxy that handles a dirty flag when object changes.\n     * @type {Proxy}\n     * @private\n     */\n    this._proxy = new Proxy(object, this);\n  }\n\n  /**\n   * This method is used by the proxy to set a property when a change occurs, plus it sets the current object to dirty.\n   * @param {object} object - the object being tracked\n   * @param {object} property - the property changed\n   * @param {object} value - the new value\n   * @public\n   */\n  set(object, property, value) {\n    if (object[property] !== value) {\n      object[property] = value;\n      this.notify(property, value);\n      this._localDirty = true;\n    }\n    return true;\n  }\n\n  /**\n   * This method is used by the proxy to get the object being tracked\n   * @param {object} target - the object being tracked\n   * @param {object} property - the object property\n   * @returns {object} returns the object being tracked\n   * @public\n   */\n  get(target, property) {\n    if (typeof target[property] === 'object' && target[property] !== null) {\n      return new Proxy(target[property], this);\n    }\n    return property in target ? target[property] : target;\n  }\n  \n  /**\n   * This method is used by the proxy to checkif the object has a property\n   * @param {object} target - the object being tracked\n   * @param {object} key - the object property\n   * @returns {boolean} returns true if the property exists, otherwise false\n   * @public\n   */\n  has(target, key) {\n    if (key[0] === '_') {\n      return false;\n    }\n    return key in target;\n  }\n\n  /**\n   * Returns the object being tracked (proxy)\n   * @returns {object} the object properties\n   * @public\n   */\n  get object() {\n    return this._proxy;\n  }\n\n  /**\n  * Adds a new configuration property\n  * \n  * @param {string} property - the configuration property name\n  * @param {Object} value - the configuration property value\n  * @returns {object} this instance\n  * @public \n  */\n  addProperty(property, value) {\n    if (!this.hasProperty(property)) {\n      Object.defineProperty(this.object, property, {\n        value: value,\n        writable: true,\n        enumerable: true,\n        configurable: true\n      });\n      this._localDirty = true;\n    }\n    return this;\n  }\n  \n  /**\n  * Checks if a configuration property exists. Returns true if it exists, otherwise false.\n  * \n  * @param {string} name - the configuration property name\n  * @returns {boolean} returns true if the property exists, otherwise false\n  * @public \n   */\n  hasProperty(name) {\n    return name in this.object;\n  }\n\n  /**\n   * This method is used to explicitly sync the module with all the subscribers\n   * @private\n   */\n  _syncPush() {\n    if (this._localDirty && !this._storageDirty) {\n      this._backend.setItem(SETTINGS_KEY, JSON.stringify(this.object));\n    }\n  }\n  \n  /**\n   * This method is used to explicitly sync the current object from the storage\n   * @private\n   */\n  _syncPull() {\n    if (!this._localDirty) {\n    // check for changes and load them\n      let item = this._backend.getItem(SETTINGS_KEY);\n      if (item) {\n        let obj = Object.assign({}, JSON.parse(item));\n        let diffs = Utilities.getDifferences(obj, this.object);\n        if (diffs.length > 0) {\n          this._storageDirty = true;\n          diffs.forEach((key) => {\n            this.object[key] = obj[key];\n          });\n          this._localDirty = false;\n          this._storageDirty = false;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Settings key to be stored in the local/session storage\n * @private\n */\nconst SETTINGS_KEY = 'francy.settings';\n\n/**\n * The minimal default {Configuration} object singleton\n * @public\n */\nexport const DefaultConfiguration = {\n  showNeighbours: true,\n  dragNodes: true,\n  simulation: true\n};\n\n/**\n * The list of backends supported\n * @public\n */\nexport const BACKEND = {\n  SESSION: window.sessionStorage,\n  LOCAL: window.localStorage,\n  NONE: undefined\n};\n\n/**\n * The global {Configuration} singleton\n * @public\n */\nexport const GlobalConfiguration = new ConfigurationHandler({\n  verbose: false,\n  transitionDuration: 750, //ms\n  fixedRandomSeed: true,\n}, {\n  throttle: 5000,\n  backend: BACKEND.LOCAL\n});\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/util/configuration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 316,
    "kind": "class",
    "name": "ConfigurationHandler",
    "memberof": "packages/francy-core/src/util/configuration.js",
    "static": true,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/util/configuration.js",
    "importStyle": "ConfigurationHandler",
    "description": "This class provides the application configuration.\nIt extends the {Observable} class providing methods to subscribe on changes.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "Observable"
    ]
  },
  {
    "__docId__": 317,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#constructor",
    "access": "public",
    "description": "Creates a instance of ModelTracker.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "the object object to keep track of changes."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "config.throttle",
        "description": "the interval for storing dirty data"
      }
    ]
  },
  {
    "__docId__": 318,
    "kind": "member",
    "name": "_localDirty",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#_localDirty",
    "access": "private",
    "description": "This is property is used to flag when the object changes.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 319,
    "kind": "member",
    "name": "_storageDirty",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#_storageDirty",
    "access": "private",
    "description": "This is property is used to flag when the object changes in the store.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 320,
    "kind": "member",
    "name": "_throttle",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#_throttle",
    "access": "private",
    "description": "The interval time to check and store changes",
    "lineNumber": 36,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "member",
    "name": "_backend",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#_backend",
    "access": "private",
    "description": "The backend to be used",
    "lineNumber": 41,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "_load",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#_load",
    "access": "private",
    "description": "This loads the configuration object",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    },
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "_proxy",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#_proxy",
    "access": "private",
    "description": "This is property holds a proxy that handles a dirty flag when object changes.",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "Proxy"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "set",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#set",
    "access": "public",
    "description": "This method is used by the proxy to set a property when a change occurs, plus it sets the current object to dirty.",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "the object being tracked"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "the property changed"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the new value"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "get",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#get",
    "access": "public",
    "description": "This method is used by the proxy to get the object being tracked",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} returns the object being tracked"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "the object being tracked"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "the object property"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "returns the object being tracked"
    }
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "has",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#has",
    "access": "public",
    "description": "This method is used by the proxy to checkif the object has a property",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} returns true if the property exists, otherwise false"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "the object being tracked"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "the object property"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "returns true if the property exists, otherwise false"
    }
  },
  {
    "__docId__": 329,
    "kind": "get",
    "name": "object",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#object",
    "access": "public",
    "description": "Returns the object being tracked (proxy)",
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} the object properties"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the object properties"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "addProperty",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#addProperty",
    "access": "public",
    "description": "Adds a new configuration property",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} this instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "the configuration property name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the configuration property value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "this instance"
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "hasProperty",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#hasProperty",
    "access": "public",
    "description": "Checks if a configuration property exists. Returns true if it exists, otherwise false.",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} returns true if the property exists, otherwise false"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the configuration property name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "returns true if the property exists, otherwise false"
    }
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "_syncPush",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#_syncPush",
    "access": "private",
    "description": "This method is used to explicitly sync the module with all the subscribers",
    "lineNumber": 167,
    "params": [],
    "return": null
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "_syncPull",
    "memberof": "packages/francy-core/src/util/configuration.js~ConfigurationHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/configuration.js~ConfigurationHandler#_syncPull",
    "access": "private",
    "description": "This method is used to explicitly sync the current object from the storage",
    "lineNumber": 177,
    "params": [],
    "return": null
  },
  {
    "__docId__": 338,
    "kind": "variable",
    "name": "SETTINGS_KEY",
    "memberof": "packages/francy-core/src/util/configuration.js",
    "static": true,
    "longname": "packages/francy-core/src/util/configuration.js~SETTINGS_KEY",
    "access": "private",
    "export": false,
    "importPath": "francy-js/packages/francy-core/src/util/configuration.js",
    "importStyle": null,
    "description": "Settings key to be stored in the local/session storage",
    "lineNumber": 201,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 339,
    "kind": "variable",
    "name": "DefaultConfiguration",
    "memberof": "packages/francy-core/src/util/configuration.js",
    "static": true,
    "longname": "packages/francy-core/src/util/configuration.js~DefaultConfiguration",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/util/configuration.js",
    "importStyle": "{DefaultConfiguration}",
    "description": "The minimal default {Configuration} object singleton",
    "lineNumber": 207,
    "type": {
      "types": [
        "{\"showNeighbours\": boolean, \"dragNodes\": boolean, \"simulation\": boolean}"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "variable",
    "name": "BACKEND",
    "memberof": "packages/francy-core/src/util/configuration.js",
    "static": true,
    "longname": "packages/francy-core/src/util/configuration.js~BACKEND",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/util/configuration.js",
    "importStyle": "{BACKEND}",
    "description": "The list of backends supported",
    "lineNumber": 217,
    "type": {
      "types": [
        "{\"SESSION\": *, \"LOCAL\": *, \"NONE\": *}"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "variable",
    "name": "GlobalConfiguration",
    "memberof": "packages/francy-core/src/util/configuration.js",
    "static": true,
    "longname": "packages/francy-core/src/util/configuration.js~GlobalConfiguration",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/util/configuration.js",
    "importStyle": "{GlobalConfiguration}",
    "description": "The global {Configuration} singleton",
    "lineNumber": 227,
    "type": {
      "types": [
        "packages/francy-core/src/util/configuration.js~ConfigurationHandler"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "file",
    "name": "packages/francy-core/src/util/data-handler.js",
    "content": "import JsonUtils from './json';\nimport { Logger } from './logger';\n\n/* global VERSION */\n\n/**\n * This class provides utility methods to handle and store data.\n */\nexport default class DataHandler {\n\n  /**\n   * Default Constructor\n   */\n  constructor() {\n    /**\n     * Stores the data object\n     * @type {object}\n     */\n    this.data = undefined;\n    /**\n     * If the Francy GAP version is different from the JS version this flag stores if the user has been informed once.\n     * @type {boolean}\n     */\n    this.alertOnDataVersion = false;\n  }\n\n  /**\n   * Loads and stores data if valid\n   *\n   * @param {string} json - a francy valid json\n   * @param {boolean} partial - set this to true if the json is not a complete francy json object\n   * @returns {object} this instance\n   * @public\n   */\n  load(json, partial) {\n    let data = JsonUtils.parse(json, partial);\n    if (data) {\n      this.data = data;\n      if (!partial && !this.alertOnDataVersion && this.data.version !== VERSION) {\n        this.alertOnDataVersion = true;\n        Logger.warn(`Data was generated in Francy GAP v${this.data.version} and you're using Francy JS v${VERSION}... Rendering may fail, please update your system...`);\n      }\n    }data;\n    return this;\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/util/data-handler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 343,
    "kind": "class",
    "name": "DataHandler",
    "memberof": "packages/francy-core/src/util/data-handler.js",
    "static": true,
    "longname": "packages/francy-core/src/util/data-handler.js~DataHandler",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/util/data-handler.js",
    "importStyle": "DataHandler",
    "description": "This class provides utility methods to handle and store data.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 344,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-core/src/util/data-handler.js~DataHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/data-handler.js~DataHandler#constructor",
    "access": "public",
    "description": "Default Constructor",
    "lineNumber": 14
  },
  {
    "__docId__": 345,
    "kind": "member",
    "name": "data",
    "memberof": "packages/francy-core/src/util/data-handler.js~DataHandler",
    "static": false,
    "longname": "packages/francy-core/src/util/data-handler.js~DataHandler#data",
    "access": "public",
    "description": "Stores the data object",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "alertOnDataVersion",
    "memberof": "packages/francy-core/src/util/data-handler.js~DataHandler",
    "static": false,
    "longname": "packages/francy-core/src/util/data-handler.js~DataHandler#alertOnDataVersion",
    "access": "public",
    "description": "If the Francy GAP version is different from the JS version this flag stores if the user has been informed once.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "load",
    "memberof": "packages/francy-core/src/util/data-handler.js~DataHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/data-handler.js~DataHandler#load",
    "access": "public",
    "description": "Loads and stores data if valid",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} this instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "a francy valid json"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "partial",
        "description": "set this to true if the json is not a complete francy json object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "this instance"
    }
  },
  {
    "__docId__": 350,
    "kind": "file",
    "name": "packages/francy-core/src/util/exception.js",
    "content": "/**\n * This class provides a subclass of {Error} to provide functionality on recoverable errors.\n * \n * @extends {Error}\n */\nexport class Exception extends Error {\n  /**\n   * Default Constructor\n   */\n  constructor(message) {\n    super(message);\n  }\n}\n\n/**\n * This class provides a subclass of {Error} to provide functionality on non recoverable errors.\n * \n * @extends {Error}\n */\nexport class RuntimeException extends Error {\n  /**\n   * Default Constructor\n   */\n  constructor(message) {\n    super(message);\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/util/exception.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 351,
    "kind": "class",
    "name": "Exception",
    "memberof": "packages/francy-core/src/util/exception.js",
    "static": true,
    "longname": "packages/francy-core/src/util/exception.js~Exception",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/util/exception.js",
    "importStyle": "{Exception}",
    "description": "This class provides a subclass of {Error} to provide functionality on recoverable errors.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 352,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-core/src/util/exception.js~Exception",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/exception.js~Exception#constructor",
    "access": "public",
    "description": "Default Constructor",
    "lineNumber": 10
  },
  {
    "__docId__": 353,
    "kind": "class",
    "name": "RuntimeException",
    "memberof": "packages/francy-core/src/util/exception.js",
    "static": true,
    "longname": "packages/francy-core/src/util/exception.js~RuntimeException",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/util/exception.js",
    "importStyle": "{RuntimeException}",
    "description": "This class provides a subclass of {Error} to provide functionality on non recoverable errors.",
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 354,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-core/src/util/exception.js~RuntimeException",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/exception.js~RuntimeException#constructor",
    "access": "public",
    "description": "Default Constructor",
    "lineNumber": 24
  },
  {
    "__docId__": 355,
    "kind": "file",
    "name": "packages/francy-core/src/util/json.js",
    "content": "/**\n * This class contains methods to handle this application JSON data.\n */\nexport default class JsonUtils {\n\n  /**\n   * Parses an input, checks whether this input is valid and returns a JSON object.\n   * \n   * @param input - the input to parse\n   * @param partial - if the input is not a complete Francy JSON Object, defaults to false\n   * @returns {json} - if the input is a valid JSON object, otherwise returns {undefined}\n   */\n  static parse(input, partial = false) {\n    if (!input) return;\n    if (typeof input === 'string') {\n      input = input.replace(/[\\n\\r\\b]+|(gap>)/g, '');\n      let jsonRegex = /{(?:[^])*}/g;\n      let match = jsonRegex.exec(input);\n      if (!match) return;\n      input = JSON.parse(match[0]);\n    }\n    return input.mime === JsonUtils.MIME || partial ? input : undefined;\n  }\n\n  /**\n   * Returns a static string representing the mime type supported by this package\n   * \n   * @returns {string} constant string 'application/vnd.francy+json'\n   */\n  static get MIME() {\n    return 'application/vnd.francy+json';\n  }\n}\n\nexport const MIME = JsonUtils.MIME;",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/util/json.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 356,
    "kind": "class",
    "name": "JsonUtils",
    "memberof": "packages/francy-core/src/util/json.js",
    "static": true,
    "longname": "packages/francy-core/src/util/json.js~JsonUtils",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/util/json.js",
    "importStyle": "JsonUtils",
    "description": "This class contains methods to handle this application JSON data.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "parse",
    "memberof": "packages/francy-core/src/util/json.js~JsonUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/util/json.js~JsonUtils.parse",
    "access": "public",
    "description": "Parses an input, checks whether this input is valid and returns a JSON object.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{json} - if the input is a valid JSON object, otherwise returns {undefined}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "the input to parse"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "partial",
        "description": "if the input is not a complete Francy JSON Object, defaults to false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "json"
      ],
      "spread": false,
      "description": "if the input is a valid JSON object, otherwise returns {undefined}"
    }
  },
  {
    "__docId__": 358,
    "kind": "get",
    "name": "MIME",
    "memberof": "packages/francy-core/src/util/json.js~JsonUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/util/json.js~JsonUtils.MIME",
    "access": "public",
    "description": "Returns a static string representing the mime type supported by this package",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} constant string 'application/vnd.francy+json'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "constant string 'application/vnd.francy+json'"
    },
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "variable",
    "name": "MIME",
    "memberof": "packages/francy-core/src/util/json.js",
    "static": true,
    "longname": "packages/francy-core/src/util/json.js~MIME",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/util/json.js",
    "importStyle": "{MIME}",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "file",
    "name": "packages/francy-core/src/util/logger.js",
    "content": "import { GlobalConfiguration } from './configuration';\n\n/**\n * This class provides a logger for the Francy application.\n */\nclass Log {\n\n  /**\n   * Logger constructor\n   * @param verbose prints extra log information to console.log, defaults to false\n   */\n  constructor() {\n    /**\n     * Stores the browser console function\n     * @type {function}\n     */\n    this.console = console;\n  }\n\n  /**\n   * Creates a [DEBUG] entry in the console log\n   * @param message the message to print\n   */\n  debug(message, object) {\n    if (GlobalConfiguration.object.verbose) {\n      if (object) {\n        this.console.debug(Log._format('D', message), object);\n      } else {\n        this.console.debug(Log._format('D', message));\n      }\n    }\n  }\n  \n  /**\n   * Creates an [INFO] entry in the console log\n   * @param message the message to print\n   */\n  info(message, object) {\n    if (object) {\n      this.console.info(Log._format('I', message), object);\n    } else {\n      this.console.info(Log._format('I', message));\n    }\n  }\n\n  /**\n   * Creates an [ERROR] entry in the console log\n   * @param message the message to print\n   * @param error the error Object to attach to the message\n   */\n  error(message, object) {\n    if (object) {\n      this.console.error(Log._format('E', message), object);\n    } else {\n      this.console.error(Log._format('E', message));\n    }\n  }\n\n  /**\n   * Creates a [WARN] entry in the console log\n   * @param message the message to print\n   * @param error the error Object to attach to the message\n   */\n  warn(message, object) {\n    if (object) {\n      this.console.info(Log._format('W', message), object);\n    } else {\n      this.console.info(Log._format('W', message));\n    }\n  }\n\n  /**\n   * This is a private method that formats all log messages\n   * @param level the log level\n   * @param message the message to print\n   * @return {string} the formatted string\n   * @private\n   */\n  static _format(level, message) {\n    return `[${level} ${new Date().toISOString()}] - ${message}`;\n  }\n}\n\n/**\n * The {Logger} singleton\n * @public\n */\nexport const Logger = new Log();\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/util/logger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 361,
    "kind": "variable",
    "name": "Logger",
    "memberof": "packages/francy-core/src/util/logger.js",
    "static": true,
    "longname": "packages/francy-core/src/util/logger.js~Logger",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/util/logger.js",
    "importStyle": "{Logger}",
    "description": "The {Logger} singleton",
    "lineNumber": 88,
    "type": {
      "types": [
        "packages/francy-core/src/util/logger.js~Log"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "class",
    "name": "Log",
    "memberof": "packages/francy-core/src/util/logger.js",
    "static": true,
    "longname": "packages/francy-core/src/util/logger.js~Log",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/util/logger.js",
    "importStyle": null,
    "description": "This class provides a logger for the Francy application.",
    "lineNumber": 6,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 363,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-core/src/util/logger.js~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/logger.js~Log#constructor",
    "access": "public",
    "description": "Logger constructor",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "verbose",
        "description": "prints extra log information to console.log, defaults to false"
      }
    ]
  },
  {
    "__docId__": 364,
    "kind": "member",
    "name": "console",
    "memberof": "packages/francy-core/src/util/logger.js~Log",
    "static": false,
    "longname": "packages/francy-core/src/util/logger.js~Log#console",
    "access": "public",
    "description": "Stores the browser console function",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "debug",
    "memberof": "packages/francy-core/src/util/logger.js~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/logger.js~Log#debug",
    "access": "public",
    "description": "Creates a [DEBUG] entry in the console log",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "the message to print"
      }
    ],
    "return": null
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "info",
    "memberof": "packages/francy-core/src/util/logger.js~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/logger.js~Log#info",
    "access": "public",
    "description": "Creates an [INFO] entry in the console log",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "the message to print"
      }
    ],
    "return": null
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "error",
    "memberof": "packages/francy-core/src/util/logger.js~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/logger.js~Log#error",
    "access": "public",
    "description": "Creates an [ERROR] entry in the console log",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "the message to print"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "the error Object to attach to the message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "warn",
    "memberof": "packages/francy-core/src/util/logger.js~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/logger.js~Log#warn",
    "access": "public",
    "description": "Creates a [WARN] entry in the console log",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "the message to print"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "the error Object to attach to the message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "_format",
    "memberof": "packages/francy-core/src/util/logger.js~Log",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-core/src/util/logger.js~Log._format",
    "access": "private",
    "description": "This is a private method that formats all log messages",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "level",
        "description": "the log level"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "the message to print"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the formatted string"
    }
  },
  {
    "__docId__": 370,
    "kind": "file",
    "name": "packages/francy-core/src/util/observable.js",
    "content": "import { Utilities } from './utilities';\n\n/**\n * This {Observable} class contains the utility methods for implementing the Observer Pattern.\n */\nexport default class Observable {\n  /**\n   * Creates a instance of ModelTracker.\n   * @param {object} object - the object object to keep track of changes.\n   * @param verbose\n   * @param throttle\n   */\n  constructor() {\n    /**\n     * This is property holds a list of change subscribers.\n     * @type {function}\n     * @private\n     */\n    this._subscribers = {};\n  }\n\n  /**\n   * This method is used register a function that is invoked to sync the object\n   * @param {string} property - the property to subscribe to\n   * @param {function} fn - the function to execute - must handle one arg, the object, of type {Object}\n   * @public\n   */\n  subscribe(property, fn, id) {\n    if (!id) {\n      throw new Error('ID is mandatory');\n    }\n    this._subscribers[id] = { property: property, fn: fn };\n  }\n\n  /**\n   * This method is used to unregister a function registered previously\n   * @param {string} property - the property to unsubscribe to\n   * @param {function} fn - the function to execute - must handle one arg, the object, of type {Object}\n   * @public\n   */\n  unsubscribe(id) {\n    if (!id) {\n      throw new Error('ID is mandatory');\n    }\n    delete this._subscribers[id];\n  }\n\n  /**\n   * This method is used to unregister all functions registered previously\n   * @public\n   */\n  unsubscribeAll() {\n    this._subscribers = [];\n  }\n\n  /**\n   * This method is used to notify all subscribers of a change\n   * @param {string} property - the property to notify subscribers subscribed to\n   * @param {Object} value - the value that changed\n   * @public\n   */\n  notify(property, value) {\n    Object.values(this._subscribers).forEach(s =>\n      Utilities.isEqual(s.property, property) && s.fn.call(this, value));\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/util/observable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 371,
    "kind": "class",
    "name": "Observable",
    "memberof": "packages/francy-core/src/util/observable.js",
    "static": true,
    "longname": "packages/francy-core/src/util/observable.js~Observable",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-core/src/util/observable.js",
    "importStyle": "Observable",
    "description": "This {Observable} class contains the utility methods for implementing the Observer Pattern.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 372,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-core/src/util/observable.js~Observable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/observable.js~Observable#constructor",
    "access": "public",
    "description": "Creates a instance of ModelTracker.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "the object object to keep track of changes."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "verbose",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "throttle",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "_subscribers",
    "memberof": "packages/francy-core/src/util/observable.js~Observable",
    "static": false,
    "longname": "packages/francy-core/src/util/observable.js~Observable#_subscribers",
    "access": "private",
    "description": "This is property holds a list of change subscribers.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "subscribe",
    "memberof": "packages/francy-core/src/util/observable.js~Observable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/observable.js~Observable#subscribe",
    "access": "public",
    "description": "This method is used register a function that is invoked to sync the object",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "the property to subscribe to"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "the function to execute - must handle one arg, the object, of type {Object}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "unsubscribe",
    "memberof": "packages/francy-core/src/util/observable.js~Observable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/observable.js~Observable#unsubscribe",
    "access": "public",
    "description": "This method is used to unregister a function registered previously",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "the property to unsubscribe to"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "the function to execute - must handle one arg, the object, of type {Object}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "unsubscribeAll",
    "memberof": "packages/francy-core/src/util/observable.js~Observable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/observable.js~Observable#unsubscribeAll",
    "access": "public",
    "description": "This method is used to unregister all functions registered previously",
    "lineNumber": 52,
    "params": [],
    "return": null
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "notify",
    "memberof": "packages/francy-core/src/util/observable.js~Observable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-core/src/util/observable.js~Observable#notify",
    "access": "public",
    "description": "This method is used to notify all subscribers of a change",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "the property to notify subscribers subscribed to"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the value that changed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 379,
    "kind": "file",
    "name": "packages/francy-core/src/util/utilities.js",
    "content": "import _isEqual from 'lodash.isequal';\nimport _reduce from 'lodash.reduce';\nimport alea from 'seedrandom';\n\n/**\n * {Utilities} functions object.\n * \n * @typedef {Object} Utilities\n * @property {function} generateId\n * @public\n */\nexport const Utilities = {\n  /**\n   * Returns a random generator function based on the alea algorithm\n   * \n   * @returns {function} alea random generator algoritm\n   * @public\n   */\n  aleaRandomGenerator: () => new alea(),\n  /**\n   * Generates an ID\n   * \n   * @returns {string} a random id\n   * @public\n   */\n  generateId: function () {\n    // Math.random should be unique because of its seeding algorithm\n    // Convert it to base 36 (numbers + letters), \n    // and grab the first 9 characters after the decimal\n    return `A${this.aleaRandomGenerator().double().toString(36).substr(2, 9)}`;\n  },\n  /**\n   * Checks whether an argument is an object\n   * \n   * @returns {boolean} true if is an object, otherwise false\n   * @public\n   */\n  isObject: function (a) {\n    return typeof a === 'object' && a !== null;\n  },\n  /**\n   * Checks whether an argument is a boolean\n   * \n   * @returns {boolean} true if is a boolean, otherwise false\n   * @public\n   */\n  isBoolean: function(a) {\n    return typeof a === 'boolean';\n  },\n  /**\n   * Checks whether an argument is a function\n   * \n   * @returns {boolean} true if is a function, otherwise false\n   * @public\n   */\n  isFunction: function(a) {\n    return typeof a === 'function';\n  },\n  /**\n   * Checks whether 2 objects are equal, deep check\n   * \n   * @returns {boolean} true if the obejcts are equal, otherwise false\n   * @public\n   */\n  isEqual: function (a, b) {\n    return _isEqual(a, b);\n  },\n  /**\n   * Checks whether 2 objects are equal and returns an array with the keys that are different\n   * \n   * @returns {array} an array of keys\n   * @public\n   */\n  getDifferences: function(a, b) {\n    return _reduce(a, (result, value, key) => _isEqual(value, b[key]) ? result : result.concat(key), []);\n  },\n  /**\n   * Sanitize a string by removing everything that is not alphanumeric replacing with empty string if second argument is not passed.\n   * \n   * @returns {string} the string sanitized\n   * @public\n   */\n  sanitize: function(a, b) {\n    b = b ? b : '';\n    return a.replace(/[^a-zA-Z0-9]/g, b);\n  },\n  /**\n   * Checks whether an argument is a Promise or not, based on the existence of a 'then' function\n   * \n   * @returns {boolean} true if is a Promise, otherwise false\n   * @public\n   */\n  isaPromise: function(a) {\n    return a && typeof a.then === 'function';\n  }\n};\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-core/src/util/utilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 380,
    "kind": "typedef",
    "name": "Utilities",
    "memberof": "packages/francy-core/src/util/utilities.js",
    "static": true,
    "longname": "packages/francy-core/src/util/utilities.js~Utilities",
    "access": "public",
    "description": "{Utilities} functions object.",
    "lineNumber": 12,
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "generateId",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Utilities"
    }
  },
  {
    "__docId__": 381,
    "kind": "file",
    "name": "packages/francy-extension-jupyter/src/embed.js",
    "content": "/**\n * Entry point for the unpkg bundle containing custom model definitions.\n *\n * It differs from the notebook bundle in that it does not need to define a\n * dynamic baseURL for the static assets and may load some css that would\n * already be loaded by the notebook otherwise.\n */\n\nexport { version } from '../package.json';\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-extension-jupyter/src/embed.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 382,
    "kind": "file",
    "name": "packages/francy-extension-jupyter/src/index.js",
    "content": "export { register_renderer, render_cells, init } from './renderer.js';\nexport { version } from '../package.json';\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-extension-jupyter/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 383,
    "kind": "file",
    "name": "packages/francy-extension-jupyter/src/lab_extension.js",
    "content": "import './vendor';\nimport { CLASS_NAME, MIME_TYPE } from './utils';\nimport { FrancyApp, Logger } from 'francy';\nimport { D3Renderer } from 'francy-renderer-d3';\nimport { GraphvizRenderer } from 'francy-renderer-graphviz';\nimport { VisRenderer } from 'francy-renderer-vis';\n//import { ILatexTypesetter as ignore } from '@jupyterlab/rendermime'; // required to load mathjax into JLab!\n//import { OutputArea } from '@jupyterlab/outputarea';\nimport { Widget } from '@phosphor/widgets';\n\n/**\n * A widget for rendering 'application/vnd.francy+json'\n */\nexport class OutputWidget extends Widget {\n  /**\n   * Construct a new output widget.\n   */\n  constructor(options) {\n    super(options);\n    this._session = options.resolver._session;\n    this._mimeType = options.mimeType;\n    this.addClass(CLASS_NAME);\n    var self = this;\n    // update the callback handler with the session kernel\n    this.Francy  = new FrancyApp({\n      callbackHandler: function (cmd) {\n        // NOTE it should be implemented like this:\n        // at this point we know the element exists and the OutputArea is 2 levels up: this.parent.parent\n        // OutputArea.execute(cmd, self.parent.parent, self._session);\n        // NOTE but francy holds state in the DOM (d3 behaviour), so we need to reuse it:\n        let future = self._session.kernel.requestExecute({ code: cmd });\n        future.onIOPub = function (msg) {\n          if (msg.content && msg.content.data && msg.content.data[MIME_TYPE]) {\n            // This will update an existing canvas by its ID!\n            self.Francy.load(msg.content.data[MIME_TYPE]).render()\n              .catch(error => Logger.error(error))\n              .then(element => Logger.debug('Interactive trigger result: ', element));\n          }\n        };\n      }\n    });\n    // register available renderers\n    this.Francy.RenderingManager.register(new D3Renderer());\n    this.Francy.RenderingManager.register(new GraphvizRenderer());\n    this.Francy.RenderingManager.register(new VisRenderer());\n    // try to initialize MathJax just in case - hack\n    this.Francy.Components.MathJax.tryInitialize();\n  }\n\n  /**\n   * Render 'application/vnd.francy+json' into this widget's node.\n   */\n  renderModel(model) {\n    this.Francy.load(model.data[this._mimeType]).render()\n      .catch(error => Logger.error(error))\n      .then(element => this.node.appendChild(element));\n    return Promise.resolve(true);\n  }\n\n}\n\n/**\n * A mime renderer factory for 'application/vnd.francy+json' data.\n */\nexport const rendererFactory = {\n  safe: true,\n  mimeTypes: [MIME_TYPE],\n  createRenderer: options => new OutputWidget(options)\n};\n\n\nconst extension = {\n  name: 'francy',\n  rendererFactory,\n  rank: 0,\n  dataType: 'json',\n};\n\nexport default extension;\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-extension-jupyter/src/lab_extension.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 384,
    "kind": "class",
    "name": "OutputWidget",
    "memberof": "packages/francy-extension-jupyter/src/lab_extension.js",
    "static": true,
    "longname": "packages/francy-extension-jupyter/src/lab_extension.js~OutputWidget",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-extension-jupyter/src/lab_extension.js",
    "importStyle": "{OutputWidget}",
    "description": "A widget for rendering 'application/vnd.francy+json'",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "@phosphor/widgets~Widget"
    ]
  },
  {
    "__docId__": 385,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-extension-jupyter/src/lab_extension.js~OutputWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-extension-jupyter/src/lab_extension.js~OutputWidget#constructor",
    "access": "public",
    "description": "Construct a new output widget.",
    "lineNumber": 18
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "_session",
    "memberof": "packages/francy-extension-jupyter/src/lab_extension.js~OutputWidget",
    "static": false,
    "longname": "packages/francy-extension-jupyter/src/lab_extension.js~OutputWidget#_session",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "member",
    "name": "_mimeType",
    "memberof": "packages/francy-extension-jupyter/src/lab_extension.js~OutputWidget",
    "static": false,
    "longname": "packages/francy-extension-jupyter/src/lab_extension.js~OutputWidget#_mimeType",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "Francy",
    "memberof": "packages/francy-extension-jupyter/src/lab_extension.js~OutputWidget",
    "static": false,
    "longname": "packages/francy-extension-jupyter/src/lab_extension.js~OutputWidget#Francy",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "renderModel",
    "memberof": "packages/francy-extension-jupyter/src/lab_extension.js~OutputWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-extension-jupyter/src/lab_extension.js~OutputWidget#renderModel",
    "access": "public",
    "description": "Render 'application/vnd.francy+json' into this widget's node.",
    "lineNumber": 53,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "variable",
    "name": "rendererFactory",
    "memberof": "packages/francy-extension-jupyter/src/lab_extension.js",
    "static": true,
    "longname": "packages/francy-extension-jupyter/src/lab_extension.js~rendererFactory",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-extension-jupyter/src/lab_extension.js",
    "importStyle": "{rendererFactory}",
    "description": "A mime renderer factory for 'application/vnd.francy+json' data.",
    "lineNumber": 65,
    "type": {
      "types": [
        "{\"safe\": boolean, \"mimeTypes\": *, \"createRenderer\": *}"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "variable",
    "name": "extension",
    "memberof": "packages/francy-extension-jupyter/src/lab_extension.js",
    "static": true,
    "longname": "packages/francy-extension-jupyter/src/lab_extension.js~extension",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-extension-jupyter/src/lab_extension.js",
    "importStyle": "extension",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "{\"name\": string, \"rendererFactory\": *, \"rank\": *, \"dataType\": string}"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "file",
    "name": "packages/francy-extension-jupyter/src/nb_extension.js",
    "content": "/* global define */\n\n/**\n * This file contains the javascript that is run when the notebook is loaded.\n * It contains some requirejs configuration and the `load_ipython_extension` \n * which is required for any notebook extension.\n */\n\n/**\n * Configure requirejs.\n */\nif (window.require) {\n  window.require.config({\n    map: {\n      '*': {\n        'jupyter_francy': 'nbextensions/jupyter_francy/index'\n      }\n    }\n  });\n}\n\nrequire(['nbextensions/jupyter_francy/Vendors']);\n\n/**\n * Export the required load_ipython_extention.\n */\ndefine(\n  [\n    'base/js/namespace',\n    'nbextensions/jupyter_francy/Vendors',\n    'nbextensions/jupyter_francy/FrancyJS',\n    'nbextensions/jupyter_francy/D3Renderer',\n    'nbextensions/jupyter_francy/GraphvizRenderer',\n    'nbextensions/jupyter_francy/VisRenderer',\n    'nbextensions/jupyter_francy/index'\n  ],\n  (Jupyter, Vendors, FrancyJS, D3Renderer, GraphvizRenderer, VisRenderer, Extension) => {\n    function load_ipython_extension() {\n      const { notebook } = Jupyter;\n      Extension.register_renderer(Jupyter, { \n        FrancyApp: FrancyJS.FrancyApp,\n        Logger: FrancyJS.Logger, \n        Renderers: [ D3Renderer.D3Renderer, GraphvizRenderer.GraphvizRenderer, VisRenderer.VisRenderer ]\n      }, notebook);\n      Extension.render_cells(notebook);\n    }\n    return {\n      load_ipython_extension: load_ipython_extension\n    };\n  }\n);\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-extension-jupyter/src/nb_extension.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 393,
    "kind": "file",
    "name": "packages/francy-extension-jupyter/src/nb_index.js",
    "content": "/**\n * Entry point for the notebook bundle containing custom model definitions.\n * Setup notebook base URL\n * Some static assets may be required by the custom widget javascript. The base\n * url for the notebook is not known at build time and is therefore computed\n * dynamically.\n */\n\n__webpack_public_path__ = document.querySelector('body').getAttribute('data-base-url') + 'nbextensions/jupyter_francy/'; // eslint-disable-line no-undef\n\n/**\n * Export widget models and views, and the npm package version number.\n */\nexport { register_renderer, render_cells, init } from './renderer.js';\nexport { version } from '../package.json';\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-extension-jupyter/src/nb_index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 394,
    "kind": "file",
    "name": "packages/francy-extension-jupyter/src/renderer.js",
    "content": "import { APPEND_ID, CLASS_NAME, MIME_TYPE } from './utils';\n\nexport function init(Jupyter, { FrancyApp, Logger, Renderers = []}) {\n  // start Francy\n  let Francy = new FrancyApp({\n    appendTo: `#${APPEND_ID}`,\n    callbackHandler: function (command) {\n      Jupyter.notebook.kernel.execute(command, {\n        iopub: {\n          output: function (msg) {\n            if (msg.content && msg.content.data && msg.content.data[MIME_TYPE]) {\n              // This will update an existing canvas by its ID!\n              Francy.load(msg.content.data[MIME_TYPE]).render()\n                .catch(error => Logger.error(error))\n                .then(element => Logger.debug('Interactive trigger result', element));\n            }\n          }\n        }\n      }, {});\n    }\n  });\n  \n  // register available renderers\n  Renderers.forEach(Renderer => Francy.RenderingManager.register(new Renderer()));\n  // try to initialize MathJax just in case - hack\n  Francy.Components.MathJax.tryInitialize();\n  \n  return Francy;\n}\n\n/**\n * Render data to the DOM node\n */\nfunction render({ Francy, Logger }, props, node) {\n  Francy.load(props.data).render()\n    .catch(error => Logger.error(error))\n    .then(element => node.append(element));\n}\n\n/**\n * Handle when an output is cleared or removed\n */\nfunction handleClearOutput(event, { cell: { output_area } }) { // eslint-disable-line no-unused-vars\n  /* Get rendered DOM node */\n  const toinsert = output_area.element.find(CLASS_NAME.split(' ')[0]); // eslint-disable-line no-unused-vars\n  // nothing to do\n}\n\n/**\n * Handle when a new output is added\n */\nfunction handleAddOutput(event, { output, output_area }) { // eslint-disable-line no-unused-vars\n  /* Get rendered DOM node */\n  const toinsert = output_area.element.find(CLASS_NAME.split(' ')[0]); // eslint-disable-line no-unused-vars\n  /** e.g. Inject a static image representation into the mime bundle for\n   *  endering on Github, etc.\n   */\n  // if (toinsert) {\n  //   renderLibrary.toPng(toinsert[0]).then(url => {\n  //     const data = url.split(',')[1];\n  //     output_area.outputs\n  //       .filter(output => output.data[MIME_TYPE])\n  //       .forEach(output => {\n  //         output.data['image/png'] = data;\n  //       });\n  //   });\n  // }\n}\n\n/**\n * Register the mime type and append_mime function with the notebook's\n * output area\n */\nexport function register_renderer(Jupyter, { FrancyApp, Logger, Renderers = [] }, notebook) {\n  /* Get an instance of output_area from a CodeCell instance */\n  const { output_area } = notebook\n    .get_cells()\n    .reduce((result, cell) => cell.output_area ? cell : result, {});\n\n  /* A function to render output of 'application/vnd.francy+json' mime type */\n  const append_mime = function (data, metadata, element) {\n    /* Create a DOM node to render to */\n    const toinsert = this.create_output_subarea(\n      metadata,\n      CLASS_NAME,\n      MIME_TYPE\n    );\n    this.keyboard_manager.register_events(toinsert);\n    /* Render data to DOM node */\n    const props = { data, metadata: metadata[MIME_TYPE] };\n    let Francy = init(Jupyter, { \n      FrancyApp: FrancyApp,\n      Logger: Logger,\n      Renderers: Renderers\n    });\n    render({ Francy: Francy, Logger: Logger }, props, toinsert[0]);\n    element.append(toinsert);\n    return toinsert;\n  };\n\n  /* Handle when an output is cleared or removed */\n  output_area.events.on('clear_output.CodeCell', handleClearOutput);\n\n  /* Handle when a new output is added */\n  output_area.events.on('output_added.OutputArea', handleAddOutput);\n\n  /* Register the mime type and append_mim function with output_area */\n  output_area.register_mime_type(MIME_TYPE, append_mime, {\n    /* Is output safe? */\n    safe: true,\n    /* Index of renderer in `output_area.display_order` */\n    index: 0\n  });\n}\n\n/**\n * Re-render cells with output data of 'application/vnd.francy+json' mime type\n */\nexport function render_cells(notebook) {\n  /* Get all cells in notebook */\n  notebook.get_cells().forEach(cell => {\n    /* If a cell has output data of 'application/vnd.francy+json' mime type */\n    if (\n      cell.output_area &&\n      cell.output_area.outputs.find(\n        output => output.data && output.data[MIME_TYPE]\n      )\n    ) {\n      /* Re-render the cell */\n      notebook.render_cell_output(cell);\n    }\n  });\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-extension-jupyter/src/renderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 395,
    "kind": "function",
    "name": "init",
    "memberof": "packages/francy-extension-jupyter/src/renderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-extension-jupyter/src/renderer.js~init",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-extension-jupyter/src/renderer.js",
    "importStyle": "{init}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "Jupyter",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"FrancyApp\": *, \"Logger\": *, \"Renderers\": *}"
        ],
        "defaultRaw": {
          "FrancyApp": null,
          "Logger": null,
          "Renderers": null
        },
        "defaultValue": "{\"FrancyApp\":null,\"Logger\":null,\"Renderers\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "function",
    "name": "render",
    "memberof": "packages/francy-extension-jupyter/src/renderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-extension-jupyter/src/renderer.js~render",
    "access": "public",
    "export": false,
    "importPath": "francy-js/packages/francy-extension-jupyter/src/renderer.js",
    "importStyle": null,
    "description": "Render data to the DOM node",
    "lineNumber": 34,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"Francy\": *, \"Logger\": *}"
        ],
        "defaultRaw": {
          "Francy": null,
          "Logger": null
        },
        "defaultValue": "{\"Francy\":null,\"Logger\":null}"
      },
      {
        "name": "props",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 397,
    "kind": "function",
    "name": "handleClearOutput",
    "memberof": "packages/francy-extension-jupyter/src/renderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-extension-jupyter/src/renderer.js~handleClearOutput",
    "access": "public",
    "export": false,
    "importPath": "francy-js/packages/francy-extension-jupyter/src/renderer.js",
    "importStyle": null,
    "description": "Handle when an output is cleared or removed",
    "lineNumber": 43,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"cell\": *}"
        ],
        "defaultRaw": {
          "cell": null
        },
        "defaultValue": "{\"cell\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 398,
    "kind": "function",
    "name": "handleAddOutput",
    "memberof": "packages/francy-extension-jupyter/src/renderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-extension-jupyter/src/renderer.js~handleAddOutput",
    "access": "public",
    "export": false,
    "importPath": "francy-js/packages/francy-extension-jupyter/src/renderer.js",
    "importStyle": null,
    "description": "Handle when a new output is added",
    "lineNumber": 52,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"output\": *, \"output_area\": *}"
        ],
        "defaultRaw": {
          "output": null,
          "output_area": null
        },
        "defaultValue": "{\"output\":null,\"output_area\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 399,
    "kind": "function",
    "name": "register_renderer",
    "memberof": "packages/francy-extension-jupyter/src/renderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-extension-jupyter/src/renderer.js~register_renderer",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-extension-jupyter/src/renderer.js",
    "importStyle": "{register_renderer}",
    "description": "Register the mime type and append_mime function with the notebook's\noutput area",
    "lineNumber": 74,
    "params": [
      {
        "name": "Jupyter",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"FrancyApp\": *, \"Logger\": *, \"Renderers\": *}"
        ],
        "defaultRaw": {
          "FrancyApp": null,
          "Logger": null,
          "Renderers": null
        },
        "defaultValue": "{\"FrancyApp\":null,\"Logger\":null,\"Renderers\":null}"
      },
      {
        "name": "notebook",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 400,
    "kind": "function",
    "name": "render_cells",
    "memberof": "packages/francy-extension-jupyter/src/renderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-extension-jupyter/src/renderer.js~render_cells",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-extension-jupyter/src/renderer.js",
    "importStyle": "{render_cells}",
    "description": "Re-render cells with output data of 'application/vnd.francy+json' mime type",
    "lineNumber": 119,
    "params": [
      {
        "name": "notebook",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 401,
    "kind": "file",
    "name": "packages/francy-extension-jupyter/src/utils.js",
    "content": "export const MIME_TYPE = 'application/vnd.francy+json';\nexport const CLASS_NAME = 'jp-OutputWidget-Francy';\nexport const APPEND_ID = 'francy-drawing-div';\n\n// this will execute always!\n(function createHiddenDrawingDiv() {\n  // Create a 'display: none;' div for drawings\n  // well, better putting this as 'visibility: hidden;' in order to get sizes \n  // the workaround would be setTimeout(()=>{francy.render}, 10) :/\n  if (!window.document.getElementById(`div#${APPEND_ID}`)) {\n    let div = window.document.createElement('div');\n    div.setAttribute('id', APPEND_ID);\n    div.setAttribute('style', 'visibility: false;');\n    window.document.body.appendChild(div);\n  }\n})();\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-extension-jupyter/src/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 402,
    "kind": "variable",
    "name": "MIME_TYPE",
    "memberof": "packages/francy-extension-jupyter/src/utils.js",
    "static": true,
    "longname": "packages/francy-extension-jupyter/src/utils.js~MIME_TYPE",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-extension-jupyter/src/utils.js",
    "importStyle": "{MIME_TYPE}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "variable",
    "name": "CLASS_NAME",
    "memberof": "packages/francy-extension-jupyter/src/utils.js",
    "static": true,
    "longname": "packages/francy-extension-jupyter/src/utils.js~CLASS_NAME",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-extension-jupyter/src/utils.js",
    "importStyle": "{CLASS_NAME}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "variable",
    "name": "APPEND_ID",
    "memberof": "packages/francy-extension-jupyter/src/utils.js",
    "static": true,
    "longname": "packages/francy-extension-jupyter/src/utils.js~APPEND_ID",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-extension-jupyter/src/utils.js",
    "importStyle": "{APPEND_ID}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "file",
    "name": "packages/francy-extension-jupyter/src/vendor.js",
    "content": "import * as d3 from 'd3';\nimport * as graphviz_ignore from 'd3-graphviz';\nimport * as vis from 'vis';\nimport * as viz_ignore from 'viz.js';\n\nwindow.d3 = d3;\nwindow.vis = vis;",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-extension-jupyter/src/vendor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 406,
    "kind": "file",
    "name": "packages/francy-renderer-d3/index.js",
    "content": "import Canvas from './src/canvas';\nimport { RenderingConfiguration } from 'francy-core';\n\nexport const RENDERER_NAME = 'D3-Renderer';\n\nexport class D3Renderer extends RenderingConfiguration {\n\n  constructor(isDefault = true) {\n    super(Canvas, RENDERER_NAME, isDefault);\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-d3/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 407,
    "kind": "variable",
    "name": "RENDERER_NAME",
    "memberof": "packages/francy-renderer-d3/index.js",
    "static": true,
    "longname": "packages/francy-renderer-d3/index.js~RENDERER_NAME",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-d3/index.js",
    "importStyle": "{RENDERER_NAME}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "class",
    "name": "D3Renderer",
    "memberof": "packages/francy-renderer-d3/index.js",
    "static": true,
    "longname": "packages/francy-renderer-d3/index.js~D3Renderer",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-d3/index.js",
    "importStyle": "{D3Renderer}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~RenderingConfiguration"
    ]
  },
  {
    "__docId__": 409,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-d3/index.js~D3Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/index.js~D3Renderer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 410,
    "kind": "file",
    "name": "packages/francy-renderer-d3/src/canvas.js",
    "content": "import { CompositeRenderer, Decorators, GlobalConfiguration, Logger, RENDERING_EVENTS, seedrandom } from 'francy-core';\nimport ChartFactory from './chart/factory';\nimport GraphFactory from './graph/factory';\n\n/* global d3 */\n\nexport default class Canvas extends CompositeRenderer {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    this.graphFactory = new GraphFactory(this.options, this.context);\n    this.chartFactory = new ChartFactory(this.options, this.context);\n  }\n\n  initialize() {\n    if (GlobalConfiguration.object.fixedRandomSeed) {\n      //set seed to produce always the same graphs\n      seedrandom('Francy!', { global: true });\n    }\n  }\n\n  @Decorators.Data.requires('canvas')\n  @Decorators.Initializer.initialize()\n  async render() {\n    let content, zoom = d3.zoom(),\n      self = this;\n\n    function updateZoom(translateX, translateY, scale) {\n      self.element.call(zoom.transform, d3.zoomIdentity.translate(translateX, translateY).scale(scale, scale));\n    }\n\n    function zoomed() {\n      content.attr('transform', d3.event.transform);\n    }\n\n    function stopped() {\n      if (d3.event.defaultPrevented) {\n        d3.event.stopPropagation();\n      }\n    }\n\n    function zoomToFit(force) {\n      // only execute if enable, of course\n      if (self.data.canvas.zoomToFit || force) {\n        let bounds = content.node().getBBox();\n\n        let clientBounds = self.element.node().getBoundingClientRect(),\n          fullWidth = clientBounds.right - clientBounds.left,\n          fullHeight = clientBounds.bottom - clientBounds.top;\n\n        let width = +bounds.width,\n          height = +bounds.height;\n\n        if (width === 0 || height === 0) return;\n\n        let midX = bounds.x + width / 2,\n          midY = bounds.y + height / 2;\n\n        let scale = 0.9 / Math.max(width / fullWidth, height / fullHeight);\n        let translateX = fullWidth / 2 - scale * midX,\n          translateY = fullHeight / 2 - scale * midY;\n\n        content.transition().duration(self.transitionDuration)\n          .attr('transform', `translate(${translateX},${translateY})scale(${scale},${scale})`)\n          .on('end', () => updateZoom(translateX, translateY, scale));\n      }\n    }\n\n    const canvasId = `Canvas-${this.data.canvas.id}`;\n    this.element = d3.select(`svg#${canvasId}`);\n    // check if the canvas is already present\n    if (!this.element.node()) {\n      // create a svg element detached from the DOM!\n      Logger.debug(`(${this.context.instanceId}) Creating Canvas [${canvasId}]...`);\n      this.element = this.parent.append('svg')\n        .classed('francy-canvas', true)\n        .attr('xmlns', 'http://www.w3.org/2000/svg')\n        .attr('xmlns:xlink', 'http://www.w3.org/1999/xlink')\n        .attr('id', canvasId);\n    }\n\n    // cannot continue if canvas is not present\n    if (!this.element.node()) {\n      throw new Error(`Oops, could not create canvas with id [${canvasId}]... Cannot proceed.`);\n    }\n\n    this.element.attr('width', '100%').attr('height', this.data.canvas.height);\n\n    content = this.element.select('g.francy-content');\n\n    if (!content.node()) {\n      content = this.element.append('g')\n        .classed('francy-content', true)\n        .classed('graph', true)\n        .attr('id', 'graph0');\n      zoom.on('zoom', zoomed);\n      // remove zoom on double click!\n      this.element.call(zoom).on('dblclick.zoom', null);\n    }\n\n    this.element.on('click', stopped, true);\n\n    this.element.zoomToFit = this.zoomToFit = zoomToFit;\n\n    Logger.debug(`(${this.context.instanceId}) Canvas updated [${canvasId}]...`);\n\n    this._buildMenu();\n\n    this.removeChildren();\n    this.addChild(this.graphFactory).addChild(this.chartFactory);\n    this.handlePromise(this.renderChildren());\n\n    return this;\n  }\n\n  _buildMenu() {\n    let self = this;\n    // here we have access to MainMenu\n    if (this.data.canvas.graph) {\n      this.parentClass.MainMenu.addMultiMenuOnSettingsMenu({\n        menuId: 'graph-settings-entry',\n        menuTitle: 'Graph',\n        entryId: 'neighbours-entry',\n        entryTitle: `${self.context.configuration.object.showNeighbours ? '&#9745' : '&#9744'} Show Neighbours`,\n        entryOnClickCallback: function () {\n          self.context.configuration.object.showNeighbours = !self.context.configuration.object.showNeighbours;\n        },\n        entryOnEachCallback: function () {\n          let showNeighboursId = `showNeighbours-onChange-${self.data.canvas.id}`;\n          self.context.configuration.subscribe('showNeighbours', value => {\n            d3.select(this).html(`${value ? '&#9745' : '&#9744'} Show Neighbours`);\n          }, showNeighboursId);\n        }\n      });\n\n      this.parentClass.MainMenu.addMultiMenuOnSettingsMenu({\n        menuId: 'graph-settings-entry',\n        menuTitle: 'Graph',\n        entryId: 'drag-entry',\n        entryTitle: `${self.context.configuration.object.dragNodes ? '&#9745' : '&#9744'} Drag Nodes`,\n        entryOnClickCallback: function () {\n          self.context.configuration.object.dragNodes = !self.context.configuration.object.dragNodes;\n        },\n        entryOnEachCallback: function () {\n          let dragNodesId = `dragNodes-onChange-${self.data.canvas.id}`;\n          self.context.configuration.subscribe('dragNodes', value => {\n            d3.select(this).html(`${value ? '&#9745' : '&#9744'} Drag Nodes`);\n          }, dragNodesId);\n        }\n      });\n    }\n\n    let removeMenuId = `graphSettings-removeMenu-${self.data.canvas.id}`;\n    // remove menu if renderer is disabled\n    self.context.renderingManager.subscribe(RENDERING_EVENTS.STATUS, r => {\n      if (!r.enable) {\n        this.parentClass.MainMenu.removeMenuEntry('graph-settings-entry');\n      }\n    }, removeMenuId);\n\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-d3/src/canvas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 411,
    "kind": "class",
    "name": "Canvas",
    "memberof": "packages/francy-renderer-d3/src/canvas.js",
    "static": true,
    "longname": "packages/francy-renderer-d3/src/canvas.js~Canvas",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-d3/src/canvas.js",
    "importStyle": "Canvas",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~CompositeRenderer"
    ]
  },
  {
    "__docId__": 412,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-d3/src/canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/canvas.js~Canvas#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "graphFactory",
    "memberof": "packages/francy-renderer-d3/src/canvas.js~Canvas",
    "static": false,
    "longname": "packages/francy-renderer-d3/src/canvas.js~Canvas#graphFactory",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "member",
    "name": "chartFactory",
    "memberof": "packages/francy-renderer-d3/src/canvas.js~Canvas",
    "static": false,
    "longname": "packages/francy-renderer-d3/src/canvas.js~Canvas#chartFactory",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "initialize",
    "memberof": "packages/francy-renderer-d3/src/canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/canvas.js~Canvas#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-renderer-d3/src/canvas.js~Canvas",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/canvas.js~Canvas#render",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('canvas')"
      },
      {
        "name": "Decorators.Initializer.initialize",
        "arguments": "()"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-renderer-d3/src/canvas.js~Canvas",
    "static": false,
    "longname": "packages/francy-renderer-d3/src/canvas.js~Canvas#element",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "_buildMenu",
    "memberof": "packages/francy-renderer-d3/src/canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/canvas.js~Canvas#_buildMenu",
    "access": "private",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 420,
    "kind": "file",
    "name": "packages/francy-renderer-d3/src/chart/bar.js",
    "content": "import Chart from './chart';\nimport { Decorators } from 'francy-core';\n\n/* global d3 */\n\nexport default class BarChart extends Chart {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  @Decorators.Initializer.initialize()\n  async render() {\n\n    this.xScale = d3.scaleBand().range([0, this.width]).padding(0.1).domain(this.axis.x.domain);\n\n    if (!this.axis.x.domain.length) {\n      this.axis.x.domain = Chart.domainRange(this.allValues.length / this.datasetNames.length);\n      this.xScale.domain(this.axis.x.domain);\n    }\n\n    let barsGroup = this.element.selectAll('g.francy-bars');\n\n    if (!barsGroup.node()) {\n      barsGroup = this.element.append('g').attr('class', 'francy-bars');\n    }\n\n    var self = this;\n\n    this.datasetNames.forEach(function (key, index) {\n      let bar = barsGroup.selectAll(`.francy-bar-${index}`).data(self.datasets[key]);\n\n      bar.exit().transition().duration(750)\n        .style('fill-opacity', 1e-6)\n        .remove();\n\n      // append the rectangles for the bar chart\n      let barEnter = bar.enter()\n        .append('rect')\n        .style('fill', () => Chart.colors(index * 5))\n        .attr('class', `francy-bar-${index}`)\n        .attr('x', function (d, i) {\n          return self.xScale(self.axis.x.domain[i]) + index * (self.xScale.bandwidth() / self.datasetNames.length);\n        })\n        .attr('width', (self.xScale.bandwidth() / self.datasetNames.length) - 1)\n        .attr('y', function (d) {\n          return self.yScale(d);\n        })\n        .attr('height', function (d) {\n          return self.height - self.yScale(d);\n        })\n        .on('mouseenter', function (d) {\n          d3.select(this).transition()\n            .duration(250).style('fill-opacity', 0.5);\n          self.handlePromise(self.tooltip.load(Chart.tooltip(key, d), true).render());\n        })\n        .on('mouseleave', function () {\n          d3.select(this).transition()\n            .duration(250).style('fill-opacity', 1);\n          self.tooltip.unrender();\n        });\n\n      barEnter.merge(bar)\n        .attr('x', function (d, i) {\n          return self.xScale(self.axis.x.domain[i]) + index * (self.xScale.bandwidth() / self.datasetNames.length);\n        })\n        .attr('width', (self.xScale.bandwidth() / self.datasetNames.length) - 1)\n        .attr('y', function (d) {\n          return self.yScale(d);\n        })\n        .attr('height', function (d) {\n          return self.height - self.yScale(d);\n        });\n    });\n\n    this._renderAxis();\n    this._renderLegend();\n\n    return this;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-d3/src/chart/bar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 421,
    "kind": "class",
    "name": "BarChart",
    "memberof": "packages/francy-renderer-d3/src/chart/bar.js",
    "static": true,
    "longname": "packages/francy-renderer-d3/src/chart/bar.js~BarChart",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-d3/src/chart/bar.js",
    "importStyle": "BarChart",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "packages/francy-renderer-d3/src/chart/chart.js~Chart"
    ]
  },
  {
    "__docId__": 422,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-d3/src/chart/bar.js~BarChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/bar.js~BarChart#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-renderer-d3/src/chart/bar.js~BarChart",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/bar.js~BarChart#render",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Initializer.initialize",
        "arguments": "()"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "member",
    "name": "xScale",
    "memberof": "packages/francy-renderer-d3/src/chart/bar.js~BarChart",
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/bar.js~BarChart#xScale",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "file",
    "name": "packages/francy-renderer-d3/src/chart/chart.js",
    "content": "import { Renderer, Tooltip } from 'francy-core';\n\n/* global d3 */\n\nexport default class Chart extends Renderer {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    this.axis = undefined;\n    this.yScale = undefined;\n    this.xScale = undefined;\n    this.datasets = undefined;\n    this.datasetNames = undefined;\n    this.tooltip = undefined;\n  }\n\n  initialize() {\n    this.tooltip = new Tooltip(this.options, this.context);\n\n    this.element = this.parent.select('g.francy-content');\n\n    this.axis = this.data.canvas.chart.axis;\n    this.datasets = this.data.canvas.chart.data;\n    this.datasetNames = Object.keys(this.datasets);\n\n    this.xScale = d3.scaleLinear().range([0, this.width]).domain(this.axis.x.domain);\n    this.yScale = d3.scaleLinear().range([this.height, 0]).domain(this.axis.y.domain);\n\n    this.allValues = [];\n    this.datasetNames.forEach(key => this.allValues = this.allValues.concat(this.datasets[key]));\n\n    if (!this.axis.y.domain.length) {\n      this.yScale.domain([0, d3.max(this.allValues, d => d)]);\n    }\n\n    if (!this.axis.x.domain.length) {\n      this.xScale.domain([0, this.allValues.length / this.datasetNames.length]);\n    }\n  }\n\n  _renderAxis() {\n    // force rebuild axis again\n    let xAxisGroup = this.element.selectAll('g.francy-x-axis');\n\n    if (!xAxisGroup.node()) {\n      xAxisGroup = this.element.append('g').attr('class', 'francy-x-axis');\n    }\n\n    xAxisGroup.selectAll('*').remove();\n\n    // add the x Axis\n    xAxisGroup\n      .attr('transform', `translate(0,${this.height})`)\n      .call(d3.axisBottom(this.xScale))\n      .append('text')\n      .attr('dy', 50)\n      .attr('dx', this.width / 2)\n      .attr('fill', 'black')\n      .attr('class', 'francy-axis')\n      .style('text-anchor', 'end')\n      .text(this.axis.x.title);\n\n    // force rebuild axis again\n    let yAxisGroup = this.element.selectAll('g.francy-y-axis');\n\n    if (!yAxisGroup.node()) {\n      yAxisGroup = this.element.append('g').attr('class', 'francy-y-axis');\n    }\n\n    yAxisGroup.selectAll('*').remove();\n\n    // add the y Axis\n    yAxisGroup\n      .call(d3.axisLeft(this.yScale))\n      .append('text')\n      .attr('dx', -50)\n      .attr('dy', this.height / 2)\n      .attr('fill', 'black')\n      .attr('class', 'francy-axis')\n      .style('text-anchor', 'end')\n      .text(this.axis.y.title);\n  }\n\n  _renderLegend() {\n    if (this.data.canvas.chart.showLegend) {\n\n      let legendGroup = this.element.selectAll('.francy-legend');\n\n      if (!legendGroup.node()) {\n        legendGroup = this.element.append('g').attr('class', 'francy-legend');\n      }\n\n      // force rebuild legend again\n      legendGroup.selectAll('*').remove();\n\n      let legend = legendGroup.selectAll('g').data(this.datasetNames.slice());\n\n      legend.exit().remove();\n\n      legend = legend.enter()\n        .append('g')\n        .attr('transform', (d, i) => `translate(0,${i * 20})`)\n        .merge(legend);\n\n      legend.append('rect')\n        .attr('x', this.width + 20)\n        .attr('width', 19)\n        .attr('height', 19)\n        .style('fill', (d, i) => Chart.colors(i * 5));\n\n      legend.append('text')\n        .attr('x', this.width + 80)\n        .attr('y', 9)\n        .attr('dy', '.35em')\n        .style('text-anchor', 'end')\n        .text(d => d);\n    }\n  }\n\n  static tooltip(dataset, value) {\n    return { 'A': { 'title': 'Dataset', 'text': dataset }, 'B': { 'title': 'Value', 'text': value } };\n  }\n\n  static get colors() {\n    return d3.scaleSequential().domain([0, 100]).interpolator(d3.interpolateRainbow);\n  }\n\n  static domainRange(max) {\n    return Array.from(new Array(max), (_, i) => i).map(x => x);\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-d3/src/chart/chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 426,
    "kind": "class",
    "name": "Chart",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js",
    "static": true,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-d3/src/chart/chart.js",
    "importStyle": "Chart",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~Renderer"
    ]
  },
  {
    "__docId__": 427,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "axis",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart#axis",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "member",
    "name": "yScale",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart#yScale",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "member",
    "name": "xScale",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart#xScale",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "member",
    "name": "datasets",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart#datasets",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "member",
    "name": "datasetNames",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart#datasetNames",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "member",
    "name": "tooltip",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart#tooltip",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "initialize",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 436,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart#element",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 442,
    "kind": "member",
    "name": "allValues",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart#allValues",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "_renderAxis",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart#_renderAxis",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "_renderLegend",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart#_renderLegend",
    "access": "private",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "tooltip",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart.tooltip",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "dataset",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"A\": *, \"B\": *}"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "get",
    "name": "colors",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart.colors",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "domainRange",
    "memberof": "packages/francy-renderer-d3/src/chart/chart.js~Chart",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/francy-renderer-d3/src/chart/chart.js~Chart.domainRange",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "max",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "file",
    "name": "packages/francy-renderer-d3/src/chart/factory.js",
    "content": "import { Decorators, Renderer } from 'francy-core';\nimport BarChart from './bar';\nimport LineChart from './line';\nimport ScatterChart from './scatter';\n\nexport default class ChartFactory extends Renderer {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  @Decorators.Data.requires('canvas.chart')\n  async render() {\n\n    let element = undefined;\n    let chart = undefined;\n    switch (this.data.canvas.chart.type) {\n    case 'bar':\n      chart = new BarChart(this.options, this.context);\n      break;\n    case 'line':\n      chart = new LineChart(this.options, this.context);\n      break;\n    case 'scatter':\n      chart = new ScatterChart(this.options, this.context);\n      break;\n    }\n\n    element = await this.handlePromise(chart.load(this.data).render());\n\n    if (element) {\n      setTimeout(element.parent.zoomToFit, this.transitionDuration);\n    }\n\n    return element;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-d3/src/chart/factory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 449,
    "kind": "class",
    "name": "ChartFactory",
    "memberof": "packages/francy-renderer-d3/src/chart/factory.js",
    "static": true,
    "longname": "packages/francy-renderer-d3/src/chart/factory.js~ChartFactory",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-d3/src/chart/factory.js",
    "importStyle": "ChartFactory",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~Renderer"
    ]
  },
  {
    "__docId__": 450,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-d3/src/chart/factory.js~ChartFactory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/factory.js~ChartFactory#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-renderer-d3/src/chart/factory.js~ChartFactory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/factory.js~ChartFactory#render",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('canvas.chart')"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "file",
    "name": "packages/francy-renderer-d3/src/chart/line.js",
    "content": "import Chart from './chart';\nimport { Decorators } from 'francy-core';\n\n/* global d3 */\n\nexport default class LineChart extends Chart {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  @Decorators.Initializer.initialize()\n  async render() {\n\n    let linesGroup = this.element.selectAll('g.francy-lines');\n\n    if (!linesGroup.node()) {\n      linesGroup = this.element.append('g').attr('class', 'francy-lines');\n    }\n\n    var self = this;\n\n    this.datasetNames.forEach(function (key, index) {\n      let valueLine = d3.line()\n        .x(function (d, i) {\n          return self.xScale(i);\n        })\n        .y(function (d) {\n          return self.yScale(d);\n        });\n\n      let line = linesGroup.selectAll(`.francy-line-${index}`).data([self.datasets[key]]);\n\n      line.exit().transition().duration(750)\n        .style('fill-opacity', 1e-6)\n        .remove();\n\n      // append the rectangles for the bar chart\n      let lineEnter = line.enter()\n        .append('path')\n        .style('stroke', () => Chart.colors(index * 5))\n        .style('stroke-width', '5px')\n        .attr('class', `francy-line-${index}`)\n        .attr('d', valueLine)\n        .on('mouseenter', function (d) {\n          d3.select(this).transition()\n            .duration(250)\n            .style('stroke-opacity', 0.5)\n            .style('stroke-width', '10px');\n          self.handlePromise(self.tooltip.load(Chart.tooltip(key, d), true).render());\n        })\n        .on('mouseleave', function () {\n          d3.select(this).transition()\n            .duration(250)\n            .style('stroke-opacity', 1)\n            .style('stroke-width', '5px');\n          self.tooltip.unrender();\n        });\n\n      lineEnter.merge(line);\n    });\n\n    this._renderAxis();\n    this._renderLegend();\n\n    return this;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-d3/src/chart/line.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 453,
    "kind": "class",
    "name": "LineChart",
    "memberof": "packages/francy-renderer-d3/src/chart/line.js",
    "static": true,
    "longname": "packages/francy-renderer-d3/src/chart/line.js~LineChart",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-d3/src/chart/line.js",
    "importStyle": "LineChart",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "packages/francy-renderer-d3/src/chart/chart.js~Chart"
    ]
  },
  {
    "__docId__": 454,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-d3/src/chart/line.js~LineChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/line.js~LineChart#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-renderer-d3/src/chart/line.js~LineChart",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/line.js~LineChart#render",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Initializer.initialize",
        "arguments": "()"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "file",
    "name": "packages/francy-renderer-d3/src/chart/scatter.js",
    "content": "import Chart from './chart';\nimport { Decorators } from 'francy-core';\n\n/* global d3 */\n\nexport default class ScatterChart extends Chart {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  @Decorators.Initializer.initialize()\n  async render() {\n\n    let scatterGroup = this.element.selectAll('g.francy-scatters');\n\n    if (!scatterGroup.node()) {\n      scatterGroup = this.element.append('g').attr('class', 'francy-scatters');\n    }\n\n    let self = this;\n\n    this.datasetNames.forEach(function (key, index) {\n      let scatter = scatterGroup.selectAll(`.francy-scatter-${index}`).data(self.datasets[key]);\n\n      scatter.exit().transition().duration(750)\n        .style('fill-opacity', 1e-6)\n        .remove();\n\n      // append the rectangles for the bar chart\n      let scatterEnter = scatter\n        .enter()\n        .append('circle')\n        .style('fill', () => Chart.colors(index * 5))\n        .attr('class', `francy-scatter-${index}`)\n        .attr('r', 5)\n        .attr('cx', function (d, i) {\n          return self.xScale(i);\n        })\n        .attr('cy', function (d) {\n          return self.yScale(d);\n        })\n        .on('mouseenter', function (d) {\n          d3.select(this).transition()\n            .duration(250)\n            .style('fill-opacity', 0.5)\n            .attr('r', 10);\n          self.handlePromise(self.tooltip.load(Chart.tooltip(key, d), true).render());\n        })\n        .on('mouseleave', function () {\n          d3.select(this).transition()\n            .duration(250)\n            .style('fill-opacity', 1)\n            .attr('r', 5);\n          self.tooltip.unrender();\n        });\n\n      scatterEnter.merge(scatter);\n    });\n\n    this._renderAxis();\n\n    this._renderLegend();\n\n    return this;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-d3/src/chart/scatter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 457,
    "kind": "class",
    "name": "ScatterChart",
    "memberof": "packages/francy-renderer-d3/src/chart/scatter.js",
    "static": true,
    "longname": "packages/francy-renderer-d3/src/chart/scatter.js~ScatterChart",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-d3/src/chart/scatter.js",
    "importStyle": "ScatterChart",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "packages/francy-renderer-d3/src/chart/chart.js~Chart"
    ]
  },
  {
    "__docId__": 458,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-d3/src/chart/scatter.js~ScatterChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/scatter.js~ScatterChart#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-renderer-d3/src/chart/scatter.js~ScatterChart",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/chart/scatter.js~ScatterChart#render",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Initializer.initialize",
        "arguments": "()"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 460,
    "kind": "file",
    "name": "packages/francy-renderer-d3/src/graph/factory.js",
    "content": "import { Decorators, Renderer } from 'francy-core';\nimport GenericGraph from './generic';\nimport TreeGraph from './tree';\n\nexport default class Graph extends Renderer {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  @Decorators.Data.requires('canvas.graph')\n  async render() {\n\n    let element = undefined;\n    let graph = element;\n    switch (this.data.canvas.graph.type) {\n    case 'tree':\n      graph = new TreeGraph(this.options, this.context);\n      break;\n    default:\n      graph = new GenericGraph(this.options, this.context);\n    }\n\n    element = await this.handlePromise(graph.load(this.data).render());\n\n    if (element) {\n      setTimeout(element.parent.zoomToFit, this.transitionDuration);\n    }\n\n    return element;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-d3/src/graph/factory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 461,
    "kind": "class",
    "name": "Graph",
    "memberof": "packages/francy-renderer-d3/src/graph/factory.js",
    "static": true,
    "longname": "packages/francy-renderer-d3/src/graph/factory.js~Graph",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-d3/src/graph/factory.js",
    "importStyle": "Graph",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~Renderer"
    ]
  },
  {
    "__docId__": 462,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-d3/src/graph/factory.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/graph/factory.js~Graph#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-renderer-d3/src/graph/factory.js~Graph",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/graph/factory.js~Graph#render",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('canvas.graph')"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "file",
    "name": "packages/francy-renderer-d3/src/graph/generic.js",
    "content": "import { Decorators, Graph } from 'francy-core';\n\n/* global d3 */\n\nexport default class GenericGraph extends Graph {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  @Decorators.Initializer.initialize()\n  async render() {\n    let self = this,\n      loader = Decorators.Loader.withContext(this).show(),\n      simulationActive = this.data.canvas.graph.simulation || this.context.configuration.object.simulation,\n      canvasNodes = this.data.canvas.graph.nodes ? JSON.parse(JSON.stringify(Object.values(this.data.canvas.graph.nodes))) : [],\n      canvasLinks = this.data.canvas.graph.links ? JSON.parse(JSON.stringify(Object.values(this.data.canvas.graph.links))) : [];\n\n    let linkGroup = this.element.selectAll('g.francy-links');\n\n    if (!linkGroup.node()) {\n      linkGroup = this.element.append('g').classed('francy-links', true);\n    }\n\n    let links = linkGroup.selectAll('g.francy-link').data();\n    let linksToAdd = this._filterNewElements(canvasLinks, links);\n\n    let link = linkGroup.selectAll('g.francy-link').data(linksToAdd, d => d.id);\n\n    if (this.data.canvas.graph.type === 'directed') {\n      // this means we need arrows, so we append the markers\n      let defs = this.parent.select('defs');\n      if (!defs.node()) {\n        defs = this.parent.append('defs');\n      }\n      defs.selectAll('marker')\n        .data(linksToAdd)\n        .enter().append('marker')\n        .classed('francy-arrows', true)\n        .attr('id', d => `arrow-${d.id}`)\n        .attr('viewBox', '0 -5 10 10')\n        .attr('markerUnits', 'strokeWidth')\n        .attr('orient', 'auto')\n        .append('path')\n        .attr('d', 'M0,-5 L10,0 L0,5')\n        .style('fill', d => d.color || '#000');\n    }\n\n    let nodeGroup = this.element.selectAll('g.francy-nodes');\n\n    if (!nodeGroup.node()) {\n      nodeGroup = this.element.append('g').classed('francy-nodes', true);\n    }\n\n    let nodes = nodeGroup.selectAll('g.francy-node').data();\n    let nodesToAdd = this._filterNewElements(canvasNodes, nodes);\n\n    let node = nodeGroup.selectAll('g.francy-node').data(nodesToAdd, d => d.id);\n\n    // this means no changes, so we can safely return\n    if (node.exit().data().length === 0 && node.enter().data().length === 0 &&\n      link.enter().data().length === 0 && link.exit().data().length === 0) {\n      loader.hide();\n      return;\n    }\n\n    let linkEnter = link.enter().append('g')\n      .classed('francy-link', true);\n\n    linkEnter.append('path')\n      .classed('francy-edge', true)\n      .style('fill', 'none')\n      .style('stroke-width', d => d.invisible ? 0 : Math.sqrt(d.weight || 0.2))\n      .style('stroke', d => d.color || '#000');\n\n    if (this.data.canvas.graph.type === 'directed') {\n      linkEnter.append('path')\n        .classed('francy-edge-arrow', true)\n        .style('stroke', 'none')\n        .style('marker-start', d => `url(#arrow-${d.id})`)\n        .style('stroke-width', d => d.invisible ? 0 : Math.sqrt(d.weight || 0.2));\n    }\n\n    linkEnter.filter(d => d.title).append('text')\n      .classed('francy-label', true)\n      //.style('font - size', d => d.invisible ? 0 : 7 * Math.sqrt(d.weight || 1))\n      .style('opacity', 0.1)\n      .style('opacity', 0.1)\n      .text(d => d.title)\n      .attr('text-anchor', 'middle');\n\n    link.exit().remove();\n\n    link = linkGroup.selectAll('g.francy-link');\n\n    // on mouse over show labels opacity 1\n    //this.graphOperations.labelsOpacityBehavior(link);\n\n    let nodeEnter = node.enter().append('g').attr('id', d => d.id)\n      .classed('francy-node', true)\n      .classed('francy-highlight', true)\n      .classed('francy-selected', d => d.selected);\n\n    nodeEnter.append('path')\n      .attr('d', d3.symbol().type(d => Graph.getSymbol(d.type)).size(d => d.size * 100))\n      .style('fill', d => d.conjugate ? Graph.colors(d.conjugate * 5) : d.color ? d.color : Graph.colors(d.layer * 5))\n      .classed('francy-symbol', true)\n      .classed('francy-context', d => Object.values(d.menus).length && Object.values(d.menus).length > 0);\n\n    nodeEnter.filter(d => d.title).append('text')\n      .classed('francy-label', true)\n      .text(d => d.title)\n      .style('font-size', d => 5 * Math.sqrt(d.size))\n      .attr('x', function () {\n        // apply mathjax if this is the case\n        let text = d3.select(this);\n        if (text.text().startsWith('$') && text.text().endsWith('$')) {\n          // we need to set the position after re-render the latex\n          self.handlePromise(self.mathjax.settings({\n            appendTo: { element: text },\n            renderType: 'SVG',\n            postFunction: () => {\n              self.setLabelXPosition(this);\n              simulation.restart();\n            }\n          }).render());\n        }\n        return self._getXPosition(this);\n      });\n\n    node.exit().remove();\n\n    node = nodeGroup.selectAll('g.francy-node');\n\n    if (simulationActive) {\n      let radius = 0,\n        symbolRadius = 0,\n        ylayered = false,\n        xlayered = false;\n\n      node.each(function () {\n        let bound = this.getBBox();\n        // calculate default radius for colisions\n        // check the widest group Bounding Box\n        if (radius < bound.width) {\n          radius = bound.width;\n        }\n        // check the widest path Bounding Box\n        let node = d3.select(this);\n        let symbolBound = node.select('path.francy-symbol').node().getBBox();\n        if (symbolRadius < symbolBound.width) {\n          symbolRadius = symbolBound.width;\n        }\n        // check whether the graph will be layered on y - hasse\n        if (node.data()[0].layer != 0) {\n          ylayered = true;\n        }\n        // check whether the graph will be layered on x\n        if (node.data()[0].conjugate != 0) {\n          xlayered = true;\n        }\n      });\n\n      //Canvas Forces\n      var simulation = d3.forceSimulation(),\n        safeTicked = Decorators.Error.wrap(ticked).withContext(self).onErrorThrow(false).onErrorExec(simulation.stop),\n        safeEnd = Decorators.Error.wrap(endSimulation).withContext(self);\n\n      let linkForce = d3.forceLink(linksToAdd).id(d => d.id).distance(d => d.length || 100);\n      let chargeStrength = -5 * Math.log(nodesToAdd.length) * Math.log(linksToAdd.length);\n      chargeStrength = chargeStrength < -400 ? chargeStrength : -400;\n\n      simulation.nodes(nodesToAdd)\n        .force('charge-1', ylayered ? undefined : d3.forceManyBody().strength(chargeStrength * 0.15))\n        .force('x', xlayered ? d3.forceX(d => d.conjugate ? +d.conjugate % 2 === 0 ? 0 : self.data.canvas.width : self.data.canvas.width / 2) : d3.forceX())\n        .force('y', ylayered ? d3.forceY(d => +d.layer * 100).strength(1) : d3.forceY())\n        .force('charge-2', d3.forceManyBody().strength(chargeStrength))\n        //.force('link', ylayered ? linkForce.strength(d => d.weight ? Math.sqrt(d.weight) % 1 : 1 / (linksToAdd.length + 1)) : linkForce)\n        .force('link', ylayered ? linkForce.strength(1 / (linksToAdd.length + 1)) : linkForce)\n        .force('collide', d3.forceCollide().radius((radius > symbolRadius ? radius : symbolRadius * 1.5) / 2))\n        .on('tick', () => safeTicked.handle())\n        .on('end', () => safeEnd.handle());\n\n      if (nodesToAdd.length >= 1000 || linksToAdd.length >= 1000) {\n        self.parent.attr('visibility', 'hidden');\n        simulation.alphaMin(0.05).on('tick', undefined);\n      }\n\n    } else {\n      // well, simulation is off\n      endSimulation();\n    }\n\n    function endSimulation() {\n      self.parent.attr('visibility', 'visible');\n      safeTicked.handle();\n      self.parent.zoomToFit();\n      loader.hide();\n    }\n\n    let edges = link.selectAll('path.francy-edge');\n    let labels = link.selectAll('text.francy-label');\n\n    function ticked() {\n      edges\n        .attr('d', function (d) {\n          if (d.source.id === d.target.id) {\n            return `M${d.source.x},${d.source.y} A${d.target.size + 10},${d.target.size + 10} -45,1,0 ${d.source.x - 1},${d.source.y}`;\n          }\n          return `M${d.source.x},${d.source.y} L${d.target.x},${d.target.y}`;\n        });\n\n      if (self.data.canvas.graph.type === 'directed') {\n        link.each(function () {\n\n          let g = d3.select(this),\n            data = g.data()[0],\n            nodeEl = d3.select(`#${data.target.id} > .francy-symbol`).node();\n\n          if (!nodeEl) return;\n\n          let pathEl = g.select('.francy-edge').node(),\n            pathLength = pathEl.getTotalLength(),\n            nodeSize = (Math.floor(nodeEl.getBBox().width) + 4) / 2,\n            pathPoint = pathEl.getPointAtLength(pathLength - nodeSize - (data.weight || 1)),\n            pathPoint2 = pathEl.getPointAtLength(pathLength - nodeSize),\n            x1 = pathPoint.x,\n            y1 = pathPoint.y,\n            x2 = pathPoint2.x,\n            y2 = pathPoint2.y;\n\n          if (data.source.id === data.target.id) {\n            x2 += (x1 - x2) / (y1 - y2);\n            y2 += (y1 - y2) / (x1 - x2);\n          }\n\n          g.select('.francy-edge-arrow').attr('d', `M${x1},${y1} L${x2},${y2}`);\n        });\n      }\n\n      labels\n        .attr('x', d => Graph.linkXPos(d.target, d.source))\n        .attr('y', d => Graph.linkYPos(d.target, d.source));\n\n      node.attr('transform', d => `translate(${d.x},${d.y})`);\n    }\n\n    this.graphOperations.dragBehavior(node, simulation, simulationActive).call(this, this.context.configuration.object.dragNodes);\n\n    if (node && !node.empty()) {\n\n      this._applyEvents(node);\n\n      let connectedNodes = self.graphOperations.connectedNodes(node, canvasNodes, link, canvasLinks);\n      let nodeOnClick = node.on('click');\n      node.on('click', function (d) {\n        // default, highlight connected nodes\n        connectedNodes.call(this);\n        // any callbacks will be handled here\n        nodeOnClick && nodeOnClick.call(this, d);\n      });\n      link.on('click', function () {\n        // default, highlight connected nodes\n        connectedNodes.call(this);\n      });\n    }\n\n    return this;\n\n  }\n\n  _filterNewElements(canvasObjects, d3Element) {\n    let newElements = [];\n    canvasObjects.forEach(o => {\n      let data = d3Element.find(d => d.id === o.id);\n      let tmp = Object.assign({}, o);\n      if (data) {\n        // remove positions from old ones\n        delete tmp.x;\n        delete tmp.y;\n        delete tmp.source;\n        delete tmp.target;\n        newElements.push(Object.assign(data, tmp));\n      } else {\n        delete o.x;\n        delete o.y;\n        newElements.push(o);\n      }\n    });\n    return newElements;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-d3/src/graph/generic.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 465,
    "kind": "class",
    "name": "GenericGraph",
    "memberof": "packages/francy-renderer-d3/src/graph/generic.js",
    "static": true,
    "longname": "packages/francy-renderer-d3/src/graph/generic.js~GenericGraph",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-d3/src/graph/generic.js",
    "importStyle": "GenericGraph",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~Graph"
    ]
  },
  {
    "__docId__": 466,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-d3/src/graph/generic.js~GenericGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/graph/generic.js~GenericGraph#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-renderer-d3/src/graph/generic.js~GenericGraph",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/graph/generic.js~GenericGraph#render",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Initializer.initialize",
        "arguments": "()"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "_filterNewElements",
    "memberof": "packages/francy-renderer-d3/src/graph/generic.js~GenericGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/graph/generic.js~GenericGraph#_filterNewElements",
    "access": "private",
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "params": [
      {
        "name": "canvasObjects",
        "types": [
          "*"
        ]
      },
      {
        "name": "d3Element",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "file",
    "name": "packages/francy-renderer-d3/src/graph/tree.js",
    "content": "import { Decorators, Graph, Logger } from 'francy-core';\n\n/* global d3 */\n\nexport default class TreeGraph extends Graph {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  @Decorators.Initializer.initialize()\n  async render() {\n\n    let nodes = this.data.canvas.graph.nodes ? Object.values(this.data.canvas.graph.nodes) : [],\n      i = 0,\n      root;\n\n    root = d3.stratify().id(d => d.id).parentId(d => d.parent)(nodes);\n    root.x0 = this.height / 2;\n    root.y0 = 0;\n\n    // compute height based on the depth of the graph\n    let levelWidth = [1];\n    let childCount = function (level, n) {\n\n      if (n.children && n.children.length > 0) {\n        if (levelWidth.length <= level + 1) levelWidth.push(0);\n\n        levelWidth[level + 1] += n.children.length;\n        n.children.forEach(function (d) {\n          childCount(level + 1, d);\n        });\n      }\n    };\n    childCount(0, root);\n    let size = d3.max(levelWidth) * 100;\n\n    let treemap = d3.tree().size([size, size])\n      .separation((a, b) => a.parent == b.parent ? a.data.size : a.data.size * 2);\n\n    if (this.data.canvas.graph.collapsed) {\n      root.children.forEach(collapse);\n    }\n\n    update.call(this, root)\n      .catch(error => Logger.warn(`(${this.context.instanceId}) ${error}`, error))\n      .then(setTimeout(this.parent.zoomToFit, this.transitionDuration));\n\n    function collapse(d) {\n      if (d.children) {\n        d._children = d.children;\n        d._children.forEach(collapse);\n        d.children = null;\n      }\n    }\n\n    async function update(source) {\n      let self = this;\n\n      let treeData = treemap(root);\n\n      let nodes = treeData.descendants(),\n        links = treeData.descendants().slice(1);\n\n      nodes.forEach(d => d.y = d.depth * 100);\n\n      let linkGroup = this.element.selectAll('g.francy-links');\n\n      if (!linkGroup.node()) {\n        linkGroup = this.element.append('g').attr('class', 'francy-links');\n      }\n\n      let link = linkGroup.selectAll('g.francy-link')\n        .data(links, d => d.id || (d.id = ++i));\n\n      let linkEnter = link.enter().append('g')\n        .classed('francy-link', true);\n\n      linkEnter.append('path')\n        .attr('class', 'francy-edge')\n        .style('fill', 'none')\n        .style('stroke-width', d => d.invisible ? 0 : Math.sqrt(d.weight || 0.2))\n        .style('stroke', d => d.color || '#000')\n        .attr('d', () => {\n          let o = { x: source.x0, y: source.y0 };\n          return diagonal(o, o);\n        });\n\n      linkEnter.merge(link).selectAll('path.francy-edge')\n        .transition().duration(this.transitionDuration)\n        .attr('d', d => diagonal(d, d.parent));\n\n      link.exit().selectAll('path.francy-edge')\n        .transition().duration(this.transitionDuration)\n        .attr('d', () => {\n          let o = { x: source.x, y: source.y };\n          return diagonal(o, o);\n        }).remove();\n\n      link.exit().transition().duration(this.transitionDuration).remove();\n\n      nodes.forEach((d) => {\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n\n      function diagonal(s, d) {\n        return `M ${s.y} ${s.x}\n            C ${(s.y + d.y) / 2} ${s.x},\n              ${(s.y + d.y) / 2} ${d.x},\n              ${d.y} ${d.x}`;\n      }\n\n      let nodeGroup = this.element.selectAll('g.francy-nodes');\n\n      if (!nodeGroup.node()) {\n        nodeGroup = this.element.append('g').attr('class', 'francy-nodes');\n      }\n\n      let node = nodeGroup.selectAll('g.francy-node')\n        .data(nodes, d => d.id || (d.id = ++i));\n\n      let nodeEnter = node.enter().append('g')\n        .attr('id', d => d.id)\n        .attr('class', 'francy-node')\n        .attr('transform', () => `translate(${source.y0},${source.x0})`);\n\n      nodeEnter.append('path')\n        .attr('d', d3.symbol().type(d => Graph.getSymbol(d.data.type)).size(d => d.data.size * 100))\n        .attr('class', 'francy-symbol');\n\n      nodeEnter.filter(d => d.data.title).append('text')\n        .attr('class', 'francy-label')\n        .text(d => d.data.title)\n        .style('font-size', d => 5 * Math.sqrt(d.weight || 1))\n        .style('cursor', d => d.children || d._children ? 'pointer' : 'default')\n        .attr('x', function () {\n          // apply mathjax if this is the case\n          let text = d3.select(this);\n          if (text.text().startsWith('$') && text.text().endsWith('$')) {\n            // we need to set the position after re-render the latex\n            self.handlePromise(self.mathjax.settings({\n              appendTo: { element: text },\n              renderType: 'SVG',\n              postFunction: () => {\n                self.setLabelXPosition(this);\n              }\n            }).render());\n          }\n          return self._getXPosition(this);\n        });\n\n      let nodeUpdate = nodeEnter.merge(node);\n\n      nodeUpdate.transition()\n        .duration(this.transitionDuration)\n        .attr('transform', d => `translate(${d.y},${d.x})`);\n\n      node.exit().transition().duration(this.transitionDuration)\n        .attr('transform', () => `translate(${source.y},${source.x})`)\n        .remove();\n\n      nodeGroup.selectAll('path.francy-symbol')\n        .style('fill', d => d.children || d._children ? '#fff' : Graph.colors(d.data.layer * 5))\n        .style('cursor', d => d.children || d._children ? 'pointer' : 'default');\n\n      node = nodeGroup.selectAll('g.francy-node');\n\n      if (node.node()) {\n        this._applyEvents(node);\n\n        let nodeOnClick = node.on('click');\n        node.on('click', function (d) {\n          // any callbacks will be handled here\n          nodeOnClick.call(this, d.data);\n          // default, highlight connected nodes\n          click.call(this, d);\n        });\n      }\n\n      // Toggle children on click.\n      function click(d) {\n        if (d.children) {\n          d._children = d.children;\n          d.children = null;\n        } else {\n          d.children = d._children;\n          d._children = null;\n        }\n        update.call(self, d)\n          .catch(error => Logger.warn(`(${this.context.instanceId}) ${error}`, error))\n          .then(setTimeout(self.parent.zoomToFit, self.transitionDuration));\n      }\n    }\n\n    return this;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-d3/src/graph/tree.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 470,
    "kind": "class",
    "name": "TreeGraph",
    "memberof": "packages/francy-renderer-d3/src/graph/tree.js",
    "static": true,
    "longname": "packages/francy-renderer-d3/src/graph/tree.js~TreeGraph",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-d3/src/graph/tree.js",
    "importStyle": "TreeGraph",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~Graph"
    ]
  },
  {
    "__docId__": 471,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-d3/src/graph/tree.js~TreeGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/graph/tree.js~TreeGraph#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-renderer-d3/src/graph/tree.js~TreeGraph",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-renderer-d3/src/graph/tree.js~TreeGraph#render",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Initializer.initialize",
        "arguments": "()"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 473,
    "kind": "file",
    "name": "packages/francy-renderer-graphviz/index.js",
    "content": "import Canvas from './src/canvas';\nimport { RenderingConfiguration } from 'francy-core';\n\nexport const RENDERER_NAME = 'GraphViz-Renderer';\n\nexport class GraphvizRenderer extends RenderingConfiguration {\n    \n  constructor(isDefault = false) {\n    super(Canvas, RENDERER_NAME, isDefault);\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-graphviz/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 474,
    "kind": "variable",
    "name": "RENDERER_NAME",
    "memberof": "packages/francy-renderer-graphviz/index.js",
    "static": true,
    "longname": "packages/francy-renderer-graphviz/index.js~RENDERER_NAME",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-graphviz/index.js",
    "importStyle": "{RENDERER_NAME}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "class",
    "name": "GraphvizRenderer",
    "memberof": "packages/francy-renderer-graphviz/index.js",
    "static": true,
    "longname": "packages/francy-renderer-graphviz/index.js~GraphvizRenderer",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-graphviz/index.js",
    "importStyle": "{GraphvizRenderer}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~RenderingConfiguration"
    ]
  },
  {
    "__docId__": 476,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-graphviz/index.js~GraphvizRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/index.js~GraphvizRenderer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 477,
    "kind": "file",
    "name": "packages/francy-renderer-graphviz/src/canvas.js",
    "content": "import { CompositeRenderer, Decorators, Logger, RENDERING_EVENTS } from 'francy-core';\nimport ChartGeneric from './chart/generic';\nimport GraphGeneric from './graph/generic';\n\n/* global d3 */\n\nexport default class Canvas extends CompositeRenderer {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    this.graphFactory = new GraphGeneric(this.options, this.context);\n    this.chartFactory = new ChartGeneric(this.options, this.context);\n    this.graphvizEngines = ['circo', 'dot', 'fdp', 'neato', 'osage', 'patchwork', 'twopi'];\n    this.graphvizRankdirs = { 'TB': 'Top to Bottom', 'LR': 'Left to Right', 'BT': 'Bottom to Top', 'RL': 'Right to Left' };\n    // this only adds if does not exist\n    this.context.configuration.addProperty('graphvizEngine', 'dot');\n    this.context.configuration.addProperty('graphvizRankdir', 'TB');\n  }\n\n  @Decorators.Data.requires('canvas')\n  async render() {\n    let self = this;\n\n    const frameId = `Frame-${this.data.canvas.id}`;\n\n    let svg = d3.select(`div#${frameId}>svg`);\n    if (!svg.node() || !svg.node().__data__) {\n      d3.select(`div#${frameId}>svg`).remove();\n    }\n\n    // graphviz creates the svg element, \n    // so we pick the frame instead\n    this.element = d3.select(`div#${frameId}`);\n\n    // cannot continue if canvas is not present\n    if (!this.element.node()) {\n      throw new Error(`Oops, could not create canvas within the Frame ID [${frameId}]... Cannot proceed.`);\n    }\n\n    function updateZoom(translateX, translateY, scale) {\n      self.element.call(self.zoom.transform, d3.zoomIdentity.translate(translateX, translateY).scale(scale, scale));\n    }\n\n    function zoomToFit(force) {\n      // only execute if enable, of course\n      if (self.data.canvas.zoomToFit || force) {\n        let bounds = self.element.select('g.francy-content').node().getBBox();\n\n        let clientBounds = self.element.node().getBoundingClientRect(),\n          fullWidth = clientBounds.right - clientBounds.left,\n          fullHeight = clientBounds.bottom - clientBounds.top;\n\n        let width = +bounds.width,\n          height = +bounds.height;\n\n        if (width === 0 || height === 0) return;\n\n        let midX = bounds.x + width / 2,\n          midY = bounds.y + height / 2;\n\n        let scale = 0.9 / Math.max(width / fullWidth, height / fullHeight);\n        let translateX = fullWidth / 2 - scale * midX,\n          translateY = fullHeight / 2 - scale * midY;\n\n        self.element.select('g.francy-content').transition().duration(self.transitionDuration)\n          .attr('transform', `translate(${translateX},${translateY})scale(${scale},${scale})`)\n          .on('end', () => updateZoom(translateX, translateY, scale));\n      }\n    }\n\n    this.element.zoomToFit = this.zoomToFit = zoomToFit;\n\n    Logger.debug(`(${this.context.instanceId}) Canvas updated [${frameId}]...`);\n\n    this._buildMenu();\n\n    this.removeChildren();\n    this.addChild(this.graphFactory).addChild(this.chartFactory);\n    this.handlePromise(this.renderChildren());\n\n    return this;\n  }\n\n  _buildMenu() {\n    var self = this;\n    // here we have access to MainMenu\n    this.graphvizEngines.forEach((engine) => {\n      this.parentClass.MainMenu.addMultiMenuOnSettingsMenu({\n        menuId: 'graphviz-engines-entry',\n        menuTitle: 'Viz Engine',\n        entryId: `graphviz-engine-${engine}-entry`,\n        entryTitle: `${self.context.configuration.object.graphvizEngine === engine ? '&#9745' : '&#9744'} ${engine}`,\n        entryOnClickCallback: function () {\n          self.context.configuration.object.graphvizEngine = engine;\n        },\n        entryOnEachCallback: function () {\n          let engineCheckId = `graphvizEngine-checkbox-${self.data.canvas.id}`;\n          self.context.configuration.subscribe('graphvizEngine', function (value) {\n            d3.select(this).html(`${value === engine ? '&#9745' : '&#9744'} ${engine}`);\n          }, engineCheckId);\n        }\n      });\n    });\n\n    function reRender() {\n      // remove previous rendered canvas\n      self.element.select('g').selectAll('*').remove();\n      // re-render\n      setTimeout(() => {\n        let Renderer = self.context.renderingManager.activeRenderer();\n        self.options.appendTo.data = self.options.appendTo.canvas.data;\n        self.options.appendTo.canvas = new Renderer(self.options, self.context);\n        self.handlePromise(self.options.appendTo.render());\n      }, 100);\n    }\n\n    // re-render when engine changes\n    let engineRenderId = `graphvizEngine-reRender-${self.data.canvas.id}`;\n    self.context.configuration.subscribe('graphvizEngine', reRender, engineRenderId);\n\n    Object.keys(this.graphvizRankdirs).forEach((dir) => {\n      this.parentClass.MainMenu.addMultiMenuOnSettingsMenu({\n        menuId: 'graphviz-rankdir-entry',\n        menuTitle: 'Viz Rankdir',\n        entryId: `graphviz-rankdir-${dir}-entry`,\n        entryTitle: `${self.context.configuration.object.graphvizRankdir === dir ? '&#9745' : '&#9744'} ${self.graphvizRankdirs[dir]}`,\n        entryOnClickCallback: function () {\n          self.context.configuration.object.graphvizRankdir = dir;\n        },\n        entryOnEachCallback: function () {\n          let dirCheckId = `graphvizEngine-rankdir-${self.data.canvas.id}`;\n          self.context.configuration.subscribe('graphvizRankdir', function (value) {\n            d3.select(this).html(`${value === dir ? '&#9745' : '&#9744'} ${dir}`);\n          }, dirCheckId);\n        }\n      });\n    });\n\n    // re-render when engine changes\n    let dirRenderId = `graphvizRankdir-reRender-${self.data.canvas.id}`;\n    self.context.configuration.subscribe('graphvizRankdir', reRender, dirRenderId);\n\n    // remove menu if renderer is disabled\n    let rendererDisableId = `graphvizEngine-disable-${self.data.canvas.id}`;\n    self.context.renderingManager.subscribe(RENDERING_EVENTS.STATUS, function (r) {\n      if (!r.enable) {\n        self.parentClass.MainMenu.removeMenuEntry('graphviz-engines-entry');\n        self.parentClass.MainMenu.removeMenuEntry('graphviz-rankdir-entry');\n      }\n    }, rendererDisableId);\n\n    if (this.data.canvas.graph) {\n      this.parentClass.MainMenu.addMultiMenuOnSettingsMenu({\n        menuId: 'graph-settings-entry',\n        menuTitle: 'Graph',\n        entryId: 'neighbours-entry',\n        entryTitle: `${self.context.configuration.object.showNeighbours ? '&#9745' : '&#9744'} Show Neighbours`,\n        entryOnClickCallback: function () {\n          self.context.configuration.object.showNeighbours = !self.context.configuration.object.showNeighbours;\n        },\n        entryOnEachCallback: function () {\n          let showNeighboursId = `showNeighbours-onChange-${self.data.canvas.id}`;\n          self.context.configuration.subscribe('showNeighbours', value => {\n            d3.select(this).html(`${value ? '&#9745' : '&#9744'} Show Neighbours`);\n          }, showNeighboursId);\n        }\n      });\n\n      let removeMenuId = `graphSettings-removeMenu-${self.data.canvas.id}`;\n      // remove menu if renderer is disabled\n      self.context.renderingManager.subscribe(RENDERING_EVENTS.STATUS, r => {\n        if (!r.enable) {\n          this.parentClass.MainMenu.removeMenuEntry('graph-settings-entry');\n        }\n      }, removeMenuId);\n    }\n\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-graphviz/src/canvas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 478,
    "kind": "class",
    "name": "Canvas",
    "memberof": "packages/francy-renderer-graphviz/src/canvas.js",
    "static": true,
    "longname": "packages/francy-renderer-graphviz/src/canvas.js~Canvas",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-graphviz/src/canvas.js",
    "importStyle": "Canvas",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~CompositeRenderer"
    ]
  },
  {
    "__docId__": 479,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-graphviz/src/canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/canvas.js~Canvas#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 480,
    "kind": "member",
    "name": "graphFactory",
    "memberof": "packages/francy-renderer-graphviz/src/canvas.js~Canvas",
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/canvas.js~Canvas#graphFactory",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 481,
    "kind": "member",
    "name": "chartFactory",
    "memberof": "packages/francy-renderer-graphviz/src/canvas.js~Canvas",
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/canvas.js~Canvas#chartFactory",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "member",
    "name": "graphvizEngines",
    "memberof": "packages/francy-renderer-graphviz/src/canvas.js~Canvas",
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/canvas.js~Canvas#graphvizEngines",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "member",
    "name": "graphvizRankdirs",
    "memberof": "packages/francy-renderer-graphviz/src/canvas.js~Canvas",
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/canvas.js~Canvas#graphvizRankdirs",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"TB\": string, \"LR\": string, \"BT\": string, \"RL\": string}"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-renderer-graphviz/src/canvas.js~Canvas",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/canvas.js~Canvas#render",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('canvas')"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-renderer-graphviz/src/canvas.js~Canvas",
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/canvas.js~Canvas#element",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "_buildMenu",
    "memberof": "packages/francy-renderer-graphviz/src/canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/canvas.js~Canvas#_buildMenu",
    "access": "private",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 487,
    "kind": "file",
    "name": "packages/francy-renderer-graphviz/src/chart/generic.js",
    "content": "import { Decorators, Renderer } from 'francy-core';\n\n/* global d3 */\n\nexport default class ChartGeneric extends Renderer {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  @Decorators.Data.requires('canvas.chart')\n  async render() {\n    const canvasId = `Canvas-${this.data.canvas.id}`;\n    this.parentClass.element = this.parent.append('svg')\n      .classed('francy-canvas', true)\n      .attr('xmlns', 'http://www.w3.org/2000/svg')\n      .attr('xmlns:xlink', 'http://www.w3.org/1999/xlink')\n      .attr('id', canvasId).attr('width', '100%').attr('height', this.data.canvas.height);\n\n    this.element = this.parentClass.element.append('g').classed('francy-content', true)\n      .classed('graph', true)\n      .attr('id', 'graph0').append('text').text('Not supported by this renderer...');\n\n    this.options.appendTo.zoom = d3.zoom();\n\n    this.parentClass.zoomToFit(true);\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-graphviz/src/chart/generic.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 488,
    "kind": "class",
    "name": "ChartGeneric",
    "memberof": "packages/francy-renderer-graphviz/src/chart/generic.js",
    "static": true,
    "longname": "packages/francy-renderer-graphviz/src/chart/generic.js~ChartGeneric",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-graphviz/src/chart/generic.js",
    "importStyle": "ChartGeneric",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~Renderer"
    ]
  },
  {
    "__docId__": 489,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-graphviz/src/chart/generic.js~ChartGeneric",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/chart/generic.js~ChartGeneric#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-renderer-graphviz/src/chart/generic.js~ChartGeneric",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/chart/generic.js~ChartGeneric#render",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('canvas.chart')"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 491,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-renderer-graphviz/src/chart/generic.js~ChartGeneric",
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/chart/generic.js~ChartGeneric#element",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 492,
    "kind": "file",
    "name": "packages/francy-renderer-graphviz/src/graph/generic.js",
    "content": "import { Callback, ContextMenu, Decorators, Graph, Tooltip, Utilities } from 'francy-core';\nimport DOTLanguageConverterHelper from '../util/dot-converter';\n\n/* global d3 */\n\nexport default class GraphGeneric extends Graph {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    this.callback = new Callback(this.options, this.context);\n    this.tooltip = new Tooltip(this.options, this.context);\n    this.contextMenu = new ContextMenu(this.options, this.context);\n  }\n\n  @Decorators.Data.requires('canvas.graph')\n  @Decorators.Initializer.initialize()\n  async render() {\n    let self = this,\n      loader = Decorators.Loader.withContext(this).show(),\n      dot = new DOTLanguageConverterHelper(this.context).load(this.data).convert(),\n      canvasNodes = this.data.canvas.graph.nodes ? JSON.parse(JSON.stringify(Object.values(this.data.canvas.graph.nodes))) : [],\n      canvasLinks = this.data.canvas.graph.links ? JSON.parse(JSON.stringify(Object.values(this.data.canvas.graph.links))) : [];\n\n    self.parent\n      .graphviz()\n      .logEvents(false)\n      .fade(false)\n      .engine(self.context.configuration.object.graphvizEngine)\n      .keyMode('id')\n      .dot(dot)\n      .render(function () {\n        self.parentClass.element = this._selection.selectWithoutDataPropagation('svg');\n        self.parentClass.element.attr('width', '100%').attr('height', self.data.canvas.height)\n          .attr('viewBox', undefined)\n          .attr('id', `Canvas-${self.data.canvas.id}`)\n          .classed('francy-canvas', true);\n\n        self.options.appendTo.zoom = this.zoomBehavior();\n\n        self.element = self.parentClass.element.selectWithoutDataPropagation('g');\n        self.element.classed('francy-content', true);\n        self.element.selectAll('title').remove();\n        self.element.selectWithoutDataPropagation('polygon').remove();\n\n        let nodesG = self.element.append('g').classed('francy-nodes', true);\n        let linksG = self.element.append('g').classed('francy-links', true);\n        let nodes = self.element.selectAll('.node');\n        let links = self.element.selectAll('.edge');\n\n        nodes.each(function (d) {\n          Object.assign(d, self.data.canvas.graph.nodes[d.key]);\n        })\n          .classed('francy-node', true)\n          .classed('francy-highlight', true)\n          .classed('francy-selected', d => d.selected);\n\n        nodes.selectAll('text')\n          .classed('francy-label', true)\n          .attr('x', function () {\n            // apply mathjax if this is the case\n            let text = d3.select(this);\n            if (text.text().startsWith('$') && text.text().endsWith('$')) {\n              // we need to set the position after re-render the latex\n              let x = text.datum().attributes.x;\n              let y = text.datum().attributes.y;\n              let parentG = d3.select(text.node().parentNode);\n              self.handlePromise(self.mathjax.settings({\n                appendTo: { element: text },\n                renderType: 'SVG',\n                postFunction: function () {\n                  let svg = parentG.select('svg');\n                  if (svg.node()) {\n                    self.setLabelXPosition(svg, x);\n                    self.setLabelYPosition(svg, y);\n                  }\n                }\n              }).render());\n            }\n            return text.datum().attributes.x;\n          });\n\n        links.classed('francy-link', true).each(function (d) {\n          Object.assign(d, self.data.canvas.graph.links[d.key]);\n          d3.select(this).style('stroke-width', d => d.invisible ? 0 : Math.sqrt(d.weight || 0.2));\n        });\n\n        let removedNodes = nodes.remove();\n        let removedLinks = links.remove();\n        removedNodes.each(function () {\n          nodesG.node().appendChild(d3.select(this).node());\n        });\n        removedLinks.each(function () {\n          linksG.node().appendChild(d3.select(this).node());\n        });\n\n        self._applyEvents(nodes);\n\n        let connectedNodes = self._connectedNodes(nodes, canvasNodes, links, canvasLinks);\n        let nodeOnClick = nodes.on('click');\n        nodes.on('click', function (d) {\n          // default, highlight connected nodes\n          connectedNodes.call(this);\n          // any callbacks will be handled here\n          nodeOnClick && nodeOnClick.call(this, d);\n        });\n        links.on('click', function () {\n          // default, highlight connected nodes\n          connectedNodes.call(this);\n        });\n\n        self.parentClass.zoomToFit(true);\n        loader.hide();\n      })\n      .onerror(function () {\n        loader.hide();\n      });\n  }\n\n  setLabelXPosition(element, x) {\n    try {\n      let width = element.node().width.baseVal.value;\n      element.attr('x', Math.ceil(Number(x) - (width / 2)));\n    } catch (Error) {\n      // don't care, this might fail for multiple reasons\n      // the use rmight have switch renderer for instance\n      // no worries if something is not properly aligned :P\n    }\n  }\n\n  setLabelYPosition(element, y) {\n    try {\n      let height = element.node().height.baseVal.value;\n      element.attr('y', Math.ceil(Number(y) - (height / 2)));\n    } catch (Error) {\n      // don't care, this might fail for multiple reasons\n      // the use rmight have switch renderer for instance\n      // no worries if something is not properly aligned :P\n    }\n  }\n\n  _connectedNodes(node, canvasNodes, link, canvasLinks) {\n    let self = this;\n    //Toggle stores whether the highlighting is on\n    let toggle = false;\n\n    //Create an array logging what is connected to what\n    let linkedByIndex = {};\n\n    canvasLinks.forEach(function (d) {\n      let sourceId = Utilities.isObject(d.source) ? d.source.id : d.source;\n      let targetId = Utilities.isObject( d.target) ? d.target.id : d.target;\n      linkedByIndex[`${sourceId},${sourceId}`] = true;\n      linkedByIndex[`${targetId},${sourceId}`] = true;\n      linkedByIndex[`${sourceId},${targetId}`] = true;\n    });\n\n    function connected() {\n      if (!self.context.configuration.object.showNeighbours) return;\n      let el = d3.select(this);\n      if (!toggle) {\n        //Reduce the opacity of all but the neighbouring nodes\n        let d = el.datum();\n        if (el.attr('class').includes('francy-node')) {\n          node.style('opacity', o => linkedByIndex[`${d.id},${o.id}`] || linkedByIndex[`${o.id},${d.id}`] ? 1 : 0.1);\n          link.style('opacity', function (o) {\n            let localTargetId = Utilities.isObject(o.target) ? o.target.id : o.target;\n            let localSourceId = Utilities.isObject(o.source) ? o.source.id : o.source;\n            let opacity = d.id === localSourceId || d.id === localTargetId ? 1 : 0.1;\n            d3.select(this).on('mouseleave', undefined).select('text').style('opacity', opacity);\n            return opacity;\n          });\n        } else if (el.attr('class').includes('francy-link')) {\n          let sourceId = Utilities.isObject(d.source) ? d.source.id : d.source;\n          let targetId = Utilities.isObject(d.target) ? d.target.id : d.target;\n          node.style('opacity', o => sourceId === o.id || targetId === o.id ? 1 : 0.1);\n          link.style('opacity', function (o) {\n            let localTargetId = Utilities.isObject(o.target) ? o.target.id : o.target;\n            let localSourceId = Utilities.isObject(o.source) ? o.source.id : o.source;\n            let opacity = sourceId === localSourceId && targetId === localTargetId ? 1 : 0.1;\n            d3.select(this).on('mouseleave', undefined).select('text').style('opacity', opacity);\n            return opacity;\n          });\n        }\n        setTimeout(() => {\n          d3.select('body').on('click', () => toggle ? connected.call(this) : undefined);\n        }, 0);\n        //Reduce the op\n        toggle = true;\n      } else {\n        //Put them back to opacity 1\n        node.style('opacity', 1);\n        link.style('opacity', function () {\n          d3.select(this).select('text').style('opacity', 0.1);\n          return 1;\n        });\n        self.graphOperations.labelsOpacityBehavior(link);\n        d3.select('body').on('click', undefined);\n        toggle = false;\n      }\n      d3.event.preventDefault();\n    }\n\n    return connected;\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-graphviz/src/graph/generic.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 493,
    "kind": "class",
    "name": "GraphGeneric",
    "memberof": "packages/francy-renderer-graphviz/src/graph/generic.js",
    "static": true,
    "longname": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-graphviz/src/graph/generic.js",
    "importStyle": "GraphGeneric",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~Graph"
    ]
  },
  {
    "__docId__": 494,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 495,
    "kind": "member",
    "name": "callback",
    "memberof": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric",
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric#callback",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 496,
    "kind": "member",
    "name": "tooltip",
    "memberof": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric",
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric#tooltip",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 497,
    "kind": "member",
    "name": "contextMenu",
    "memberof": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric",
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric#contextMenu",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric#render",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('canvas.graph')"
      },
      {
        "name": "Decorators.Initializer.initialize",
        "arguments": "()"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "setLabelXPosition",
    "memberof": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric#setLabelXPosition",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "setLabelYPosition",
    "memberof": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric#setLabelYPosition",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "_connectedNodes",
    "memberof": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/graph/generic.js~GraphGeneric#_connectedNodes",
    "access": "private",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "canvasNodes",
        "types": [
          "*"
        ]
      },
      {
        "name": "link",
        "types": [
          "*"
        ]
      },
      {
        "name": "canvasLinks",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 502,
    "kind": "file",
    "name": "packages/francy-renderer-graphviz/src/util/dot-converter.js",
    "content": "import { DataHandler, Decorators, Graph, Utilities } from 'francy-core';\n\n/* global d3 */\n\n/**\n * This class converts Francy Json into DOT Language required by Graphviz.\n * \n * @see https://www.graphviz.org/doc/info/lang.html\n * @extends {DataHandler}\n */\nexport default class DOTLanguageConverterHelper extends DataHandler {\n\n  constructor(context) {\n    super();\n    this.context = context;\n    this.dotString = '';\n  }\n\n  initialize() {\n    this.directed = this.data.canvas.graph.type === 'directed';\n    this.tree = this.data.canvas.graph.type === 'tree';\n    if (this.tree) {\n      this.treeLinks = {};\n      Object.values(this.data.canvas.graph.nodes).forEach(node => {\n        if (!this.treeLinks[node.id]) {\n          this.treeLinks[node.id] = [];\n        }\n        this.treeLinks[node.id].push(node.parent);\n      });\n    }\n  }\n\n  @Decorators.Data.requires('canvas.graph')\n  @Decorators.Initializer.initialize()\n  convert() {\n    this.dotString += this.directed ? 'digraph ' : 'graph ';\n    this.dotString += `\"${this.data.canvas.title}\" {`;\n    this.dotString += `\\t graph [ rankdir=\"${this.context.configuration.object.graphvizRankdir}\" ]`;\n    this._iterateNodes();\n    if (this.tree) {\n      this._createTree();\n    } else {\n      this._iterateLinks();\n    }\n    return this.dotString += '\\n}';\n  }\n\n  _iterateNodes() {\n    Object.values(this.data.canvas.graph.nodes).forEach(node => {\n      this.dotString += this._createNode(node);\n    });\n  }\n\n  _createTree() {\n    Object.values(this.data.canvas.graph.nodes).forEach(node => {\n      this.dotString += this._createLeaf(node);\n    });\n  }\n\n  _createLeaf(node) {\n    let dotLink = `\\n\\t\"${node.id}\"`;\n    dotLink += this.directed ? ' -> ' : ' -- ';\n    return dotLink += `{ ${this.treeLinks[node.id].join('\" \"')} }`;\n  }\n\n  _createNode(node) {\n    let dotNode = `\\n\\t\"${node.id}\"`;\n    dotNode += ' [';\n    dotNode += ` id=\"${node.id}\"`;\n    dotNode += ' style=\"filled\"';\n    dotNode += ` label=\"${node.title.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')}\"`;\n    dotNode += ` shape=\"${node.type}\"`;\n    dotNode += ` fillcolor=\"${node.conjugate ? d3.color(Graph.colors(node.conjugate * 5)).hex() : node.color ? node.color : d3.color(Graph.colors(node.layer * 5)).hex()}\"`;\n    return dotNode += ' ];';\n  }\n\n  _iterateLinks() {\n    Object.values(this.data.canvas.graph.links).forEach(link => {\n      this.dotString += this._createLink(link);\n    });\n  }\n\n  _createLink(link) {\n    let dotLink = `\\n\\t \"${Utilities.isObject(link.source) ? link.source.id : link.source}\"`;\n    dotLink += this.directed ? ' -> ' : ' -- ';\n    dotLink += `\"${Utilities.isObject(link.target) ? link.target.id : link.target}\"`;\n    dotLink += ' [';\n    dotLink += ` id=\"${link.id}\"`;\n    if (link.title || link.type || link.color) {\n      dotLink += link.title ? ` label=\"${link.title.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')}\"` : '';\n      dotLink += link.type ? ` shape=\"${link.type}\"` : '';\n      dotLink += link.color ? ` fillcolor=\"${d3.color(link.color).hex()}\" color=\"${d3.color(link.color).hex()}\"` : '';\n    }\n    return dotLink += ' ];';\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-graphviz/src/util/dot-converter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 503,
    "kind": "class",
    "name": "DOTLanguageConverterHelper",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js",
    "static": true,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-graphviz/src/util/dot-converter.js",
    "importStyle": "DOTLanguageConverterHelper",
    "description": "This class converts Francy Json into DOT Language required by Graphviz.",
    "see": [
      "https://www.graphviz.org/doc/info/lang.html"
    ],
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "DataHandler"
    ]
  },
  {
    "__docId__": 504,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 505,
    "kind": "member",
    "name": "context",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper#context",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 506,
    "kind": "member",
    "name": "dotString",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper#dotString",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "initialize",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 508,
    "kind": "member",
    "name": "directed",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper#directed",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 509,
    "kind": "member",
    "name": "tree",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper#tree",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 510,
    "kind": "member",
    "name": "treeLinks",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper#treeLinks",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "convert",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper#convert",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('canvas.graph')"
      },
      {
        "name": "Decorators.Initializer.initialize",
        "arguments": "()"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "_iterateNodes",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper#_iterateNodes",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "_createTree",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper#_createTree",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "_createLeaf",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper#_createLeaf",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "_createNode",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper#_createNode",
    "access": "private",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "_iterateLinks",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper#_iterateLinks",
    "access": "private",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "_createLink",
    "memberof": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-graphviz/src/util/dot-converter.js~DOTLanguageConverterHelper#_createLink",
    "access": "private",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "link",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 524,
    "kind": "file",
    "name": "packages/francy-renderer-vis/index.js",
    "content": "import Canvas from './src/canvas';\nimport { RenderingConfiguration } from 'francy-core';\n\nexport const RENDERER_NAME = 'Vis-Renderer';\n\nexport class VisRenderer extends RenderingConfiguration {\n    \n  constructor(isDefault = false) {\n    super(Canvas, RENDERER_NAME, isDefault);\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-vis/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 525,
    "kind": "variable",
    "name": "RENDERER_NAME",
    "memberof": "packages/francy-renderer-vis/index.js",
    "static": true,
    "longname": "packages/francy-renderer-vis/index.js~RENDERER_NAME",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-vis/index.js",
    "importStyle": "{RENDERER_NAME}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 526,
    "kind": "class",
    "name": "VisRenderer",
    "memberof": "packages/francy-renderer-vis/index.js",
    "static": true,
    "longname": "packages/francy-renderer-vis/index.js~VisRenderer",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-vis/index.js",
    "importStyle": "{VisRenderer}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~RenderingConfiguration"
    ]
  },
  {
    "__docId__": 527,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-vis/index.js~VisRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-vis/index.js~VisRenderer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 528,
    "kind": "file",
    "name": "packages/francy-renderer-vis/src/canvas.js",
    "content": "import { CompositeRenderer, Decorators, Logger, RENDERING_EVENTS } from 'francy-core';\nimport ChartGeneric from './chart/generic';\nimport GraphGeneric from './graph/generic';\n\n/* global d3 */\n\nexport default class Canvas extends CompositeRenderer {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    this.graphFactory = new GraphGeneric(this.options, this.context);\n    this.chartFactory = new ChartGeneric(this.options, this.context);\n    this.visLayoutSortMethod = ['directed', 'hubsize'];\n    this.visLayoutDirections = { 'UD': 'Top to Bottom', 'LR': 'Left to Right', 'DU': 'Bottom to Top', 'RL': 'Right to Left' };\n    // this only adds if does not exist\n    this.context.configuration.addProperty('visLayoutSortMethod', 'directed');\n    this.context.configuration.addProperty('visLayoutDirection', 'UD');\n  }\n\n  @Decorators.Data.requires('canvas')\n  async render() {\n    const canvasId = `Canvas-${this.data.canvas.id}`;\n    \n    this.element = d3.select(`div#${canvasId}`);\n    \n    // check if the canvas is already present\n    if (!this.element.node()) {\n      // create a svg element detached from the DOM!\n      Logger.debug(`(${this.context.instanceId}) Creating Canvas [${canvasId}]...`);\n      this.element = this.parent.append('div')\n        .classed('francy-canvas', true)\n        .attr('id', canvasId);\n    }\n\n    // cannot continue if canvas is not present\n    if (!this.element.node()) {\n      throw new Error(`Oops, could not create canvas with id [${canvasId}]... Cannot proceed.`);\n    }\n\n    this.zoomToFit = () => true;\n    this.element.zoomToFit = this.zoomToFit;\n    \n    Logger.debug(`(${this.context.instanceId}) Canvas updated [${canvasId}]...`);\n    \n    this._buildMenu();\n\n    this.removeChildren();\n    this.addChild(this.graphFactory).addChild(this.chartFactory);\n    this.handlePromise(this.renderChildren());\n\n    return this;\n  }\n\n  _buildMenu() {\n    var self = this;\n    // here we have access to MainMenu\n    this.visLayoutSortMethod.forEach((method) => {\n      this.parentClass.MainMenu.addMultiMenuOnSettingsMenu({\n        menuId: 'vis-sort-method-entry',\n        menuTitle: 'Sort Method',\n        entryId: `vis-sort-method-${method}-entry`,\n        entryTitle: `${self.context.configuration.object.visLayoutSortMethod === method ? '&#9745' : '&#9744'} ${method}`,\n        entryOnClickCallback: function () {\n          self.context.configuration.object.visLayoutSortMethod = method;\n        },\n        entryOnEachCallback: function () {\n          let methodCheckId = `vis-sort-method-checkbox-${self.data.canvas.id}`;\n          self.context.configuration.subscribe('visLayoutSortMethod', function (value) {\n            d3.select(this).html(`${value === method ? '&#9745' : '&#9744'} ${method}`);\n          }, methodCheckId);\n        }\n      });\n    });\n\n    function reRender() {\n      // remove previous rendered canvas\n      self.element.select('g').selectAll('*').remove();\n      // re-render\n      setTimeout(() => {\n        let Renderer = self.context.renderingManager.activeRenderer();\n        self.options.appendTo.data = self.options.appendTo.canvas.data;\n        self.options.appendTo.canvas = new Renderer(self.options, self.context);\n        self.handlePromise(self.options.appendTo.render());\n      }, 100);\n    }\n\n    // re-render when engine changes\n    let engineRenderId = `vis-sort-method-reRender-${self.data.canvas.id}`;\n    self.context.configuration.subscribe('visLayoutSortMethod', reRender, engineRenderId);\n\n    Object.keys(this.visLayoutDirections).forEach((dir) => {\n      this.parentClass.MainMenu.addMultiMenuOnSettingsMenu({\n        menuId: 'vis-dir-entry',\n        menuTitle: 'Direction',\n        entryId: `vis-dir-${dir}-entry`,\n        entryTitle: `${self.context.configuration.object.visLayoutDirection === dir ? '&#9745' : '&#9744'} ${self.visLayoutDirections[dir]}`,\n        entryOnClickCallback: function () {\n          self.context.configuration.object.visLayoutDirection = dir;\n        },\n        entryOnEachCallback: function () {\n          let dirCheckId = `vis-dir-${self.data.canvas.id}`;\n          self.context.configuration.subscribe('visLayoutDirection', function (value) {\n            d3.select(this).html(`${value === dir ? '&#9745' : '&#9744'} ${dir}`);\n          }, dirCheckId);\n        }\n      });\n    });\n\n    // re-render when engine changes\n    let dirRenderId = `vis-dir-reRender-${self.data.canvas.id}`;\n    self.context.configuration.subscribe('visLayoutDirection', reRender, dirRenderId);\n\n    // remove menu if renderer is disabled\n    let rendererDisableId = `vis-disable-${self.data.canvas.id}`;\n    self.context.renderingManager.subscribe(RENDERING_EVENTS.STATUS, function (r) {\n      if (!r.enable) {\n        self.parentClass.MainMenu.removeMenuEntry('vis-sort-method-entry');\n        self.parentClass.MainMenu.removeMenuEntry('vis-dir-entry');\n      }\n    }, rendererDisableId);\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-vis/src/canvas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 529,
    "kind": "class",
    "name": "Canvas",
    "memberof": "packages/francy-renderer-vis/src/canvas.js",
    "static": true,
    "longname": "packages/francy-renderer-vis/src/canvas.js~Canvas",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-vis/src/canvas.js",
    "importStyle": "Canvas",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~CompositeRenderer"
    ]
  },
  {
    "__docId__": 530,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-vis/src/canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-vis/src/canvas.js~Canvas#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 531,
    "kind": "member",
    "name": "graphFactory",
    "memberof": "packages/francy-renderer-vis/src/canvas.js~Canvas",
    "static": false,
    "longname": "packages/francy-renderer-vis/src/canvas.js~Canvas#graphFactory",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 532,
    "kind": "member",
    "name": "chartFactory",
    "memberof": "packages/francy-renderer-vis/src/canvas.js~Canvas",
    "static": false,
    "longname": "packages/francy-renderer-vis/src/canvas.js~Canvas#chartFactory",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "member",
    "name": "visLayoutSortMethod",
    "memberof": "packages/francy-renderer-vis/src/canvas.js~Canvas",
    "static": false,
    "longname": "packages/francy-renderer-vis/src/canvas.js~Canvas#visLayoutSortMethod",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "member",
    "name": "visLayoutDirections",
    "memberof": "packages/francy-renderer-vis/src/canvas.js~Canvas",
    "static": false,
    "longname": "packages/francy-renderer-vis/src/canvas.js~Canvas#visLayoutDirections",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"UD\": string, \"LR\": string, \"DU\": string, \"RL\": string}"
      ]
    }
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-renderer-vis/src/canvas.js~Canvas",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-renderer-vis/src/canvas.js~Canvas#render",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('canvas')"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 536,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-renderer-vis/src/canvas.js~Canvas",
    "static": false,
    "longname": "packages/francy-renderer-vis/src/canvas.js~Canvas#element",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "member",
    "name": "zoomToFit",
    "memberof": "packages/francy-renderer-vis/src/canvas.js~Canvas",
    "static": false,
    "longname": "packages/francy-renderer-vis/src/canvas.js~Canvas#zoomToFit",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "method",
    "name": "_buildMenu",
    "memberof": "packages/francy-renderer-vis/src/canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-vis/src/canvas.js~Canvas#_buildMenu",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 540,
    "kind": "file",
    "name": "packages/francy-renderer-vis/src/chart/generic.js",
    "content": "import { Decorators, Renderer } from 'francy-core';\n\n/* global d3 */\n\nexport default class ChartGeneric extends Renderer {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n  }\n\n  @Decorators.Data.requires('canvas.chart')\n  async render() {\n    const canvasId = `Canvas-${this.data.canvas.id}`;\n    this.parentClass.element = this.parent.append('svg')\n      .classed('francy-canvas', true)\n      .attr('xmlns', 'http://www.w3.org/2000/svg')\n      .attr('xmlns:xlink', 'http://www.w3.org/1999/xlink')\n      .attr('id', canvasId).attr('width', '100%').attr('height', this.data.canvas.height);\n\n    this.element = this.parentClass.element.append('g').classed('francy-content', true)\n      .classed('graph', true)\n      .attr('id', 'graph0').append('text').text('Not supported by this renderer...');\n\n    this.options.appendTo.zoom = d3.zoom();\n\n    this.parentClass.zoomToFit(true);\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-vis/src/chart/generic.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 541,
    "kind": "class",
    "name": "ChartGeneric",
    "memberof": "packages/francy-renderer-vis/src/chart/generic.js",
    "static": true,
    "longname": "packages/francy-renderer-vis/src/chart/generic.js~ChartGeneric",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-vis/src/chart/generic.js",
    "importStyle": "ChartGeneric",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~Renderer"
    ]
  },
  {
    "__docId__": 542,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-vis/src/chart/generic.js~ChartGeneric",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-vis/src/chart/generic.js~ChartGeneric#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 543,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-renderer-vis/src/chart/generic.js~ChartGeneric",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-renderer-vis/src/chart/generic.js~ChartGeneric#render",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('canvas.chart')"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 544,
    "kind": "member",
    "name": "element",
    "memberof": "packages/francy-renderer-vis/src/chart/generic.js~ChartGeneric",
    "static": false,
    "longname": "packages/francy-renderer-vis/src/chart/generic.js~ChartGeneric#element",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 545,
    "kind": "file",
    "name": "packages/francy-renderer-vis/src/graph/generic.js",
    "content": "import { Callback, ContextMenu, Decorators, Graph, Tooltip, Utilities } from 'francy-core';\n\n/* global vis */\n\nexport default class GraphGeneric extends Graph {\n\n  constructor({ appendTo, callbackHandler }, context) {\n    super({ appendTo: appendTo, callbackHandler: callbackHandler }, context);\n    this.callback = new Callback(this.options, this.context);\n    this.tooltip = new Tooltip(this.options, this.context);\n    this.contextMenu = new ContextMenu(this.options, this.context);\n  }\n\n  @Decorators.Data.requires('canvas.graph')\n  @Decorators.Initializer.initialize()\n  async render() {\n    let self = this,\n      loader = Decorators.Loader.withContext(this).show(),\n      canvasNodes = this.data.canvas.graph.nodes ? JSON.parse(JSON.stringify(Object.values(this.data.canvas.graph.nodes))) : [],\n      canvasLinks = this.data.canvas.graph.links ? JSON.parse(JSON.stringify(Object.values(this.data.canvas.graph.links))) : [];\n\n    canvasLinks.forEach(function(link){\n      if (self.data.canvas.graph.type === 'directed') {\n        link['arrows'] = 'to';\n      }\n      link['label'] = link.title;\n      link['from'] = link.source;\n      link['to'] = link.target;\n    });\n      \n    canvasNodes.forEach(function(node){\n      node['label'] = node.title;\n      node['group'] = node.conjugate || node.layer;\n      node['borderWidth'] =  node.invisible ? 0 : Math.sqrt(node.weight || 0.2);\n      node['chosen'] = node.selected;\n      node['shape'] = node.type;\n      if (self.data.canvas.graph.type === 'tree') {\n        // safe as there are no links on trees - yeah, it's an hack\n        canvasLinks.push({id: Utilities.generateId(), from: node.parent, to: node.id});\n      }\n    });\n\n    var network = new vis.Network(this.parent.node(), {\n      nodes: new vis.DataSet(canvasNodes),\n      edges: new vis.DataSet(canvasLinks)\n    }, {\n      nodes: {\n        borderWidth: 2,\n        size: 10\n      },\n      interaction: {\n        hover: true,\n        dragNodes: self.data.canvas.graph.type !== 'tree'\n      },\n      layout: {\n        hierarchical: {\n          direction: self.context.configuration.object.visLayoutDirection,\n          sortMethod: self.context.configuration.object.visLayoutSortMethod\n        }\n      },\n      height: self.data.canvas.height + ''\n    });\n    \n    // update the 'zoom to fit' function\n    self.parentClass.zoomToFit = () => network.fit();\n  \n    network.on('stabilized', function() {\n      loader.hide();\n    });\n    \n    network.on('animationFinished', function() {\n      loader.hide();\n    });\n\n    network.on('click', function(params) {\n      params.event.preventDefault();\n      let data = resolveNode.call(this, params);\n      self.OnEvent.click(data);\n    });\n    \n    network.on('oncontext', function (params) {\n      params.event.preventDefault();\n      let data = resolveNode.call(this, params);\n      self.OnEvent.contextMenu(data);\n    });\n\n    network.on('doubleClick', function (params) {\n      params.event.preventDefault();\n      let data = resolveNode.call(this, params);\n      self.OnEvent.doubleClick(data);\n    });\n      \n    network.on('hoverNode', function (params) {\n      params.event.preventDefault();\n      let data = resolveNode.call(this, params);\n      self.OnEvent.mouseIn(data);\n    });\n      \n    network.on('blurNode', function () {\n      self.OnEvent.mouseOut();\n    });\n      \n    function resolveNode(params) {\n      let nodeIndex = this.getNodeAt(params.pointer.DOM);\n      if (nodeIndex) {\n        let node = this.body.nodes[nodeIndex];\n        return node.options;\n      }\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "/home/travis/build/gap-packages/francy/js/packages/francy-renderer-vis/src/graph/generic.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 546,
    "kind": "class",
    "name": "GraphGeneric",
    "memberof": "packages/francy-renderer-vis/src/graph/generic.js",
    "static": true,
    "longname": "packages/francy-renderer-vis/src/graph/generic.js~GraphGeneric",
    "access": "public",
    "export": true,
    "importPath": "francy-js/packages/francy-renderer-vis/src/graph/generic.js",
    "importStyle": "GraphGeneric",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "francy-core~Graph"
    ]
  },
  {
    "__docId__": 547,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/francy-renderer-vis/src/graph/generic.js~GraphGeneric",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/francy-renderer-vis/src/graph/generic.js~GraphGeneric#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 548,
    "kind": "member",
    "name": "callback",
    "memberof": "packages/francy-renderer-vis/src/graph/generic.js~GraphGeneric",
    "static": false,
    "longname": "packages/francy-renderer-vis/src/graph/generic.js~GraphGeneric#callback",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 549,
    "kind": "member",
    "name": "tooltip",
    "memberof": "packages/francy-renderer-vis/src/graph/generic.js~GraphGeneric",
    "static": false,
    "longname": "packages/francy-renderer-vis/src/graph/generic.js~GraphGeneric#tooltip",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 550,
    "kind": "member",
    "name": "contextMenu",
    "memberof": "packages/francy-renderer-vis/src/graph/generic.js~GraphGeneric",
    "static": false,
    "longname": "packages/francy-renderer-vis/src/graph/generic.js~GraphGeneric#contextMenu",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "render",
    "memberof": "packages/francy-renderer-vis/src/graph/generic.js~GraphGeneric",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/francy-renderer-vis/src/graph/generic.js~GraphGeneric#render",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "decorators": [
      {
        "name": "Decorators.Data.requires",
        "arguments": "('canvas.graph')"
      },
      {
        "name": "Decorators.Initializer.initialize",
        "arguments": "()"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "kind": "index",
    "content": "# Francy - Javascript\n\n[![npm version](https://badge.fury.io/js/francy.svg)](https://badge.fury.io/js/francy)\n[![npm version](https://badge.fury.io/js/francy-core.svg)](https://badge.fury.io/js/francy-core)\n[![npm version](https://badge.fury.io/js/francy-extension-browser.svg)](https://badge.fury.io/js/francy-extension-browser)\n[![npm version](https://badge.fury.io/js/jupyter-francy.svg)](https://badge.fury.io/js/jupyter-francy)\n[![npm version](https://badge.fury.io/js/francy-renderer-d3.svg)](https://badge.fury.io/js/francy-renderer-d3)\n[![npm version](https://badge.fury.io/js/francy-renderer-graphviz.svg)](https://badge.fury.io/js/francy-renderer-graphviz)\n[![npm version](https://badge.fury.io/js/francy-renderer-vis.svg)](https://badge.fury.io/js/francy-renderer-vis)\n\nThis Javascript module produces graphics based on the semantic model produced by Francy GAP.\n\nFrancy depends on [d3.v5](https://d3js.org/).\n\n## Renderers\n\nFrancy supports renderers to be registered and thus producing different representations of graphs.\nThe renderers can be swithed at any time using the user interface, by selecting `Settings > Renderers` in the main menu.\n\nFrancy implements 3 renderers at the moment:\n\n1. [D3](https://d3js.org/) using D3 forces to get a representation of network graphs and charts.\n2. [Graphviz](https://www.graphviz.org/), [d3-graphviz](https://github.com/magjac/d3-graphviz), using one of 'circo', 'dot', 'fdp', 'neato', 'osage', 'patchwork' or 'twopi' engines to get different representations.\n3. [Vis](http://visjs.org/) using dynamic customizable networks.\n\n## Usage\n\nNote: \nMake sure [JupyterKenel](https://github.com/gap-packages/JupyterKernel) is installed on Jupyter - JupyterKernel is distributed with GAP by default, since v4.10 :)\nMake sure [Francy GAP](/) is installed on GAP - Francy is distributed with GAP by default, since v4.10 :)\n\n### Jupyter integration\n\nIn order to use this module in Jupyter, it can be installed as a notebook extension and lab extension:\n\n```bash\nmcmartins@local:~$ pip install jupyter_francy\nmcmartins@local:~$ jupyter lab build # for JupyterLab\nmcmartins@local:~$ jupyter nbextension enable --py --sys-prefix jupyter_francy # for Notebook\n```\n\nIt's possible to install it on Jupyter lab by running:\n\n```bash\nmcmartins@local:~$ jupyter labextension install jupyter-francy\n```\n\n### Browser integration\n\n```html\n<html>\n<head>\n  <meta charset=\"utf-8\" content=\"text/html\" property=\"GAP,francy,d3.v5,graphviz,vis\">\n  <script src=\"https://d3js.org/d3.v5.min.js\"></script>\n  <script src=\"https://unpkg.com/viz.js@1.8.1/viz.js\"></script>\n  <script src=\"https://unpkg.com/d3-graphviz@2.6.1/build/d3-graphviz.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.css\" />\n  <script src=\"https://unpkg.com/francy-extension-browser@1.2.4/dist/FrancyJS.bundle.js\"></script>\n  <script src=\"https://unpkg.com/francy-extension-browser@1.2.4/dist/D3Renderer.bundle.js\"></script>\n  <script src=\"https://unpkg.com/francy-extension-browser@1.2.4/dist/GraphvizRenderer.bundle.js\"></script>\n  <script src=\"https://unpkg.com/francy-extension-browser@1.2.4/dist/VisRenderer.bundle.js\"></script>\n  <title>Francy</title>\n</head>\n<body>\n  <div id=\"francy-drawing-div\"></div>\n  <script>\n\n    // configure francy\n    var Francy = new FrancyApp({ \n      appendTo: '#francy-drawing-div', \n      callbackHandler: (json) => {\n        Logger.info(`Input from callback: ${json}`);\n      }\n    });\n\n    // register available renderers\n    Francy.RenderingManager.register(new D3Renderer());\n    Francy.RenderingManager.register(new GraphvizRenderer());\n    Francy.RenderingManager.register(new VisRenderer());\n\n    d3.json(\"json.json\", function (error, json) {\n      Francy.load(json).render().catch(error => Logger.error(error)).then(element => Logger.info('Do whatever with me:', element));\n    });\n\n  </script>\n</body>\n</html>\n```\n\n# Package Structure\n\n|Directory                          |Description                                                      |\n|:----------------------------------|:----------------------------------------------------------------|\n| packages                          | contains the packages that builds up francy-js                  |\n| packages/francy                   | contains the base components of Francy                          |\n| packages/francy-core              | contains the core components of Francy                          |\n| packages/francy-extension-browser | contains the browser extension classes, for browser integration |\n| packages/francy-extension-jupyter | contains the browser extension classes, for jupyter integration |\n| packages/francy-renderer-d3       | contains the classes to produce graphics with D3                |\n| packages/francy-renderer-graphviz | contains the classes to produce graphics with D3-Graphviz       |\n| packages/francy-renderer-vis      | contains the classes to produce graphics with Vis.js            |\n\n# License\n\n[MIT](LICENSE) License\n",
    "longname": "/home/travis/build/gap-packages/francy/js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"private\": true,\n  \"name\": \"francy-js\",\n  \"description\": \"Francy - An Interactive Discrete Mathematics Framework for GAP\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/gap-packages/francy.git\"\n  },\n  \"scripts\": {\n    \"prepare\": \"lerna link && lerna run prepare\",\n    \"bootstrap\": \"lerna bootstrap\",\n    \"test\": \"lerna run test\",\n    \"build\": \"lerna run build\",\n    \"build:jupyter\": \"lerna run build:jupyter\",\n    \"build:production\": \"lerna run build:production\",\n    \"clean\": \"lerna run clean\",\n    \"version\": \"lerna version --no-git-tag-version --no-push\",\n    \"docs\": \"esdoc\",\n    \"lint\": \"eslint ./packages/** \",\n    \"lint:fix\": \"eslint --fix ./packages/**\",\n    \"coverage\": \"npm run test\",\n    \"publish\": \"lerna publish --skip-git --force-publish\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"7.4.4\",\n    \"@babel/core\": \"7.4.4\",\n    \"@babel/plugin-proposal-decorators\": \"7.4.4\",\n    \"@babel/plugin-transform-classes\": \"7.4.4\",\n    \"@babel/plugin-transform-runtime\": \"7.4.4\",\n    \"@babel/polyfill\": \"7.4.4\",\n    \"@babel/preset-env\": \"7.4.4\",\n    \"@jupyterlab/rendermime\": \"0.19.1\",\n    \"babel-eslint\": \"10.0.1\",\n    \"babel-loader\": \"8.0.6\",\n    \"chai\": \"4.2.0\",\n    \"chai-string\": \"1.5.0\",\n    \"css-loader\": \"2.1.1\",\n    \"d3\": \"5.9.2\",\n    \"d3-graphviz\": \"2.6.1\",\n    \"esdoc\": \"1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"1.0.0\",\n    \"esdoc-standard-plugin\": \"1.0.0\",\n    \"eslint\": \"5.16.0\",\n    \"isparta\": \"4.1.1\",\n    \"karma\": \"4.1.0\",\n    \"karma-chai\": \"0.1.0\",\n    \"karma-chrome-launcher\": \"2.2.0\",\n    \"karma-coverage\": \"1.1.2\",\n    \"karma-mocha\": \"1.3.0\",\n    \"karma-mocha-reporter\": \"2.2.5\",\n    \"karma-webpack\": \"3.0.5\",\n    \"lerna\": \"3.14.1\",\n    \"lodash.isequal\": \"4.5.0\",\n    \"lodash.reduce\": \"4.6.0\",\n    \"mocha\": \"6.1.4\",\n    \"puppeteer\": \"1.16.0\",\n    \"save-svg-as-png\": \"1.4.14\",\n    \"seedrandom\": \"3.0.1\",\n    \"style-loader\": \"0.23.1\",\n    \"uglifyjs-webpack-plugin\": \"2.1.3\",\n    \"vis\": \"4.21.0\",\n    \"viz.js\": \"1.8.1\",\n    \"webpack\": \"4.31.0\",\n    \"webpack-cli\": \"3.3.2\"\n  }\n}\n",
    "longname": "/home/travis/build/gap-packages/francy/js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]